//System check script
//#001 Mandelbrot test
//#002 Test command line arguments
//#003 Test include files
//#004 Access to module private object
//#005 Access to module public object
//#006 Specify all possible set options
//#007 Check invalid set options
//#008 Check set options with invalid values 1
//#009 Check set options with invalid values 2
//#010 Check set options with invalid values 3
//#011 Check set options with invalid values 4
//#012 Define type alias for all master types
//#013 Define integer constants with suffixes
//#014 Define char constants with escape sequences
//#015 Define string constants with escape sequences
//#016 Declare global constant variables for all master types and also defined types
//#017 Declare local constant variables for all master types and also defined types
//#018 Declare global constants through var keyword
//#019 Declare local constants through var keyword
//#020 Check global constant cannot be modified
//#021 Check local constant cannot be modified
//#022 Declare global variables for all master types and also defined types
//#023 Declare local variables for all master types and also defined types
//#024 Declare static variables for all master types and also defined types
//#025 Declare public constants using enums and types inside classes
//#026 Declare private constants using enums and types inside classes
//#027 Declare public variables using enums and types inside classes
//#028 Declare private variables using enums and types inside classes
//#029 Declare local variables using enums and types inside classes
//#030 Declare local variables using enums and types inside classes with local types
//#031 Declare global variables using var keyword for all master types and also defined types
//#032 Declare local variables using var keyword for all master types and also defined types
//#033 Check declaration of static variables using var keyword produces error
//#034 Check static keyword cannot happen on global variables
//#035 Check static keyword cannot happen on global consts
//#036 Check static keyword cannot happen on local consts
//#037 Check dltype/dlfunc (via importing aglib)
//#038 Test public class field and function are visible inside and outside class
//#039 Test public class field and function are visible inside and outside class
//#040 Test private class field gives error when accessed outside class
//#041 Test private class function member gives error when accessed outside class
//#042 Test static public class field retains value
//#043 Test static private class field retains value
//#044 Test grant class to entire class
//#045 Test grant class to field member
//#046 Test grant class to function member
//#047 Test grant function to entire class
//#048 Test grant function to field member
//#049 Test grant function to function member
//#050 Test grant function member to entire class
//#051 Test grant function member to field member
//#052 Test grant function member to function member
//#053 Test grant function operator to entire class
//#054 Test grant function operator to field member
//#055 Test grant function operator to function member
//#056 Define enum without values
//#057 Define enum with values
//#058 Define enum with some values
//#059 Define enum without closing it
//#060 Test if endif block
//#061 Test if else endif block
//#062 Test if elif else endif block
//#063 Test if elif elif else endif block
//#064 Test if elif elif elif else endif block
//#065 Test while endwhile
//#066 Test while endwhile with break & continue
//#067 Test do loop
//#068 Test do loop with break and continue
//#069 Test for endfor
//#070 Test for endfor with break and continue
//#071 Test walk endwalk
//#072 Test walk endwalk with break and continue
//#073 Test walk endwalk for fixed and dyn arrays
//#074 Test switch when endswitch
//#075 Test switch when when endswitch
//#076 Test switch when when when endswitch
//#077 Test switch default endswitch
//#078 Test switch when default endswitch
//#079 Test switch when when default endswitch
//#080 Test switch when when when default endswitch
//#081 Test sentence with left tokens
//#082 Test complex lit values for classes
//#083 Test complex lit values for arrays
//#084 Test empty complex lit values
//#085 Test operator ++ postfix with all allowed master type combinations
//#086 Test operator -- postfix with all allowed master type combinations
//#087 Test operator ++ prefix with all allowed master type combinations
//#088 Test operator -- prefix with all allowed master type combinations
//#089 Test unary operator + with all allowed master type combinations
//#090 Test unary operator - with all allowed master type combinations
//#091 Test operator ! with all allowed master type combinations
//#092 Test operator ~ with all allowed master type combinations
//#093 Test operator (type) with numeric and string master types
//#094 Test binary operator * with all allowed master type combinations
//#095 Test operator / with all allowed master type combinations
//#096 Test operator % with all allowed master type combinations
//#097 Test operator + with all allowed master type combinations
//#098 Test operator - with all allowed master type combinations
//#099 Test operator << with all allowed master type combinations
//#100 Test operator >> with all allowed master type combinations
//#101 Test operator < with all allowed master type combinations
//#102 Test operator <= with all allowed master type combinations
//#103 Test operator > with all allowed master type combinations
//#104 Test operator >= with all allowed master type combinations
//#105 Test operator == with all allowed master type combinations
//#106 Test operator != with all allowed master type combinations
//#107 Test operator & with all allowed master type combinations
//#108 Test operator ^ with all allowed master type combinations
//#109 Test operator | with all allowed master type combinations
//#110 Test operator && with all allowed master type combinations
//#111 Test operator || with all allowed master type combinations
//#112 Test operator = with all allowed master type combinations
//#113 Test operator += with all allowed master type combinations
//#114 Test operator -= with all allowed master type combinations
//#115 Test operator *= with all allowed master type combinations
//#116 Test operator /= with all allowed master type combinations
//#117 Test operator %= with all allowed master type combinations
//#118 Test operator <<= with all allowed master type combinations
//#119 Test operator >>= with all allowed master type combinations
//#120 Test operator &= with all allowed master type combinations
//#121 Test operator ^= with all allowed master type combinations
//#122 Test operator |= with all allowed master type combinations
//#123 Test operator -> with all allowed master type combinations
//#124 Test ternary operator
//#125 Test fix array subcripts 1 to 5 dimensions
//#126 Test dyn array subcripts 1 to 5 dimension
//#127 Test string indexing
//#128 Pass litteral values all master types and defined types
//#129 Pass by value all master types and defined types
//#130 Pass by ref all master types and defined types
//#131 return all master types and defined types
//#132 Test operator overloads for all overloadable operators (numeric operands)
//#133 Test operator overloads for all overloadable operators (string operands)
//#134 Test date class
//#135 Test time class
//#136 Test datetime class
//#137 Test timespan class
//#138 Test timespan class operator date-date
//#139 Test timespan class operator time-time
//#140 Test timespan class datetime-datetime
//#141 Test timespan class operator date+timespan
//#142 Test timespan class operator time+timespan
//#143 Test timespan class operator datetime+timespan
//#144 Test timespan class operator date-timespan
//#145 Test timespan class operator time-timespan
//#146 Test timespan class operator datetime-timespan
//#147 Test timespan class operator timespan+timespan
//#148 Test timespan class operator timespan-timespan
//#149 Test date and time limit values
//#150 Test date comparison operators
//#151 Test time comparison operators
//#152 Test datetime comparison operators
//#153 Test timespan comparison operators
//#154 Test static class fields in global variables
//#155 Test static class fields in local variables
//#156 Test static class fields in global variables with initial value
//#157 Test static class fields in local variables with initial value
//#158 Test unused variable on function
//#159 Test unused variable on method
//#160 Test unused variable on operator
//#161 Test unused parameter on function
//#162 Test unused parameter on method
//#163 Test unused parameter on operator
//#164 Test unused variable on private module scope
//#165 Test unused static variable on function
//#166 Test unused static variable on method
//#167 Test unused static variable on operator
//#168 Test unitialized variable error on unary operator
//#169 Test unitialized variable error on binary operator
//#170 Test unitialized variable error on ternary operator
//#171 Test unitialized variable error on function call passing by value
//#172 Test unitialized variable error on function call passing by reference
//#173 Test unitialized variable error on array subscripting
//#174 Test unitialized static variable error on unary operator
//#175 Test unitialized static variable error on binary operator
//#176 Test unitialized static variable error on ternary operator
//#177 Test unitialized static variable error on function call passing by value
//#178 Test unitialized static variable error on function call passing by reference
//#179 Test unitialized static variable error on array subscripting
//#180 Test function/fmem overload
//#181 Test inner block replication (1 to 3 dimensions)
//#182 Test inner block replication (4 and 5 dimensions)
//#183 Test array typecasting
//#184 Test nested functions
//#185 Test nested operator overloads
//#186 Test nested classes in public scope
//#187 Test nested classes in private scope
//#188 Test nested classes in local scope
//#189 Test nested classes with static fields in public scope
//#190 Test nested classes with static fields in private scope
//#191 Test nested classes with static fields in local scope
//#192 Test for() expression
//#193 Test array() expression
//#194 Call all standard calls in module math
//#195 Call all standard calls in module console
//#196 Call all standard calls in module fileio
//#197 Call all standard calls in module system
//#198 Call all master methods for boolean
//#199 Call all master methods for char
//#200 Call all master methods for short
//#201 Call all master methods for integer
//#202 Call all master methods for long
//#203 Call all master methods for float
//#204 Call all master methods for string
//#205 Call all master methods for enum
//#206 Call all master methods for class
//#207 Call all master methods for fixArray
//#208 Call all master methods for dynArray
//#209 Declare and call system functions
//#210 Test inner replication for global variables for classes with static members inside
//#211 Test inner replication for local variables for classes with static members inside
//#212 Test inner replication for local static variables for classes with static members inside
//#213 Declaration of global variables with asterisk initialization
//#214 Declaration of local variables with asterisk initialization
//#215 Declaration of static variables with asterisk initialization
//#216 Declaration of expression variables with asterisk initialization
//#217 Declaration of global variables with automatic initialization
//#218 Declaration of local variables with automatic initialization
//#219 Declaration of static variables with automatic initialization
//#220 Declaration of expression variables with automatic initialization
//#221 Test asterisk initialization of global variables (classes with static members)
//#222 Test asterisk initialization of local variables (classes with static members)
//#223 Test asterisk initialization of static variables (classes with static members)
//#224 Test automatic initialization of global variables (classes with static members)
//#225 Test automatic initialization of local variables (classes with static members)
//#226 Test automatic initialization of static variables (classes with static members)
//#227 Test declaration of variables with asterisk initialization plus assign gives error
//#228 Test init sentence modifier on function members
//#229 Test master methods with meta method and initializer flags

//Libraries ---------------------------------------------------------------------------------------------------------
.libs

//Standard library
import system as sys
import console as con
import fileio as io
import dtime as dt

//Private declarations ----------------------------------------------------------------------------------------------
.private

//Constants
const int _definedtests=229
const int _defaultmaxerrors=50
const int _testnrwidth=3
const string DUNS_PATH=(sys.gethostsystem()==sys.oshost.windows?".\\duns.exe":"./duns")
const string TEMP_PATH=(sys.gethostsystem()==sys.oshost.windows?".\\.tmp\\":"./.tmp/")

//Max failures to show
int _maxfailures=0

//Test counters
int _passed=0
int _failed=0
int _notimp=0

//List test mode
bool _list_mode=false

//Execution modes
enum exec_mode:
  full
  single
  range
:enum

//Functions
void show_help()
bool get_command_line_options(ref exec_mode mode,ref int single_test,ref int range_min,ref int range_max,ref int maxerr,ref bool list_only)
void create_script(int testnr,string file,string script)
void execute_test(int testnr,string testname,string file,string arg,string result,bool ispattern)
void not_implemented(int testnr,string testname)
void system_test(int testnr)

//Implementation part -----------------------------------------------------------------------------------------------
.implem

//Show help ---------------------------------------------------------------------------------------------------------
func void show_help():
  con.println(r"[ ___                                ___           _ _    ]")
  con.println(r"[|   \ _  _ _ _  __ _ ___ ___ _ _   / __/_ __  ___| | |___]")
  con.println(r"[| \\ | || | ' \/ _` / -_) _ \ ' \  \__ \ '_ \/ -_) | (_-<]")
  con.println(r"[|___/ \___|_|\_\__, \___\___/_|\_\ /___/ .__/\___|_|_/__/]")
  con.println(r"[               |___/                   |_|               ]")
  con.println("")
  con.println("DungeonSpells system checks - Compiler and Runtime tests - v0.1");
  con.println("")
  con.println("Usage: duns syscheck.ds [--full]|[--single:<testnr>]|[--range:<min>,<max>] [--maxerr:<count>] [--list]")
  con.println("--full   : Execute all system checks")
  con.println("--single : Execute a single test")
  con.println("--range  : Execute a test range")
  con.println("<testnr> : Test number for single test execution mode (from 1 to "+_definedtests.tostr()+")")
  con.println("<min>    : Minimun test number for range execution mode (from 1 to "+_definedtests.tostr()+")")
  con.println("<max>    : Maximun test number for range execution mode (from 1 to "+_definedtests.tostr()+")")
  con.println("--maxerr : Modify error count limit")
  con.println("<count>  : Error count limit (default: "+_maxfailures.tostr())
  con.println("--list   : Does not execute tests but only prints their names")
  con.println("")
  con.println("Examples:")
  con.println("duns syscheck.ds --full")
  con.println("duns syscheck.ds --single:75")
  con.println("duns syscheck.ds --range:1,10")
:func

//Get command line options ------------------------------------------------------------------------------------------
func bool get_command_line_options(ref exec_mode mode,ref int single_test,ref int range_min,ref int range_max,ref int maxerr,ref bool list_only):

  //Variables
  int i=0
  int full_mode
  int single_mode
  int range_mode
  string item
  string[] parts

  //Init option values
  full_mode=0
  single_mode=0
  range_mode=0
  single_test=0  
  range_min=0
  range_max=0
  maxerr=_defaultmaxerrors
  list_only=false

  //Not enough arguments given
  if(sys.args.len()==1):
    show_help()
    return false
  
  //Get arguments
  else:
    for(i=1 if i<sys.args.len() do i++):
      item=sys.args[i]
      if(item=="--full"):
        full_mode=1
      elif(item.startswith("--single:")):
        single_mode=1
        if(item.replace("--single:","").isint()):
          single_test=item.replace("--single:","").toint()
        else:
          con.println("Expected integer number instead of string """+item.replace("--single:","")+"""")
          return false
        :if
      elif(item.startswith("--range:")):
        range_mode=1
        parts=item.replace("--range:","").split(",")
        if(parts.len()==2):
          if(parts[0].isint()):
            range_min=parts[0].toint()
          else:
            con.println("Expected integer number instead of string """+parts[0]+"""")
            return false
          :if
          if(parts[1].isint()):
            range_max=parts[1].toint()
          else:
            con.println("Expected integer number instead of string """+parts[1]+"""")
            return false
          :if
        else:
          con.println("Expected number,number after --range: option")
          return false
        :if
      elif(item.startswith("--maxerr:")):
        if(item.replace("--maxerr:","").isint()):
          maxerr=item.replace("--maxerr:","").toint()
        else:
          con.println("Expected integer number instead of string """+item.replace("--maxerr:","")+"""")
          return false
        :if
      elif(item=="--list"):
        list_only=true
      else:
        con.println("Invalid option: "+item)
        return false
      :if
    :for
  :if

  //Check arguments passed
  if(full_mode+single_mode+range_mode!=1):
    con.println("Can only provide one of these options: --full, --single or --range")
    return false
  :if
  if(single_mode==1):
    if(single_test<1 || single_test>_definedtests):
      con.println("Invalid test number given, valid test numbers are from 1 to "+_definedtests.tostr())
      return false
    :if
  :if
  if(range_mode==1):
    if(range_min<1 || range_min>_definedtests):
      con.println("Invalid test number given, valid test numbers are from 1 to "+_definedtests.tostr())
      return false
    :if
    if(range_max<1 || range_max>_definedtests):
      con.println("Invalid test number given, valid test numbers are from 1 to "+_definedtests.tostr())
      return false
    :if
    if(range_min>range_max):
      con.println("Invalid test range given, minimun test is greater than maximun test")
      return false
    :if
  :if

  //Calculate execution mode
  if(full_mode  ==1): mode=exec_mode.full;   :if
  if(single_mode==1): mode=exec_mode.single; :if
  if(range_mode ==1): mode=exec_mode.range;  :if

  //Return code
  return true

:func

//Create script -----------------------------------------------------------------------------------------------------
func void create_script(int testnr,string file,string script):
  
  //Variables
  string temp_file
  
  //Do nothing if max failures is reached or list mode is enabled
  if(_failed>=_maxfailures || _list_mode): return; :if
  
  //Write file
  temp_file=TEMP_PATH+file+"_"+testnr.tostr().rjust(_testnrwidth,'0')+".ds"
  if(!io.write(temp_file,script.replace("<nr>",testnr.tostr().rjust(_testnrwidth,'0')))):
    sys.panic("Unable to create script file "+temp_file)
  :if

:func

//Execute script ----------------------------------------------------------------------------------------------------
func void execute_test(int testnr,string testname,string file,string arg,string result,bool ispattern):
  
  //Variables
  bool outcome
  string[] out
  string output
  string temp_file
  
  //List mode (only prints test name)
  if(_list_mode):
    con.println("#"+testnr.tostr().rjust(_testnrwidth,'0')+" [Ready] "+testname)
    return
  :if

  //Do nothing if max failures is reached
  if((_failed+_notimp)>=_maxfailures): return; :if

  //Execute script
  out=(string[]){}
  temp_file=TEMP_PATH+file+"_"+testnr.tostr().rjust(_testnrwidth,'0')+".ds"
  if(!sys.execute(DUNS_PATH,temp_file+(arg.len()!=0?" "+arg:""),out)):
    sys.panic("Unable to execute script file "+temp_file)
  :if
  
  //Get output as single string
  output=""
  if(out.len()!=0):
    walk(out on str): 
      output+=str+"\\n"
    :walk
    output=output.cutr(2)
  :if

  //Check result
  if(ispattern):
    if(!output.like(result)):
      outcome=false
    else:
      outcome=true
    :if
  else:
    if(output!=result):
      outcome=false
    else:
      outcome=true
    :if
  :if
  
  //Count passed and failed
  if(outcome):
    _passed++
  else:
    _failed++
  :if

  //Report errors
  if(!outcome):
    con.println("#"+testnr.tostr().rjust(_testnrwidth,'0')+" [Error] "+testname+" --> "+output)
  :if

  //Report totals
  con.print("Executed:"+(_passed+_failed).tostr()+"  Passed:"+_passed.tostr()+"  Failed:"+_failed.tostr()+"  NotImpl.:"+_notimp.tostr()+"        \r")
  
:func

//Print not implemented test ----------------------------------------------------------------------------------------
func void not_implemented(int testnr,string testname):

  //List mode (only prints test name)
  if(_list_mode):
    con.println("#"+testnr.tostr().rjust(_testnrwidth,'0')+" [NtImp] "+testname)
    return
  :if

  //Exit if maximun failures reached
  if((_failed+_notimp)>=_maxfailures): 
    return; 
  :if
  
  //Count not implemented tests
  _notimp++

  //Report
  con.println("#"+testnr.tostr().rjust(_testnrwidth,'0')+" [NtImp] "+testname+" --> Not implemented")
  con.print("Executed:"+(_passed+_failed).tostr()+"  Passed:"+_passed.tostr()+"  Failed:"+_failed.tostr()+"  NotImpl.:"+_notimp.tostr()+"        \r")

:func

//System tests ------------------------------------------------------------------------------------------------------
func void system_test(int testnr):

  //Variables
  string testname

  //Test case switch
  switch(testnr):

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)1):
      testname="Mandelbrot test"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:

        //Calculation parameters
        short iter=(short)30
        float maxval=30
        float xmin=-2.1
        float xmax=1.0
        int stepsx=120
        float ymin=-1.2
        float ymax=1.2
        int stepsy=40

        //Variables
        float cx
        float cy
        int i
        int j
        int k
        float x0
        float y0
        float x1
        float y1
        bool overflow
        string line

        //Print loop
        for(j=0 if j<stepsy do j++):
          line=""
          for(i=0 if i<stepsx do i++):
            cx=xmin+i*(xmax-xmin)/stepsx
            cy=ymin+j*(ymax-ymin)/stepsy
            x0=cx
            y0=cy
            overflow=false
            for(k=0 if k<iter do k++):
              x1=(x0*x0)-(y0*y0)+cx
              y1=(2*x0*y0)+cy
              if((x1*x1)+(y1*y1)>maxval*maxval): 
                overflow=true
                break 
              else: 
                x0=x1 
                y0=y1 
              :if
            :for
            line+=(overflow?34+k%92:32).tochr()
          :for
          con.print(line+"\\n")
        :for  

      :main
      ]")
      execute_test(testnr,testname,"main","",r"[
      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&'''''''&&&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&'''(),,)((''''&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&''''((),20+***+(''&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&'''''(())*+-4 -+)(('''&&&&&&&&%%%%%%%%%%%%%%%$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&'''''''(()*++,34 2;+*)((''''&&&&&&&&&%%%%%%%%%%%%%%$$$$$$$$\n
      $$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&''''''''((()*/3 4     60:/*)(('''''&&&&&&&&%%%%%%%%%%%%%%$$$$$$\n
      $$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&''''''(((((()))*+94        4-+))((('''''''&&&&&&%%%%%%%%%%%%%$$$$$\n
      $$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&'''''(())))))))**++,.          -+***))((((((((''&&&&&%%%%%%%%%%%%$$$$\n
      $$$$$$$$$%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&'''''''(()+7247-,,,2 <1 757>    <74 ;1.<<,*****+4,(''&&&&&%%%%%%%%%%%%$$$\n
      $$$$$$%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&''''''''''((())+.1   ?2 ;                    72.-0 113=2)''&&&&&%%%%%%%%%%%%$$\n
      $$$$%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&'''''''''''''''(((())**+-<                              :    0,*((''&&&&&%%%%%%%%%%%%$\n
      $$%%%%%%%%%%%%%%%%%%&&&&&&&&&''''''''''''(((((((((())*,. 11                                  70,*)(('''&&&&&%%%%%%%%%%%$\n
      $%%%%%%%%%%%%%%%%&&&&&&&&&&'''()-+))(((())))))))))))*+,0                                        ,**)(''&&&&&%%%%%%%%%%%%\n
      %%%%%%%%%%%%%%%&&&&&&&&&&''''((*2.++****+4/+*******++7                                         ; 64-)(''&&&&&%%%%%%%%%%%\n
      %%%%%%%%%%%%&&&&&&&&&&''''''(())+,.5935..08 / /,,,,,-0;                                         50+)('''&&&&&%%%%%%%%%%%\n
      %%%%%%%%%&&&&&&&&&&''''''(((())*+,0?           : 0../                                             /*('''&&&&&%%%%%%%%%%%\n
      %%%%%%&&&&&&&&&'''''''(((())***,;4 =              >33                                            -*)('''&&&&&%%%%%%%%%%%\n
      %%%%&&&&&&''''''''((((())*+7--1.1                   ;                                           0+)('''&&&&&&%%%%%%%%%%%\n
      %%&&&&''''(()+))))))))**++-/3   >                                                              1*)(('''&&&&&&%%%%%%%%%%%\n
      %%&&                                                                                        4.,*))(('''&&&&&&%%%%%%%%%%%\n
      %%&&&&''''(()+))))))))**++-/3   >                                                              1*)(('''&&&&&&%%%%%%%%%%%\n
      %%%%&&&&&&''''''''((((())*+7--1.1                   ;                                           0+)('''&&&&&&%%%%%%%%%%%\n
      %%%%%%&&&&&&&&&'''''''(((())***,;4 =              >33                                            -*)('''&&&&&%%%%%%%%%%%\n
      %%%%%%%%%&&&&&&&&&&''''''(((())*+,0?           : 0../                                             /*('''&&&&&%%%%%%%%%%%\n
      %%%%%%%%%%%%&&&&&&&&&&''''''(())+,.5935..08 / /,,,,,-0;                                         50+)('''&&&&&%%%%%%%%%%%\n
      %%%%%%%%%%%%%%%&&&&&&&&&&''''((*2.++****+4/+*******++7                                         ; 64-)(''&&&&&%%%%%%%%%%%\n
      $%%%%%%%%%%%%%%%%&&&&&&&&&&'''()-+))(((())))))))))))*+,0                                        ,**)(''&&&&&%%%%%%%%%%%%\n
      $$%%%%%%%%%%%%%%%%%%&&&&&&&&&''''''''''''(((((((((())*,. 11                                  70,*)(('''&&&&&%%%%%%%%%%%$\n
      $$$$%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&'''''''''''''''(((())**+-<                              :    0,*((''&&&&&%%%%%%%%%%%%$\n
      $$$$$$%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&''''''''''((())+.1   ?2 ;                    72.-0 113=2)''&&&&&%%%%%%%%%%%%$$\n
      $$$$$$$$$%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&'''''''(()+7247-,,,2 <1 757>    <74 ;1.<<,*****+4,(''&&&&&%%%%%%%%%%%%$$$\n
      $$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&'''''(())))))))**++,.          -+***))((((((((''&&&&&%%%%%%%%%%%%$$$$\n
      $$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&''''''(((((()))*+94        4-+))((('''''''&&&&&&%%%%%%%%%%%%%$$$$$\n
      $$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&''''''''((()*/3 4     60:/*)(('''''&&&&&&&&%%%%%%%%%%%%%%$$$$$$\n
      $$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&'''''''(()*++,34 2;+*)((''''&&&&&&&&&%%%%%%%%%%%%%%$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&'''''(())*+-4 -+)(('''&&&&&&&&%%%%%%%%%%%%%%%$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&''''((),20+***+(''&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&'''(),,)((''''&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$\n
      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&'''''''&&&&&&&&&%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$\n
      ]".replace("\n","").replace("      $","$").replace("      %","%").replace("\\n      ","\\n"),false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)2):
      testname="Test command line arguments"
      create_script(testnr,"main", r"[
      .libs
      import system as sys
      import console as con
      .implem
      main:
        int i
        string args=""
        for(i=1 if i<sys.args.len() do i++):
          args+="{"+i.tostr()+":"+sys.args[i]+"}"
        :for
        con.print(args)
      :main
      ]")
      execute_test(testnr,testname,"main","12345 6789 abc def ghi jkl -1 -2 -3","{1:12345}{2:6789}{3:abc}{4:def}{5:ghi}{6:jkl}{7:-1}{8:-2}{9:-3}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)3):
      testname="Test include files"
      create_script(testnr,"include", r"[
      .libs
      import console as con
      .public
      string function1()
      .private
      const string _str="0"
      int _test=12345
      .implem
      func string function1():
        const string str="678"
        return _str+_test.tostr()+str
      :func
      ]")
      create_script(testnr,"main", r"[
      .libs
      import console as con
      include "include_<nr>" as inc
      .implem
      main:
        const string str="910"
        con.print(inc.function1()+str)
      :main
      ]")
      execute_test(testnr,testname,"main","","012345678910",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)4):
      testname="Access to module private object"
      create_script(testnr,"include", r"[
      .libs
      import console as con
      .private
      int field=12345
      int function1()
      .implem
      func int function1():
        return field
      :func
      ]")
      create_script(testnr,"main", r"[
      .libs
        import console as con
      include "include_<nr>" as inc
      .implem
      main:
        con.print(inc.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E177*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)5):
      testname="Access to module public object"
      create_script(testnr,"include",r"[
      .libs
      import console as con
      .public
      int field=12345
      ]")
      create_script(testnr,"main", r"[
      .libs
      import console as con
      include "include_<nr>" as inc
      .implem
      main:
        con.print(inc.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","12345",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)6):
      testname="Specify all possible set options"
      create_script(testnr,"main", r"[
      set memory_unit=1024
      set start_units=512
      set chunk_units=256
      set block_count=4096
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","ok",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)7):
      testname="Check invalid set options"
      create_script(testnr,"main", r"[
      set memory_unitx=1024
      set memory-unitz=345
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E143*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)8):
      testname="Check set options with invalid values 1"
      create_script(testnr,"main", r"[
      set memory_unit=abc
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E142*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)9):
      testname="Check set options with invalid values 2"
      create_script(testnr,"main", r"[
      set start_units=abc
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E142*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)10):
      testname="Check set options with invalid values 3"
      create_script(testnr,"main", r"[
      set chunk_units=abc
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E142*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)11):
      testname="Check set options with invalid values 4"
      create_script(testnr,"main", r"[
      set block_count=abc
      .libs
      import console as con
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E142*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)12):
      testname="Define type alias for all master types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","ok",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)13):
      testname="Define integer constants with suffixes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int result=0
        if(255S==0xFFS):
          result++
        :if
        if(32768==0c100000):
          result++
        :if
        if(11259375L==0xABCDEFL):
          result++
        :if
        if(result==3):
          con.print("ok")
        else:
          con.print("error")
        :if  
      :main
      ]")
      execute_test(testnr,testname,"main","","ok",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)14):
      testname="Define char constants with escape sequences"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int result=0
        var test=(char[]){'\b','\f','\n','\r','\t','\v','\'','\\','""','\x01','\x02','\x03'}
        if(test[0 ]=='\b'  ): result++; :if
        if(test[1 ]=='\f'  ): result++; :if
        if(test[2 ]=='\n'  ): result++; :if
        if(test[3 ]=='\r'  ): result++; :if
        if(test[4 ]=='\t'  ): result++; :if
        if(test[5 ]=='\v'  ): result++; :if
        if(test[6 ]=='\''  ): result++; :if
        if(test[7 ]=='\\'  ): result++; :if
        if(test[8 ]=='""'  ): result++; :if
        if(test[9 ]=='\x01'): result++; :if
        if(test[10]=='\x02'): result++; :if
        if(test[11]=='\x03'): result++; :if
        if(result==12):
          con.print("ok")
        else:
          con.print("error")
        :if  
      :main
      ]")
      execute_test(testnr,testname,"main","","ok",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)15):
      testname="Define string constants with escape sequences"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int result=0
        string[] test="\bzzz\fzzz\nzzz\rzzz\tzzz\vzzz\'zzz\\zzz""zzz\x01zzz\x02zzz\x03".split("zzz")
        if(test[0 ]=="\b"  ): result++; :if
        if(test[1 ]=="\f"  ): result++; :if
        if(test[2 ]=="\n"  ): result++; :if
        if(test[3 ]=="\r"  ): result++; :if
        if(test[4 ]=="\t"  ): result++; :if
        if(test[5 ]=="\v"  ): result++; :if
        if(test[6 ]=="\'"  ): result++; :if
        if(test[7 ]=="\\"  ): result++; :if
        if(test[8 ]==""""  ): result++; :if
        if(test[9 ]=="\x01"): result++; :if
        if(test[10]=="\x02"): result++; :if
        if(test[11]=="\x03"): result++; :if
        if(result==12):
          con.print("ok")
        else:
          con.print("error")
        :if  
      :main
      ]")
      execute_test(testnr,testname,"main","","ok",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)16):
      testname="Declare global constant variables for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      const bool cvar1=true
      const char cvar2='a'
      const short cvar3=32767S
      const int cvar4=(int)2.0E9
      const long cvar5=(long)0.9E19
      const float cvar6=-1.1E-10
      const string cvar7="hello"
      const enutype cvar8=enutype.enu1
      const classtype cvar9=(classtype){'a','a','a'}
      const char[3] cvar10=(char[3]){'a','a','a'}
      const char[] cvar11=(char[]){'a','a','a','a'}
      const type1 ctvar1=true
      const type2 ctvar2='a'
      const type3 ctvar3=32767S
      const type4 ctvar4=(int)4.29E9
      const type5 ctvar5=(long)0.9E19
      const type6 ctvar6=-1.1E-10
      const type7 ctvar7="hello"
      const type8 ctvar8=type8.enu1
      const type9 ctvar9=(type9){'a','a','a'}
      const type10 ctvar10=(type10){'a','a','a'}
      const type11 ctvar11=(type11){'a','a','a','a'}
      .implem
      main:
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)17):
      testname="Declare local constant variables for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      .implem
      main:
        const bool cvar1=true
        const char cvar2='a'
        const short cvar3=32767S
        const int cvar4=(int)4.29E9
        const long cvar5=(long)0.9E19
        const float cvar6=-1.1E-10
        const string cvar7="hello"
        const enutype cvar8=enutype.enu1
        const classtype cvar9=(classtype){'a','a','a'}
        const char[3] cvar10=(char[3]){'a','a','a'}
        const char[] cvar11=(char[]){'a','a','a','a'}
        const type1 ctvar1=true
        const type2 ctvar2='a'
        const type3 ctvar3=32767S
        const type4 ctvar4=(int)4.29E9
        const type5 ctvar5=(long)0.9E19
        const type6 ctvar6=-1.1E-10
        const type7 ctvar7="hello"
        const type8 ctvar8=type8.enu1
        const type9 ctvar9=(type9){'a','a','a'}
        const type10 ctvar10=(type10){'a','a','a'}
        const type11 ctvar11=(type11){'a','a','a','a'}
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)18):
      testname="Declare global constants through var keyword"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      const var cvar1=true
      const var cvar2='a'
      const var cvar3=32767
      const var cvar4=(int)4.29E9
      const var cvar5=(long)0.9E19
      const var cvar6=-1.1E-10
      const var cvar7="hello"
      const var cvar8=enutype.enu1
      const var cvar9=(classtype){'a','a','a'}
      const var cvar10=(char[3]){'a','a','a'}
      const var cvar11=(char[]){'a','a','a','a'}
      const var ctvar1=true
      const var ctvar2='a'
      const var ctvar3=32767
      const var ctvar4=(int)4.29E9
      const var ctvar5=(long)0.9E19
      const var ctvar6=-1.1E-10
      const var ctvar7="hello"
      const var ctvar8=type8.enu1
      const var ctvar9=(type9){'a','a','a'}
      const var ctvar10=(type10){'a','a','a'}
      const var ctvar11=(type11){'a','a','a','a'}
      .implem
      main:
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)19):
      testname="Declare local constants through var keyword"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      .implem
      main:
        const var cvar=500
        con.println(cvar.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E333*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)20):
      testname="Check global constant cannot be modified"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      const string const1="Hello"
      .implem
      main:
        const1="Man"
      :main
      ]")
      execute_test(testnr,testname,"main","","E076*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)21):
      testname="Check local constant cannot be modified"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      .implem
      main:
        const string const1="Hello"
        const1="Man"
      :main
      ]")
      execute_test(testnr,testname,"main","","E076*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)22):
      testname="Declare global variables for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      bool cvar1=true
      char cvar2='a'
      short cvar3=32767
      int cvar4=(int)4.29E9
      long cvar5=(long)0.9E19
      float cvar6=-1.1E-10
      string cvar7="hello"
      enutype cvar8=enutype.enu1
      classtype cvar9=(classtype){'a','a','a'}
      char[3] cvar10=(char[3]){'a','a','a'}
      char[] cvar11=(char[]){'a','a','a','a'}
      type1 ctvar1=true
      type2 ctvar2='a'
      type3 ctvar3=32767
      type4 ctvar4=(int)4.29E9
      type5 ctvar5=(long)0.9E19
      type6 ctvar6=-1.1E-10
      type7 ctvar7="hello"
      type8 ctvar8=type8.enu1
      type9 ctvar9=(type9){'a','a','a'}
      type10 ctvar10=(type10){'a','a','a'}
      type11 ctvar11=(type11){'a','a','a','a'}
      .implem
      main:
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)23):
      testname="Declare local variables for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        class classtype:
          int var1
          int var2
          int var3
        :class  
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
        bool cvar1=true
        char cvar2='a'
        short cvar3=32767
        int cvar4=(int)4.29E9
        long cvar5=(long)0.9E19
        float cvar6=-1.1E-10
        string cvar7="hello"
        enutype cvar8=enutype.enu1
        classtype cvar9=(classtype){'a','a','a'}
        char[3] cvar10=(char[3]){'a','a','a'}
        char[] cvar11=(char[]){'a','a','a','a'}
        type1 ctvar1=true
        type2 ctvar2='a'
        type3 ctvar3=32767
        type4 ctvar4=(int)4.29E9
        type5 ctvar5=(long)0.9E19
        type6 ctvar6=-1.1E-10
        type7 ctvar7="hello"
        type8 ctvar8=type8.enu1
        type9 ctvar9=(type9){'a','a','a'}
        type10 ctvar10=(type10){'a','a','a'}
        type11 ctvar11=(type11){'a','a','a','a'}
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)24):
      testname="Declare static variables for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      .implem
      main:
        bool cvar1=true
        static char cvar2='a'
        static short cvar3=32767
        static int cvar4=(int)4.29E9
        static long cvar5=(long)0.9E19
        static float cvar6=-1.1E-10
        static string cvar7="hello"
        static enutype cvar8=enutype.enu1
        static classtype cvar9=(classtype){'a','a','a'}
        static char[3] cvar10=(char[3]){'a','a','a'}
        static char[] cvar11=(char[]){'a','a','a','a'}
        static type1 ctvar1=true
        static type2 ctvar2='a'
        static type3 ctvar3=32767
        static type4 ctvar4=(int)4.29E9
        static type5 ctvar5=(long)0.9E19
        static type6 ctvar6=-1.1E-10
        static type7 ctvar7="hello"
        static type8 ctvar8=type8.enu1
        static type9 ctvar9=(type9){'a','a','a'}
        static type10 ctvar10=(type10){'a','a','a'}
        static type11 ctvar11=(type11){'a','a','a','a'}
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)25):
      testname="Declare public constants using enums and types inside classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      class classtype:
        int var1
        int var2
        int var3
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
      :class  
      const bool var1=true
      const char var2='a'
      const short var3=32767S
      const int var4=(int)2.0E9
      const long var5=(long)0.9E19
      const float var6=-1.1E10
      const string var7="hello"
      const classtype.enutype var8=classtype.enutype.enu1
      const classtype var9=(classtype){'a','a','a'}
      const char[3] var10=(char[3]){'a','a','a'}
      const char[] var11=(char[]){'a','a','a','a'}
      const classtype.type1 tvar1=true
      const classtype.type2 tvar2='a'
      const classtype.type3 tvar3=32767S
      const classtype.type4 tvar4=(int)1.29E9
      const classtype.type5 tvar5=(long)0.9E19
      const classtype.type6 tvar6=-1.1E10
      const classtype.type7 tvar7="hello"
      const classtype.type8 tvar8=classtype.type8.enu1
      const classtype.type9 tvar9=(classtype.type9){'a','a','a'}
      const classtype.type10 tvar10=(classtype.type10){'a','a','a'}
      const classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
      .implem
      main:
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)26):
      testname="Declare private constants using enums and types inside classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class classtype:
        int var1
        int var2
        int var3
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
      :class  
      const bool var1=true
      const char var2='a'
      const short var3=32767S
      const int var4=(int)2.0E9
      const long var5=(long)0.9E19
      const float var6=-1.1E10
      const string var7="hello"
      const classtype.enutype var8=classtype.enutype.enu1
      const classtype var9=(classtype){'a','a','a'}
      const char[3] var10=(char[3]){'a','a','a'}
      const char[] var11=(char[]){'a','a','a','a'}
      const classtype.type1 tvar1=true
      const classtype.type2 tvar2='a'
      const classtype.type3 tvar3=32767S
      const classtype.type4 tvar4=(int)1.29E9
      const classtype.type5 tvar5=(long)0.9E19
      const classtype.type6 tvar6=-1.1E10
      const classtype.type7 tvar7="hello"
      const classtype.type8 tvar8=classtype.type8.enu1
      const classtype.type9 tvar9=(classtype.type9){'a','a','a'}
      const classtype.type10 tvar10=(classtype.type10){'a','a','a'}
      const classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
      .implem
      main:
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)27):
      testname="Declare public variables using enums and types inside classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      class classtype:
        int var1
        int var2
        int var3
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
      :class  
      bool var1=true
      char var2='a'
      short var3=32767S
      int var4=(int)2.0E9
      long var5=(long)0.9E19
      float var6=-1.1E10
      string var7="hello"
      classtype.enutype var8=classtype.enutype.enu1
      classtype var9=(classtype){'a','a','a'}
      char[3] var10=(char[3]){'a','a','a'}
      char[] var11=(char[]){'a','a','a','a'}
      classtype.type1 tvar1=true
      classtype.type2 tvar2='a'
      classtype.type3 tvar3=32767S
      classtype.type4 tvar4=(int)1.29E9
      classtype.type5 tvar5=(long)0.9E19
      classtype.type6 tvar6=-1.1E10
      classtype.type7 tvar7="hello"
      classtype.type8 tvar8=classtype.type8.enu1
      classtype.type9 tvar9=(classtype.type9){'a','a','a'}
      classtype.type10 tvar10=(classtype.type10){'a','a','a'}
      classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
      .implem
      main:
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)28):
      testname="Declare private variables using enums and types inside classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class classtype:
        int var1
        int var2
        int var3
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
      :class  
      bool var1=true
      char var2='a'
      short var3=32767S
      int var4=(int)2.0E9
      long var5=(long)0.9E19
      float var6=-1.1E10
      string var7="hello"
      classtype.enutype var8=classtype.enutype.enu1
      classtype var9=(classtype){'a','a','a'}
      char[3] var10=(char[3]){'a','a','a'}
      char[] var11=(char[]){'a','a','a','a'}
      classtype.type1 tvar1=true
      classtype.type2 tvar2='a'
      classtype.type3 tvar3=32767S
      classtype.type4 tvar4=(int)1.29E9
      classtype.type5 tvar5=(long)0.9E19
      classtype.type6 tvar6=-1.1E10
      classtype.type7 tvar7="hello"
      classtype.type8 tvar8=classtype.type8.enu1
      classtype.type9 tvar9=(classtype.type9){'a','a','a'}
      classtype.type10 tvar10=(classtype.type10){'a','a','a'}
      classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
      .implem
      main:
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)29):
      testname="Declare local variables using enums and types inside classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class classtype:
        int var1
        int var2
        int var3
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
      :class  
      .implem
      main:
        bool var1=true
        char var2='a'
        short var3=32767S
        int var4=(int)2.0E9
        long var5=(long)0.9E19
        float var6=-1.1E10
        string var7="hello"
        classtype.enutype var8=classtype.enutype.enu1
        classtype var9=(classtype){'a','a','a'}
        char[3] var10=(char[3]){'a','a','a'}
        char[] var11=(char[]){'a','a','a','a'}
        classtype.type1 tvar1=true
        classtype.type2 tvar2='a'
        classtype.type3 tvar3=32767S
        classtype.type4 tvar4=(int)1.29E9
        classtype.type5 tvar5=(long)0.9E19
        classtype.type6 tvar6=-1.1E10
        classtype.type7 tvar7="hello"
        classtype.type8 tvar8=classtype.type8.enu1
        classtype.type9 tvar9=(classtype.type9){'a','a','a'}
        classtype.type10 tvar10=(classtype.type10){'a','a','a'}
        classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)30):
      testname="Declare local variables using enums and types inside classes with local types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      .implem
      main:
        class classtype:
          int var1
          int var2
          int var3
          enum enutype:
            enu1
            enu2
            enu3
          :enum
          type bool as type1
          type char as type2
          type short as type3
          type int as type4
          type long as type5
          type float as type6
          type string as type7
          type enutype as type8
          type classtype as type9
          type char[3] as type10
          type char[] as type11
        :class  
        bool var1=true
        char var2='a'
        short var3=32767S
        int var4=(int)2.0E9
        long var5=(long)0.9E19
        float var6=-1.1E10
        string var7="hello"
        classtype.enutype var8=classtype.enutype.enu1
        classtype var9=(classtype){'a','a','a'}
        char[3] var10=(char[3]){'a','a','a'}
        char[] var11=(char[]){'a','a','a','a'}
        classtype.type1 tvar1=true
        classtype.type2 tvar2='a'
        classtype.type3 tvar3=32767S
        classtype.type4 tvar4=(int)1.29E9
        classtype.type5 tvar5=(long)0.9E19
        classtype.type6 tvar6=-1.1E10
        classtype.type7 tvar7="hello"
        classtype.type8 tvar8=classtype.type8.enu1
        classtype.type9 tvar9=(classtype.type9){'a','a','a'}
        classtype.type10 tvar10=(classtype.type10){'a','a','a'}
        classtype.type11 tvar11=(classtype.type11){'a','a','a','a'}
        string result=""
        result+=var1.tostr()+","
        result+=(string)var2+","
        result+=var3.tostr()+","
        result+=var4.tostr()+","
        result+=var5.tostr()+","
        result+=var6.tostr()+","
        result+=var7+","
        result+=((int)var8).tostr()+","
        result+=var9.var1.tostr()+","
        result+=(string)var10[0]+","
        result+=(string)var10[1]+","
        result+=(string)var10[2]+","
        result+=(string)var11[0]+","
        result+=(string)var11[1]+","
        result+=(string)var11[2]+","
        result+=(string)var11[3]+","
        result+=tvar1.tostr()+","
        result+=(string)tvar2+","
        result+=tvar3.tostr()+","
        result+=tvar4.tostr()+","
        result+=tvar5.tostr()+","
        result+=tvar6.tostr()+","
        result+=tvar7+","
        result+=((int)tvar8).tostr()+","
        result+=tvar9.var1.tostr()+","
        result+=(string)tvar10[0]+","
        result+=(string)tvar10[1]+","
        result+=(string)tvar10[2]+","
        result+=(string)tvar11[0]+","
        result+=(string)tvar11[1]+","
        result+=(string)tvar11[2]+","
        result+=(string)tvar11[3]
        con.print("ok,")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok,true,a,32767,2000000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a,true,a,32767,1290000000,9000000000000000000,-11000000000.000000,hello,0,97,a,a,a,a,a,a,a",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)31):
      testname="Declare global variables using var keyword for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      bool cvar1=true
      var cvar2='a'
      var cvar3=32767
      var cvar4=(int)4.29E9
      var cvar5=(long)0.9E19
      var cvar6=-1.1E-10
      var cvar7="hello"
      var cvar8=enutype.enu1
      var cvar9=(classtype){'a','a','a'}
      var cvar10=(char[3]){'a','a','a'}
      var cvar11=(char[]){'a','a','a','a'}
      var ctvar1=true
      var ctvar2='a'
      var ctvar3=32767
      var ctvar4=(int)4.29E9
      var ctvar5=(long)0.9E19
      var ctvar6=-1.1E-10
      var ctvar7="hello"
      var ctvar8=type8.enu1
      var ctvar9=(type9){'a','a','a'}
      var ctvar10=(type10){'a','a','a'}
      var ctvar11=(type11){'a','a','a','a'}
      .implem
      main:
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)32):
      testname="Declare local variables using var keyword for all master types and also defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        enum enutype:
          enu1
          enu2
          enu3
        :enum
        class classtype:
          int var1
          int var2
          int var3
        :class  
        type bool as type1
        type char as type2
        type short as type3
        type int as type4
        type long as type5
        type float as type6
        type string as type7
        type enutype as type8
        type classtype as type9
        type char[3] as type10
        type char[] as type11
        var cvar1=true
        var cvar2='a'
        var cvar3=32767
        var cvar4=(int)4.29E9
        var cvar5=(long)0.9E19
        var cvar6=-1.1E-10
        var cvar7="hello"
        var cvar8=enutype.enu1
        var cvar9=(classtype){'a','a','a'}
        var cvar10=(char[3]){'a','a','a'}
        var cvar11=(char[]){'a','a','a','a'}
        var ctvar1=true
        var ctvar2='a'
        var ctvar3=32767
        var ctvar4=(int)4.29E9
        var ctvar5=(long)0.9E19
        var ctvar6=-1.1E-10
        var ctvar7="hello"
        var ctvar8=type8.enu1
        var ctvar9=(type9){'a','a','a'}
        var ctvar10=(type10){'a','a','a'}
        var ctvar11=(type11){'a','a','a','a'}
        string test= \
        cvar1.tostr()+ \
        (string)cvar2+ \
        cvar3.tostr()+ \
        cvar4.tostr()+ \
        cvar5.tostr()+ \
        cvar6.tostr()+ \
        cvar7+ \
        ((int)cvar8).tostr()+ \
        cvar9.var1.tostr()+ \
        (string)cvar10[0]+ \
        (string)cvar10[1]+ \
        (string)cvar10[2]+ \
        (string)cvar11[0]+ \
        (string)cvar11[1]+ \
        (string)cvar11[2]+ \
        (string)cvar11[3]+ \
        ctvar1.tostr()+ \
        (string)ctvar2+ \
        ctvar3.tostr()+ \
        ctvar4.tostr()+ \
        ctvar5.tostr()+ \
        ctvar6.tostr()+ \
        ctvar7+ \
        ((int)ctvar8).tostr()+ \
        ctvar9.var1.tostr()+ \
        (string)ctvar10[0]+ \
        (string)ctvar10[1]+ \
        (string)ctvar10[2]+ \
        (string)ctvar11[0]+ \
        (string)ctvar11[1]+ \
        (string)ctvar11[2]+ \
        (string)ctvar11[3]
        con.println("ok")
        con.println(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","ok\\n*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)33):
      testname="Check declaration of static variables using var keyword produces error"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static var test=45
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E332*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)34):
      testname="Check static keyword cannot happen on global variables"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      static int const1
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E329*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)35):
      testname="Check static keyword cannot happen on global consts"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      static int const1
      .implem
      main:
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E329*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)36):
      testname="Check static keyword cannot happen on local consts"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static const int const1
        con.print("ok")
      :main
      ]")
      execute_test(testnr,testname,"main","","E016*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)37):
      testname="Check dltype/dlfunc (via importing aglib)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import aglib as gl
      .implem
      main:
        con.print(gl.getversion())
      :main
      ]")
      execute_test(testnr,testname,"main","","AGL*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)38):
      testname="Test public class field and function are visible inside and outside class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        int field
        int getfield()
        int callmember()
      :class
      .implem
      fmem int myclass.getfield():
        return self.field
      :fmem
      fmem int myclass.callmember():
        return self.getfield()
      :fmem
      main:
        myclass myobj*
        myobj.field=1
        con.print(myobj.field.tostr()+"-"+myobj.callmember().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1-1",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)39):
      testname="Test public class field and function are visible inside and outside class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        int callmember()
        .priv
        int field
        int getfield()
      :class
      .implem
      fmem int myclass.getfield():
        return self.field
      :fmem
      fmem int myclass.callmember():
        self.field=1234
        return self.getfield()
      :fmem
      main:
        myclass myobj*
        con.print(myobj.callmember().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1234",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)40):
      testname="Test private class field gives error when accessed outside class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .priv
        int field
      :class
      .implem
      main:
        myclass myobj
        con.print(myobj.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E170*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)41):
      testname="Test private class function member gives error when accessed outside class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .priv
        string getfield()
      :class
      .implem
      fmem string myclass.getfield():
        return "hello"
      :fmem
      main:
        myclass myobj
        con.print(myobj.getfield())
      :main
      ]")
      execute_test(testnr,testname,"main","","E171*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)42):
      testname="Test static public class field retains value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field1=1
        static int field2=2
        void changevalues()
        int getvalues()
      :class
      .implem
      fmem void myclass.changevalues():
        self.field2+=3
      :fmem
      fmem int myclass.getvalues():
        return self.field1+self.field2
      :fmem
      main:
        myclass myobj1*
        myobj1.changevalues()
        con.print(myobj1.getvalues().tostr())
        myclass myobj2*
        myobj2.field1=2
        myobj2.changevalues()
        con.print(myobj2.getvalues().tostr())
        con.print(myobj1.getvalues().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","61010",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)43):
      testname="Test static private class field retains value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field1=1
        void changevalues()
        int getvalues()
        .priv
        static int field2=2
      :class
      .implem
      fmem void myclass.changevalues():
        self.field2+=3
      :fmem
      fmem int myclass.getvalues():
        return self.field1+self.field2
      :fmem
      main:
        myclass myobj1*
        myobj1.changevalues()
        con.print(myobj1.getvalues().tostr())
        myclass myobj2*
        myobj2.field1=2
        myobj2.changevalues()
        con.print(myobj2.getvalues().tostr())
        con.print(myobj1.getvalues().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","61010",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)44):
      testname="Test grant class to entire class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .priv
        int field1
        int field2
        void setvalues()
        allow myclass2
        allow main()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)45):
      testname="Test grant class to field member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        void setvalues()
        .priv
        int field1
        int field2
        allow myclass2 to field1
        allow myclass2 to field2
        allow main()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)46):
      testname="Test grant class to function member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int field1
        int field2
        .priv
        void setvalues()
        allow myclass2 to setvalues()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)47):
      testname="Test grant function to entire class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .priv
        int field1
        int field2
        void setvalues()
        allow getvalues()
        allow main()
      :class
      int getvalues(myclass1 class1)
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      func int getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :func
      main:
        myclass1 myobj1=(myclass1){0,0}
        con.print(getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)48):
      testname="Test grant function to field member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        void setvalues()
        .priv
        int field1
        int field2
        allow getvalues() to field1
        allow getvalues() to field2
        allow main()
      :class
      int getvalues(myclass1 class1)
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      func int getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :func
      main:
        myclass1 myobj1=(myclass1){0,0}
        con.print(getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)49):
      testname="Test grant function to function member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int field1
        int field2
        .priv
        void setvalues()
        allow getvalues() to setvalues()
      :class
      int getvalues(myclass1 class1)
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      func int getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :func
      main:
        myclass1 myobj1=(myclass1){0,0}
        con.print(getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)50):
      testname="Test grant function member to entire class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .priv
        int field1
        int field2
        void setvalues()
        allow myclass2.getvalues()
        allow main()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)51):
      testname="Test grant function member to field member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        void setvalues()
        .priv
        int field1
        int field2
        allow myclass2.getvalues() to field1
        allow myclass2.getvalues() to field2
        allow main()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)52):
      testname="Test grant function member to function member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int field1
        int field2
        .priv
        void setvalues()
        allow myclass2.getvalues() to setvalues()
      :class
      class myclass2:
        .publ
        int getvalues(myclass1 class1)
      :class
      .implem
      fmem void myclass1.setvalues():
        self.field1=10
        self.field2=5
      :fmem
      fmem int myclass2.getvalues(myclass1 class1):
        class1.setvalues()
        return class1.field1+class1.field2
      :fmem
      main:
        myclass1 myobj1=(myclass1){0,0}
        myclass2 myobj2
        con.print(myobj2.getvalues(myobj1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","15",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)53):
      testname="Test grant function operator to entire class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .priv
        int field
        void setvalues()
        allow [+]()
        allow main()
      :class
      int [+](myclass1 opnd1,myclass1 opnd2)
      .implem
      fmem void myclass1.setvalues():
        self.field=10
      :fmem
      oper int [+](myclass1 opnd1,myclass1 opnd2):
        opnd1.setvalues()
        opnd2.setvalues()
        return opnd1.field+opnd2.field
      :oper
      main:
        myclass1 myobj1=(myclass1){0}
        myclass1 myobj2=(myclass1){0}
        con.print((myobj1+myobj2).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","20",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)54):
      testname="Test grant function operator to field member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        void setvalues()
        .priv
        int field
        allow [+]() to field
        allow main()
      :class
      int [+](myclass1 opnd1,myclass1 opnd2)
      .implem
      fmem void myclass1.setvalues():
        self.field=10
      :fmem
      oper int [+](myclass1 opnd1,myclass1 opnd2):
        opnd1.setvalues()
        opnd2.setvalues()
        return opnd1.field+opnd2.field
      :oper
      main:
        myclass1 myobj1=(myclass1){0}
        myclass1 myobj2=(myclass1){0}
        con.print((myobj1+myobj2).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","20",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)55):
      testname="Test grant function operator to function member"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int field
        .priv
        void setvalues()
        allow [+]() to setvalues()
      :class
      int [+](myclass1 opnd1,myclass1 opnd2)
      .implem
      fmem void myclass1.setvalues():
        self.field=10
      :fmem
      oper int [+](myclass1 opnd1,myclass1 opnd2):
        opnd1.setvalues()
        opnd2.setvalues()
        return opnd1.field+opnd2.field
      :oper
      main:
        myclass1 myobj1=(myclass1){0}
        myclass1 myobj2=(myclass1){0}
        con.print((myobj1+myobj2).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","20",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)56):
      testname="Define enum without values"
      create_script(testnr,"main", r"[
      .private
      enum enu:
      :enum
      .implem
      main:
      :main
      ]")
      execute_test(testnr,testname,"main","","E188*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)57):
      testname="Define enum with values"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enu:
        val1=4
        val2=5
        val3=6
      :enum
      .implem
      main:
        con.print(enu.val1.toint().tostr()+enu.val2.toint().tostr()+enu.val3.toint().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","456",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)58):
      testname="Define enum with some values"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enu:
        val1=4
        val2
        val3=8
        val4
      :enum
      .implem
      main:
        con.print(enu.val1.toint().tostr()+enu.val2.toint().tostr()+enu.val3.toint().tostr()+enu.val4.toint().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","4589",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)59):
      testname="Define enum without closing it"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enu:
        val1=4
        val2
        val3
      .implem
      main:
        con.print(enu.val1.toint().tostr()+enu.val2.toint().tostr()+enu.val3.toint().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E018*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)60):
      testname="Test if endif block"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int i=1
        con.print("10")
        if(i==1):
          con.print("20")
        :if
        con.print("30")
      :main
      ]")
      execute_test(testnr,testname,"main","","102030",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)61):
      testname="Test if else endif block"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int i)
      .implem
      func string test(int i):
        string r="10"
        if(i==1):
          r+="20"
        else:
          r+="30"
        :if
        r+="40"
        return r
      :func
      main:
        con.print(test(1)+test(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","102040103040",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)62):
      testname="Test if elif else endif block"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int i)
      .implem
      func string test(int i):
        string r="10"
        if(i==1):
          r+="20"
        elif(i==2):
          r+="30"
        else:
          r+="40"
        :if
        r+="50"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3))
      :main
      ]")
      execute_test(testnr,testname,"main","","102050103050104050",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)63):
      testname="Test if elif elif else endif block"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int i)
      .implem
      func string test(int i):
        string r="10"
        if(i==1):
          r+="20"
        elif(i==2):
          r+="30"
        elif(i==3):
          r+="40"
        else:
          r+="50"
        :if
        r+="60"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3)+test(4))
      :main
      ]")
      execute_test(testnr,testname,"main","","102060103060104060105060",false)
      break
       
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)64):
      testname="Test if elif elif elif else endif block"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int i)
      .implem
      func string test(int i):
        string r="10"
        if(i==1):
          r+="20"
        elif(i==2):
          r+="30"
        elif(i==3):
          r+="40"
        elif(i==4):
          r+="50"
        else:
          r+="60"
        :if
        r+="70"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3)+test(4)+test(5))
      :main
      ]")
      execute_test(testnr,testname,"main","","102070103070104070105070106070",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)65):
      testname="Test while endwhile"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int maxval)
      .implem
      func string test(int maxval):
        int i=0
        string r="10"
        while(i<=maxval):
          r+="*>"
          i++
        :while
        r+="99"
        return r
      :func
      main:
        con.print(test(-1)+test(0)+test(1)+test(2)+test(3))
      :main
      ]")
      execute_test(testnr,testname,"main","","109910*>9910*>*>9910*>*>*>9910*>*>*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)66):
      testname="Test while endwhile with break & continue"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string testb(int maxval)
      string testc(int maxval)
      .implem
      func string testb(int maxval):
        int i=0
        string r="10"
        while(true):
          r+="*>"
          i++
          if(i>maxval): break; :if
        :while
        r+="99"
        return r
      :func
      func string testc(int maxval):
        int i=0
        string r="10"
        while(true):
          r+="*>"
          i++
          if(i<=maxval): continue; :if
          break
        :while
        r+="99"
        return r
      :func
      main:
        con.print(testb(1)+testb(2)+testc(1)+testc(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","10*>*>9910*>*>*>9910*>*>9910*>*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)67):
      testname="Test do loop"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int maxval)
      .implem
      func string test(int maxval):
        int i=0
        string r="10"
        do:
          r+="*>"
          i++
        :loop(i<=maxval)
        r+="99"
        return r
      :func
      main:
        con.print(test(-1)+test(0)+test(1)+test(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","10*>9910*>9910*>*>9910*>*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)68):
      testname="Test do loop with break and continue"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string testb(int maxval)
      string testc(int maxval)
      .implem
      func string testb(int maxval):
        int i=0
        string r="10"
        do:
          r+="*>"
          i++
          if(i>maxval): break; :if
        :loop(true)
        r+="99"
        return r
      :func
      func string testc(int maxval):
        int i=0
        string r="10"
        do:
          r+="*>"
          i++
          if(i<=maxval): continue; :if
          break
        :loop(true)
        r+="99"
        return r
      :func
      main:
        con.print(testb(1)+testb(2)+testc(1)+testc(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","10*>*>9910*>*>*>9910*>*>9910*>*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)69):
      testname="Test for endfor"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int maxval)
      .implem
      func string test(int maxval):
        int i
        string r="10"
        for(i=0 if i<maxval do i++):
          r+="*>"
        :for
        r+="99"
        return r
      :func
      main:
        con.print(test(-1)+test(0)+test(1)+test(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","1099109910*>9910*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)70):
      testname="Test for endfor with break and continue"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string testb(int maxval)
      string testc(int maxval)
      .implem
      func string testb(int maxval):
        int i=0
        string r="10"
        for(i=0 if i<=maxval do i++):
          r+="*>"
          if(i+1>=maxval): break; :if
        :for
        r+="99"
        return r
      :func
      func string testc(int maxval):
        int i=0
        string r="10"
        for(i=0 if i<=maxval do i++):
          r+="*>"
          if(i+1<=maxval): continue; :if
          break
        :for
        r+="99"
        return r
      :func
      main:
        con.print(testb(1)+testb(2)+testc(1)+testc(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","10*>9910*>*>9910*>*>9910*>*>*>99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)71):
      testname="Test walk endwalk"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test()
      .implem
      func string test():
        var a=(char[]){1,2,3,4,5}
        string r="10"
        walk(a on c): 
          r+=c.toint().tostr() 
        :walk
        r+="99"
        return r
      :func
      main:
        con.print(test())
      :main
      ]")
      execute_test(testnr,testname,"main","","101234599",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)72):
      testname="Test walk endwalk with break and continue"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string testb(int maxidx)
      string testc(int maxidx)
      .implem
      func string testb(int maxidx):
        var a=(char[]){1,2,3,4,5}
        string r="10"
        walk(a on c index i): 
          r+=c.toint().tostr() 
          if(i==maxidx): break; :if
        :walk
        r+="99"
        return r
      :func
      func string testc(int maxidx):
        word i
        var a=(char[]){1,2,3,4,5}
        string r="10"
        walk(a on c index i): 
          r+=c.toint().tostr() 
          if(i!=maxidx): continue; :if
          break
        :walk
        r+="99"
        return r
      :func
      main:
        con.print(testb(2)+testb(3)+testc(2)+testc(3))
      :main
      ]")
      execute_test(testnr,testname,"main","","101239910123499101239910123499",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)73):
      testname="Test walk endwalk for fixed and dyn arrays"
      create_script(testnr,"main", r"[
      .libs 
      import system as sys
      import console as con
      .private
      void func1()
      void func2()
      void func3()
      void func4()
      .implem
      func void func1():
        int[] x=(int[]){1,2,3,-1,-2,-3}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j].tostr())
        :for
        con.print(">")
        con.print("01:"); walk(x on n index i if n>0): con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("02:"); walk(x on n index i):        con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("03:"); walk(x on n if n>0):         con.print("("+(n*2).tostr()+")");                 :walk
        con.print("04:"); walk(x on n):                con.print("("+(n*2).tostr()+")");                 :walk
        word i
        con.print("05:"); walk(x on n index i if n>0): con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("06:"); walk(x on n index i):        con.print("("+(n*2+(int)i).tostr()+")");          :walk
      :func
      func void func2():
        int[6] x=(int[6]){1,2,3,-1,-2,-3}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j].tostr())
        :for
        con.print(">")
        con.print("01:"); walk(x on n index i if n>0): con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("02:"); walk(x on n index i):        con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("03:"); walk(x on n if n>0):         con.print("("+(n*2).tostr()+")");                 :walk
        con.print("04:"); walk(x on n):                con.print("("+(n*2).tostr()+")");                 :walk
        word i
        con.print("05:"); walk(x on n index i if n>0): con.print("("+(n*2+(int)i).tostr()+")");          :walk
        con.print("06:"); walk(x on n index i):        con.print("("+(n*2+(int)i).tostr()+")");          :walk
      :func
      func void func3():
        string[] x=(string[]){"+a","-b","+c","-d","+e","-f"}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j])
        :for
        con.print(">")
        con.print("01:"); walk(x on n index i if n.startswith("+")): con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("02:"); walk(x on n index i):                      con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("03:"); walk(x on n if n.startswith("+")):         con.print("("+n.upper()+")");           :walk
        con.print("04:"); walk(x on n):                              con.print("("+n.upper()+")");           :walk
        word i
        con.print("05:"); walk(x on n index i if n.startswith("+")): con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("06:"); walk(x on n index i):                      con.print("("+n.upper()+i.tostr()+")"); :walk
      :func
      func void func4():
        string[6] x=(string[6]){"+a","-b","+c","-d","+e","-f"}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j])
        :for
        con.print(">")
        con.print("01:"); walk(x on n index i if n.startswith("+")): con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("02:"); walk(x on n index i):                      con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("03:"); walk(x on n if n.startswith("+")):         con.print("("+n.upper()+")");           :walk
        con.print("04:"); walk(x on n):                              con.print("("+n.upper()+")");           :walk
        word i
        con.print("05:"); walk(x on n index i if n.startswith("+")): con.print("("+n.upper()+i.tostr()+")"); :walk
        con.print("06:"); walk(x on n index i):                      con.print("("+n.upper()+i.tostr()+")"); :walk
      :func
      main:
        func1()
        con.print("***")
        func2()
        con.print("***")
        func3()
        con.print("***")
        func4()
        con.print("***")
      :main
      ]")
      execute_test(testnr,testname,"main","","123-1-2-3>01:(2)(5)(8)02:(2)(5)(8)(1)(0)(-1)03:(2)(4)(6)04:(2)(4)(6)(-2)(-4)(-6)05:(2)(5)(8)06:(2)(5)(8)(1)(0)(-1)***123-1-2-3>01:(2)(5)(8)02:(2)(5)(8)(1)(0)(-1)03:(2)(4)(6)04:(2)(4)(6)(-2)(-4)(-6)05:(2)(5)(8)06:(2)(5)(8)(1)(0)(-1)***+a-b+c-d+e-f>01:(+A0)(+C2)(+E4)02:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)03:(+A)(+C)(+E)04:(+A)(-B)(+C)(-D)(+E)(-F)05:(+A0)(+C2)(+E4)06:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)***+a-b+c-d+e-f>01:(+A0)(+C2)(+E4)02:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)03:(+A)(+C)(+E)04:(+A)(-B)(+C)(-D)(+E)(-F)05:(+A0)(+C2)(+E4)06:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)***",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)74):
      testname="Test switch when endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1))
      :main
      ]")
      execute_test(testnr,testname,"main","","100199",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)75):
      testname="Test switch when when endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
          when(2): r+="02"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1)+test(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","100199100299",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)76):
      testname="Test switch when when when endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
          when(2): r+="02"; break
          when(3): r+="03"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3))
      :main
      ]")
      execute_test(testnr,testname,"main","","100199100299100399",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)77):
      testname="Test switch default endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          default: r+="ZZ"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1))
      :main
      ]")
      execute_test(testnr,testname,"main","","E018*",true)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)78):
      testname="Test switch when default endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
          default: r+="ZZ"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1)+test(2))
      :main
      ]")
      execute_test(testnr,testname,"main","","10019910ZZ99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)79):
      testname="Test switch when when default endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
          when(2): r+="02"; break
          default: r+="ZZ"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3))
      :main
      ]")
      execute_test(testnr,testname,"main","","10019910029910ZZ99",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)80):
      testname="Test switch when when when default endswitch"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string test(int selval)
      .implem
      func string test(int selval):
        string r="10"
        switch(selval):
          when(1): r+="01"; break
          when(2): r+="02"; break
          when(3): r+="03"; break
          default: r+="ZZ"; break
        :switch
        r+="99"
        return r
      :func
      main:
        con.print(test(1)+test(2)+test(3)+test(4))
      :main
      ]")
      execute_test(testnr,testname,"main","","10019910029910039910ZZ99",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)81):
      testname="Test sentence with left tokens  "
      create_script(testnr,"main", r"[
      .implem
      main:
        int i* xx
      :main
      ]")
      execute_test(testnr,testname,"main","","E030*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)82):
      testname="Test complex lit values for classes"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        int x
        int y
        int z
        string s
      :class
      .implem
      main:
        myclass cl=(myclass){1,2,3,"hello"}
        con.print(cl.x.tostr()+cl.y.tostr()+cl.z.tostr()+cl.s)
      :main
      ]")
      execute_test(testnr,testname,"main","","123hello",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)83):
      testname="Test complex lit values for arrays"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        var a=(int[]){1,2,3}
        var b=(int[3]){1,2,3}
        var c=(string[]){"hello","I","am"}
        var d=(string[3]){"hello","I","am"}
        con.print(a[0].tostr()+a[1].tostr()+a[2].tostr()+b[0].tostr()+b[1].tostr()+b[2].tostr()+c[0]+c[1]+c[2]+d[0]+d[1]+d[2])
      :main
      ]")
      execute_test(testnr,testname,"main","","123123helloIamhelloIam",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)84):
      testname="Test empty complex lit values"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        string sayhello()
      :class
      .implem
      fmem string myclass.sayhello():
        return "hello"
      :fmem
      main:
        myclass cl=(myclass){}
        var a1=(int[]){}
        var a2=(string[]){}
        con.print(cl.sayhello()+"|"+a1.len().tostr()+"|"+a2.len().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","hello|0|0",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)85):
      testname="Test operator ++ postfix with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1='A'
        dshort var2=2S
        dint var3=3
        dlong var4=4
        dfloat var5=5
        con.print((string)(var1++)+(var2++).tostr()+(var3++).tostr()+(var4++).tostr()+(var5++).tostr().replace(".","").replace("0",""))
        var1++
        var2++
        var3++
        var4++
        var5++
        con.print((string)var1+var2.tostr()+var3.tostr()+var4.tostr()+var5.tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","A2345C4567",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)86):
      testname="Test operator -- postfix with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1='C'
        dshort var2=3S
        dint var3=4
        dlong var4=5
        dfloat var5=6
        con.print((string)(var1--)+(var2--).tostr()+(var3--).tostr()+(var4--).tostr()+(var5--).tostr().replace(".","").replace("0",""))
        var1--
        var2--
        var3--
        var4--
        var5--
        con.print((string)var1+var2.tostr()+var3.tostr()+var4.tostr()+var5.tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","C3456A1234",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)87):
      testname="Test operator ++ prefix with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1='A'
        dshort var2=2S
        dint var3=3
        dlong var4=4
        dfloat var5=5
        con.print((string)(++var1)+(++var2).tostr()+(++var3).tostr()+(++var4).tostr()+(++var5).tostr().replace(".","").replace("0",""))
        ++var1
        ++var2
        ++var3
        ++var4
        ++var5
        con.print((string)var1+var2.tostr()+var3.tostr()+var4.tostr()+var5.tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","B3456C4567",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)88):
      testname="Test operator -- prefix with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1='C'
        dshort var2=3S
        dint var3=4
        dlong var4=5
        dfloat var5=6
        con.print((string)(--var1)+(--var2).tostr()+(--var3).tostr()+(--var4).tostr()+(--var5).tostr().replace(".","").replace("0",""))
        --var1
        --var2
        --var3
        --var4
        --var5
        con.print((string)var1+var2.tostr()+var3.tostr()+var4.tostr()+var5.tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","B2345A1234",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)89):
      testname="Test unary operator + with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1='A'
        dshort var2=1
        dint var3=2
        dlong var4=3
        dfloat var5=4
        con.print((string)(+var1)+(+var2).tostr()+(+var3).tostr()+(+var4).tostr()+(+var5).tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","A1234",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)90):
      testname="Test unary operator - with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar var1=(char)0xBF
        dshort var2=1
        dint var3=2
        dlong var4=3
        dfloat var5=4
        con.print((string)(-var1)+(-var2).tostr()+(-var3).tostr()+(-var4).tostr()+(-var5).tostr().replace(".","").replace("0",""))
      :main
      ]")
      execute_test(testnr,testname,"main","","A-1-2-3-4",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)91):
      testname="Test operator ! with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      .implem
      main:
        dbool a=true
        dbool b=false
        con.print((!a).tostr()+(!b).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","falsetrue",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)92):
      testname="Test operator ~ with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar var1=(char)0xA5
        dshort var2=(short)0xF0F0
        dint var3=(int)0xF0F0F0F0
        dlong var4=(long)0x70F0F0F0F0F0F0F0
        con.print((string)(~var1)+"."+(~var2).tostr()+"."+(~var3).tostr()+"."+(-(~var4)).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","Z.3855.252645135.8138269444283625713",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)93):
      testname="Test operator (type) with numeric and string master types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      enum enutype:
        enu1=71
        enu2=72
        enu3=73
      :enum
      .implem
      main:
        //--------------------------- 
        dbool BO2BOa=(dbool)false
        dbool CH2BOa=(dbool)((char)0)
        dbool SH2BOa=(dbool)((short)0)
        dbool IN2BOa=(dbool)((int)0)
        dbool LO2BOa=(dbool)((long)0)
        dbool FL2BOa=(dbool)((float)0)
        dbool ST2BOa=(dbool)"false"
        //--------------------------- 
        dbool BO2BOb=(dbool)true
        dbool CH2BOb=(dbool)((char)2)
        dbool SH2BOb=(dbool)((short)3)
        dbool IN2BOb=(dbool)((int)4)
        dbool LO2BOb=(dbool)((long)5)
        dbool FL2BOb=(dbool)((float)6)
        dbool ST2BOb=(dbool)"true"
        //--------------------------- 
        dbool ST2BOc=(dbool)"0"
        dbool ST2BOd=(dbool)"1"
        //--------------------------- 
        dchar BO2CHa=(dchar)(false)+'0'
        dchar BO2CHb=(dchar)(true)+'0'
        dchar CH2CHa=(dchar)('A')
        dchar SH2CHa=(dchar)((short)66)
        dchar IN2CHa=(dchar)((int)67)
        dchar LO2CHa=(dchar)((long)68)
        dchar FL2CHa=(dchar)((float)69)
        dchar ST2CHa=(dchar)("G")
        //--------------------------- 
        dshort BO2SHa=(dshort)(false)
        dshort BO2SHb=(dshort)(true)
        dshort CH2SHa=(dshort)('A')
        dshort SH2SHa=(dshort)((short)66)
        dshort IN2SHa=(dshort)((int)67)
        dshort LO2SHa=(dshort)((long)68)
        dshort FL2SHa=(dshort)((float)69)
        dshort ST2SHa=(dshort)("71")
        //--------------------------- 
        dint BO2INa=(dint)(false)
        dint BO2INb=(dint)(true)
        dint CH2INa=(dint)('A')
        dint SH2INa=(dint)((short)66)
        dint IN2INa=(dint)((int)67)
        dint LO2INa=(dint)((long)68)
        dint FL2INa=(dint)((float)69)
        dint ST2INa=(dint)("71")
        //--------------------------- 
        dlong BO2LOa=(dlong)(false)
        dlong BO2LOb=(dlong)(true)
        dlong CH2LOa=(dlong)('A')
        dlong SH2LOa=(dlong)((short)66)
        dlong IN2LOa=(dlong)((int)67)
        dlong LO2LOa=(dlong)((long)68)
        dlong FL2LOa=(dlong)((float)69)
        dlong ST2LOa=(dlong)("71")
        //--------------------------- 
        dfloat BO2FLa=(dfloat)(false)
        dfloat BO2FLb=(dfloat)(true)
        dfloat CH2FLa=(dfloat)('A')
        dfloat SH2FLa=(dfloat)((short)66)
        dfloat IN2FLa=(dfloat)((int)67)
        dfloat LO2FLa=(dfloat)((long)68)
        dfloat FL2FLa=(dfloat)((float)69)
        dfloat ST2FLa=(dfloat)("71")
        //--------------------------- 
        dstring BO2STa=(dstring)(false)
        dstring BO2STb=(dstring)(true)
        dstring CH2STa=(dstring)('A')
        dstring SH2STa=(dstring)((short)66)
        dstring IN2STa=(dstring)((int)67)
        dstring LO2STa=(dstring)((long)68)
        dstring FL2STa=(dstring)((float)69)
        dstring ST2STa=(dstring)("71")
        //--------------------------- 
        dint EN2INa=(dint)(enutype.enu1)
        dint EN2INb=(dint)(enutype.enu2)
        dint EN2INc=(dint)(enutype.enu3)
        con.print(( \
        BO2BOa.tostr()+CH2BOa.tostr()+SH2BOa.tostr()+IN2BOa.tostr()+LO2BOa.tostr()+FL2BOa.tostr()+ST2BOa.tostr()+"|"+ \
        BO2BOb.tostr()+CH2BOb.tostr()+SH2BOb.tostr()+IN2BOb.tostr()+LO2BOb.tostr()+FL2BOb.tostr()+ST2BOb.tostr()+"|"+ \
        ST2BOc.tostr()+ST2BOd.tostr()+"|"+ \
        BO2CHa.tostr()+BO2CHb.tostr()+CH2CHa.tostr()+SH2CHa.tostr()+IN2CHa.tostr()+LO2CHa.tostr()+FL2CHa.tostr()+ST2CHa.tostr()+"|"+ \
        BO2SHa.tostr()+BO2SHb.tostr()+CH2SHa.tostr()+SH2SHa.tostr()+IN2SHa.tostr()+LO2SHa.tostr()+FL2SHa.tostr()+ST2SHa.tostr()+"|"+ \
        BO2INa.tostr()+BO2INb.tostr()+CH2INa.tostr()+SH2INa.tostr()+IN2INa.tostr()+LO2INa.tostr()+FL2INa.tostr()+ST2INa.tostr()+"|"+ \
        BO2LOa.tostr()+BO2LOb.tostr()+CH2LOa.tostr()+SH2LOa.tostr()+IN2LOa.tostr()+LO2LOa.tostr()+FL2LOa.tostr()+ST2LOa.tostr()+"|"+ \
        ("@"+BO2FLa.tostr()).replace("@0","-").replace("0","").replace(".","")+BO2FLb.tostr().replace("0","").replace(".","")+CH2FLa.tostr().replace("0","").replace(".","")+SH2FLa.tostr().replace("0","").replace(".","")+IN2FLa.tostr().replace("0","").replace(".","")+LO2FLa.tostr().replace("0","").replace(".","")+FL2FLa.tostr().replace("0","").replace(".","")+ST2FLa.tostr().replace("0","").replace(".","")+"|"+ \
        BO2STa+BO2STb+CH2STa+SH2STa+IN2STa+LO2STa+FL2STa.replace("0","").replace(".","")+ST2STa+"|"+ \
        EN2INa.tostr()+EN2INb.tostr()+EN2INc.tostr()+"|"+ \
        "END").replace("false","F").replace("true","T"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FFFFFFF|TTTTTTT|FT|01ABCDEG|01656667686971|01656667686971|01656667686971|-1656667686971|FTA6667686971|717273|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)94):
      testname="Test binary operator * with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar  varc1=2
        dshort varw1=3
        dint   vari1=4
        dlong  varl1=5
        dfloat varf1=6
        dchar  varc2=2
        dshort varw2=3
        dint   vari2=4
        dlong  varl2=5
        dfloat varf2=6
        con.print(( \
        (varc1*varc2).toint().tostr()+(varc1*varc2).dtype()+"|"+ \
        (varw1*varc2).tostr()+(varw1*varc2).dtype()+"|"+ \
        (vari1*varc2).tostr()+(vari1*varc2).dtype()+"|"+ \
        (varl1*varc2).tostr()+(varl1*varc2).dtype()+"|"+ \
        (varf1*varc2).tostr()+(varf1*varc2).dtype()+"|"+ \
        (varc1*varw2).tostr()+(varc1*varw2).dtype()+"|"+ \
        (varw1*varw2).tostr()+(varw1*varw2).dtype()+"|"+ \
        (vari1*varw2).tostr()+(vari1*varw2).dtype()+"|"+ \
        (varl1*varw2).tostr()+(varl1*varw2).dtype()+"|"+ \
        (varf1*varw2).tostr()+(varf1*varw2).dtype()+"|"+ \
        (varc1*vari2).tostr()+(varc1*vari2).dtype()+"|"+ \
        (varw1*vari2).tostr()+(varw1*vari2).dtype()+"|"+ \
        (vari1*vari2).tostr()+(vari1*vari2).dtype()+"|"+ \
        (varl1*vari2).tostr()+(varl1*vari2).dtype()+"|"+ \
        (varf1*vari2).tostr()+(varf1*vari2).dtype()+"|"+ \
        (varc1*varl2).tostr()+(varc1*varl2).dtype()+"|"+ \
        (varw1*varl2).tostr()+(varw1*varl2).dtype()+"|"+ \
        (vari1*varl2).tostr()+(vari1*varl2).dtype()+"|"+ \
        (varl1*varl2).tostr()+(varl1*varl2).dtype()+"|"+ \
        (varf1*varl2).tostr()+(varf1*varl2).dtype()+"|"+ \
        (varc1*varf2).tostr()+(varc1*varf2).dtype()+"|"+ \
        (varw1*varf2).tostr()+(varw1*varf2).dtype()+"|"+ \
        (vari1*varf2).tostr()+(vari1*varf2).dtype()+"|"+ \
        (varl1*varf2).tostr()+(varl1*varf2).dtype()+"|"+ \
        (varf1*varf2).tostr()+(varf1*varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","4C|6W|8I|10L|12F|6W|9W|12I|15L|18F|8I|12I|16I|20L|24F|10L|15L|20L|25L|30F|12F|18F|24F|30F|36F|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)95):
      testname="Test operator / with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar  varc1=64
        dshort varw1=128
        dint   vari1=256
        dlong  varl1=512
        dfloat varf1=1024
        dchar  varc2=2
        dshort varw2=4
        dint   vari2=8
        dlong  varl2=16
        dfloat varf2=32
        con.print(( \
        (varc1/varc2).toint().tostr()+(varc1/varc2).dtype()+"|"+ \
        (varw1/varc2).tostr()+(varw1/varc2).dtype()+"|"+ \
        (vari1/varc2).tostr()+(vari1/varc2).dtype()+"|"+ \
        (varl1/varc2).tostr()+(varl1/varc2).dtype()+"|"+ \
        (varf1/varc2).tostr()+(varf1/varc2).dtype()+"|"+ \
        (varc1/varw2).tostr()+(varc1/varw2).dtype()+"|"+ \
        (varw1/varw2).tostr()+(varw1/varw2).dtype()+"|"+ \
        (vari1/varw2).tostr()+(vari1/varw2).dtype()+"|"+ \
        (varl1/varw2).tostr()+(varl1/varw2).dtype()+"|"+ \
        (varf1/varw2).tostr()+(varf1/varw2).dtype()+"|"+ \
        (varc1/vari2).tostr()+(varc1/vari2).dtype()+"|"+ \
        (varw1/vari2).tostr()+(varw1/vari2).dtype()+"|"+ \
        (vari1/vari2).tostr()+(vari1/vari2).dtype()+"|"+ \
        (varl1/vari2).tostr()+(varl1/vari2).dtype()+"|"+ \
        (varf1/vari2).tostr()+(varf1/vari2).dtype()+"|"+ \
        (varc1/varl2).tostr()+(varc1/varl2).dtype()+"|"+ \
        (varw1/varl2).tostr()+(varw1/varl2).dtype()+"|"+ \
        (vari1/varl2).tostr()+(vari1/varl2).dtype()+"|"+ \
        (varl1/varl2).tostr()+(varl1/varl2).dtype()+"|"+ \
        (varf1/varl2).tostr()+(varf1/varl2).dtype()+"|"+ \
        (varc1/varf2).tostr()+(varc1/varf2).dtype()+"|"+ \
        (varw1/varf2).tostr()+(varw1/varf2).dtype()+"|"+ \
        (vari1/varf2).tostr()+(vari1/varf2).dtype()+"|"+ \
        (varl1/varf2).tostr()+(varl1/varf2).dtype()+"|"+ \
        (varf1/varf2).tostr()+(varf1/varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","32C|64W|128I|256L|512F|16W|32W|64I|128L|256F|8I|16I|32I|64L|128F|4L|8L|16L|32L|64F|2F|4F|8F|16F|32F|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)96):
      testname="Test operator % with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=33
        dshort varw1=67
        dint   vari1=133
        dlong  varl1=263
        dchar  varc2=2
        dshort varw2=4
        dint   vari2=8
        dlong  varl2=16
        con.print(( \
        (varc1%varc2).toint().tostr()+(varc1%varc2).dtype()+"|"+ \
        (varw1%varc2).tostr()+(varw1%varc2).dtype()+"|"+ \
        (vari1%varc2).tostr()+(vari1%varc2).dtype()+"|"+ \
        (varl1%varc2).tostr()+(varl1%varc2).dtype()+"|"+ \
        (varc1%varw2).tostr()+(varc1%varw2).dtype()+"|"+ \
        (varw1%varw2).tostr()+(varw1%varw2).dtype()+"|"+ \
        (vari1%varw2).tostr()+(vari1%varw2).dtype()+"|"+ \
        (varl1%varw2).tostr()+(varl1%varw2).dtype()+"|"+ \
        (varc1%vari2).tostr()+(varc1%vari2).dtype()+"|"+ \
        (varw1%vari2).tostr()+(varw1%vari2).dtype()+"|"+ \
        (vari1%vari2).tostr()+(vari1%vari2).dtype()+"|"+ \
        (varl1%vari2).tostr()+(varl1%vari2).dtype()+"|"+ \
        (varc1%varl2).tostr()+(varc1%varl2).dtype()+"|"+ \
        (varw1%varl2).tostr()+(varw1%varl2).dtype()+"|"+ \
        (vari1%varl2).tostr()+(vari1%varl2).dtype()+"|"+ \
        (varl1%varl2).tostr()+(varl1%varl2).dtype()+"|"+ \
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","1C|1W|1I|1L|1W|3W|1I|3L|1I|3I|5I|7L|1L|3L|5L|7L|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)97):
      testname="Test operator + with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        dchar   varc1=50
        dshort  varw1=3
        dint    vari1=4
        dlong   varl1=5
        dfloat  varf1=6
        dstring vars1="ABC"
        dchar   varc2=51
        dshort  varw2=7
        dint    vari2=8
        dlong   varl2=9
        dfloat  varf2=10
        dstring vars2="DEF"
        con.print(( \
        (varc1+varc2).tostr()+(varc1+varc2).dtype()+"|"+ \
        (varw1+varc2).tostr()+(varw1+varc2).dtype()+"|"+ \
        (vari1+varc2).tostr()+(vari1+varc2).dtype()+"|"+ \
        (varl1+varc2).tostr()+(varl1+varc2).dtype()+"|"+ \
        (varf1+varc2).tostr()+(varf1+varc2).dtype()+"|"+ \
        (varc1+varw2).tostr()+(varc1+varw2).dtype()+"|"+ \
        (varw1+varw2).tostr()+(varw1+varw2).dtype()+"|"+ \
        (vari1+varw2).tostr()+(vari1+varw2).dtype()+"|"+ \
        (varl1+varw2).tostr()+(varl1+varw2).dtype()+"|"+ \
        (varf1+varw2).tostr()+(varf1+varw2).dtype()+"|"+ \
        (varc1+vari2).tostr()+(varc1+vari2).dtype()+"|"+ \
        (varw1+vari2).tostr()+(varw1+vari2).dtype()+"|"+ \
        (vari1+vari2).tostr()+(vari1+vari2).dtype()+"|"+ \
        (varl1+vari2).tostr()+(varl1+vari2).dtype()+"|"+ \
        (varf1+vari2).tostr()+(varf1+vari2).dtype()+"|"+ \
        (varc1+varl2).tostr()+(varc1+varl2).dtype()+"|"+ \
        (varw1+varl2).tostr()+(varw1+varl2).dtype()+"|"+ \
        (vari1+varl2).tostr()+(vari1+varl2).dtype()+"|"+ \
        (varl1+varl2).tostr()+(varl1+varl2).dtype()+"|"+ \
        (varf1+varl2).tostr()+(varf1+varl2).dtype()+"|"+ \
        (varc1+varf2).tostr()+(varc1+varf2).dtype()+"|"+ \
        (varw1+varf2).tostr()+(varw1+varf2).dtype()+"|"+ \
        (vari1+varf2).tostr()+(vari1+varf2).dtype()+"|"+ \
        (varl1+varf2).tostr()+(varl1+varf2).dtype()+"|"+ \
        (varf1+varf2).tostr()+(varf1+varf2).dtype()+"|"+ \
        (varc1+vars2)        +(varc1+vars2).dtype()+"|"+ \
        (vars1+varc2)        +(vars1+varc2).dtype()+"|"+ \
        (vars1+vars2)        +(vars1+vars2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F").replace("string","S"))
      :main
      ]")
      execute_test(testnr,testname,"main","","eC|54W|55I|56L|57F|57W|10W|11I|12L|13F|58I|11I|12I|13L|14F|59L|12L|13L|14L|15F|60F|13F|14F|15F|16F|2DEFS|ABC3S|ABCDEFS|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)98):
      testname="Test operator - with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        dchar  varc1=1
        dshort varw1=2
        dint   vari1=3
        dlong  varl1=4
        dfloat varf1=5
        dchar  varc2=6
        dshort varw2=5
        dint   vari2=4
        dlong  varl2=3
        dfloat varf2=2
        con.print(( \
        (varc1-varc2).toint().tostr()+(varc1-varc2).dtype()+"|"+ \
        (varw1-varc2).tostr()+(varw1-varc2).dtype()+"|"+ \
        (vari1-varc2).tostr()+(vari1-varc2).dtype()+"|"+ \
        (varl1-varc2).tostr()+(varl1-varc2).dtype()+"|"+ \
        (varf1-varc2).tostr()+(varf1-varc2).dtype()+"|"+ \
        (varc1-varw2).tostr()+(varc1-varw2).dtype()+"|"+ \
        (varw1-varw2).tostr()+(varw1-varw2).dtype()+"|"+ \
        (vari1-varw2).tostr()+(vari1-varw2).dtype()+"|"+ \
        (varl1-varw2).tostr()+(varl1-varw2).dtype()+"|"+ \
        (varf1-varw2).tostr()+(varf1-varw2).dtype()+"|"+ \
        (varc1-vari2).tostr()+(varc1-vari2).dtype()+"|"+ \
        (varw1-vari2).tostr()+(varw1-vari2).dtype()+"|"+ \
        (vari1-vari2).tostr()+(vari1-vari2).dtype()+"|"+ \
        (varl1-vari2).tostr()+(varl1-vari2).dtype()+"|"+ \
        (varf1-vari2).tostr()+(varf1-vari2).dtype()+"|"+ \
        (varc1-varl2).tostr()+(varc1-varl2).dtype()+"|"+ \
        (varw1-varl2).tostr()+(varw1-varl2).dtype()+"|"+ \
        (vari1-varl2).tostr()+(vari1-varl2).dtype()+"|"+ \
        (varl1-varl2).tostr()+(varl1-varl2).dtype()+"|"+ \
        (varf1-varl2).tostr()+(varf1-varl2).dtype()+"|"+ \
        (varc1-varf2).tostr()+(varc1-varf2).dtype()+"|"+ \
        (varw1-varf2).tostr()+(varw1-varf2).dtype()+"|"+ \
        (vari1-varf2).tostr()+(vari1-varf2).dtype()+"|"+ \
        (varl1-varf2).tostr()+(varl1-varf2).dtype()+"|"+ \
        (varf1-varf2).tostr()+(varf1-varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","-5C|-4W|-3I|-2L|-1F|-4W|-3W|-2I|-1L|0F|-3I|-2I|-1I|0L|1F|-2L|-1L|0L|1L|2F|-1F|0F|1F|2F|3F|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)99):
      testname="Test operator << with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=2
        dshort varw1=4
        dint   vari1=16
        dlong  varl1=32
        dchar  varc2=1
        dshort varw2=2
        dint   vari2=3
        dlong  varl2=4
        con.print(( \
        (varc1<<varc2).toint().tostr()+(varc1<<varc2).dtype()+"|"+ \
        (varw1<<varc2).tostr()+(varw1<<varc2).dtype()+"|"+ \
        (varw1<<varw2).tostr()+(varw1<<varw2).dtype()+"|"+ \
        (vari1<<varc2).tostr()+(vari1<<varc2).dtype()+"|"+ \
        (vari1<<varw2).tostr()+(vari1<<varw2).dtype()+"|"+ \
        (vari1<<vari2).tostr()+(vari1<<vari2).dtype()+"|"+ \
        (varl1<<varc2).tostr()+(varl1<<varc2).dtype()+"|"+ \
        (varl1<<varw2).tostr()+(varl1<<varw2).dtype()+"|"+ \
        (varl1<<vari2).tostr()+(varl1<<vari2).dtype()+"|"+ \
        (varl1<<varl2).tostr()+(varl1<<varl2).dtype()+"|"+ \
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","4C|8W|16W|32I|64I|128I|64L|128L|256L|512L|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)100):
      testname="Test operator >> with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=32
        dshort varw1=64
        dint   vari1=128
        dlong  varl1=256
        dchar  varc2=1
        dshort varw2=2
        dint   vari2=3
        dlong  varl2=4
        con.print(( \
        (varc1>>varc2).toint().tostr()+(varc1>>varc2).dtype()+"|"+ \
        (varw1>>varc2).tostr()+(varw1>>varc2).dtype()+"|"+ \
        (varw1>>varw2).tostr()+(varw1>>varw2).dtype()+"|"+ \
        (vari1>>varc2).tostr()+(vari1>>varc2).dtype()+"|"+ \
        (vari1>>varw2).tostr()+(vari1>>varw2).dtype()+"|"+ \
        (vari1>>vari2).tostr()+(vari1>>vari2).dtype()+"|"+ \
        (varl1>>varc2).tostr()+(varl1>>varc2).dtype()+"|"+ \
        (varl1>>varw2).tostr()+(varl1>>varw2).dtype()+"|"+ \
        (varl1>>vari2).tostr()+(varl1>>vari2).dtype()+"|"+ \
        (varl1>>varl2).tostr()+(varl1>>varl2).dtype()+"|"+ \
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","16C|32W|16W|64I|32I|16I|128L|64L|32L|16L|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)101):
      testname="Test operator < with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        dchar   varc1=1
        dshort  varw1=2
        dint    vari1=3
        dlong   varl1=4
        dfloat  varf1=5
        dstring vars1="ABC"
        dstring vart1="DEF"
        dchar   varc2=5
        dshort  varw2=4
        dint    vari2=3
        dlong   varl2=2
        dfloat  varf2=1
        dstring vars2="GHI"
        dstring vart2="DEF"
        con.print(( \
        (varc1<varc2).tostr()+(varc1<varc2).dtype()+"|"+ \
        (varw1<varc2).tostr()+(varw1<varc2).dtype()+"|"+ \
        (vari1<varc2).tostr()+(vari1<varc2).dtype()+"|"+ \
        (varl1<varc2).tostr()+(varl1<varc2).dtype()+"|"+ \
        (varf1<varc2).tostr()+(varf1<varc2).dtype()+"|"+ \
        (varc1<varw2).tostr()+(varc1<varw2).dtype()+"|"+ \
        (varw1<varw2).tostr()+(varw1<varw2).dtype()+"|"+ \
        (vari1<varw2).tostr()+(vari1<varw2).dtype()+"|"+ \
        (varl1<varw2).tostr()+(varl1<varw2).dtype()+"|"+ \
        (varf1<varw2).tostr()+(varf1<varw2).dtype()+"|"+ \
        (varc1<vari2).tostr()+(varc1<vari2).dtype()+"|"+ \
        (varw1<vari2).tostr()+(varw1<vari2).dtype()+"|"+ \
        (vari1<vari2).tostr()+(vari1<vari2).dtype()+"|"+ \
        (varl1<vari2).tostr()+(varl1<vari2).dtype()+"|"+ \
        (varf1<vari2).tostr()+(varf1<vari2).dtype()+"|"+ \
        (varc1<varl2).tostr()+(varc1<varl2).dtype()+"|"+ \
        (varw1<varl2).tostr()+(varw1<varl2).dtype()+"|"+ \
        (vari1<varl2).tostr()+(vari1<varl2).dtype()+"|"+ \
        (varl1<varl2).tostr()+(varl1<varl2).dtype()+"|"+ \
        (varf1<varl2).tostr()+(varf1<varl2).dtype()+"|"+ \
        (varc1<varf2).tostr()+(varc1<varf2).dtype()+"|"+ \
        (varw1<varf2).tostr()+(varw1<varf2).dtype()+"|"+ \
        (vari1<varf2).tostr()+(vari1<varf2).dtype()+"|"+ \
        (varl1<varf2).tostr()+(varl1<varf2).dtype()+"|"+ \
        (varf1<varf2).tostr()+(varf1<varf2).dtype()+"|"+ \
        (vars1<vars2).tostr()+(vars1<vars2).dtype()+"|"+ \
        (vars1<vart2).tostr()+(vars1<vart2).dtype()+"|"+ \
        (vart1<vars2).tostr()+(vart1<vars2).dtype()+"|"+ \
        (vart1<vart2).tostr()+(vart1<vart2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","TB|TB|TB|TB|FB|TB|TB|TB|FB|FB|TB|TB|FB|FB|FB|TB|FB|FB|FB|FB|FB|FB|FB|FB|FB|TB|TB|TB|FB|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)102):
      testname="Test operator <= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        dchar   varc1=1
        dshort  varw1=2
        dint    vari1=3
        dlong   varl1=4
        dfloat  varf1=5
        dstring vars1="ABC"
        dstring vart1="DEF"
        dchar   varc2=5
        dshort  varw2=4
        dint    vari2=3
        dlong   varl2=2
        dfloat  varf2=1
        dstring vars2="GHI"
        dstring vart2="DEF"
        con.print(( \
        (varc1<=varc2).tostr()+(varc1<=varc2).dtype()+"|"+ \
        (varw1<=varc2).tostr()+(varw1<=varc2).dtype()+"|"+ \
        (vari1<=varc2).tostr()+(vari1<=varc2).dtype()+"|"+ \
        (varl1<=varc2).tostr()+(varl1<=varc2).dtype()+"|"+ \
        (varf1<=varc2).tostr()+(varf1<=varc2).dtype()+"|"+ \
        (varc1<=varw2).tostr()+(varc1<=varw2).dtype()+"|"+ \
        (varw1<=varw2).tostr()+(varw1<=varw2).dtype()+"|"+ \
        (vari1<=varw2).tostr()+(vari1<=varw2).dtype()+"|"+ \
        (varl1<=varw2).tostr()+(varl1<=varw2).dtype()+"|"+ \
        (varf1<=varw2).tostr()+(varf1<=varw2).dtype()+"|"+ \
        (varc1<=vari2).tostr()+(varc1<=vari2).dtype()+"|"+ \
        (varw1<=vari2).tostr()+(varw1<=vari2).dtype()+"|"+ \
        (vari1<=vari2).tostr()+(vari1<=vari2).dtype()+"|"+ \
        (varl1<=vari2).tostr()+(varl1<=vari2).dtype()+"|"+ \
        (varf1<=vari2).tostr()+(varf1<=vari2).dtype()+"|"+ \
        (varc1<=varl2).tostr()+(varc1<=varl2).dtype()+"|"+ \
        (varw1<=varl2).tostr()+(varw1<=varl2).dtype()+"|"+ \
        (vari1<=varl2).tostr()+(vari1<=varl2).dtype()+"|"+ \
        (varl1<=varl2).tostr()+(varl1<=varl2).dtype()+"|"+ \
        (varf1<=varl2).tostr()+(varf1<=varl2).dtype()+"|"+ \
        (varc1<=varf2).tostr()+(varc1<=varf2).dtype()+"|"+ \
        (varw1<=varf2).tostr()+(varw1<=varf2).dtype()+"|"+ \
        (vari1<=varf2).tostr()+(vari1<=varf2).dtype()+"|"+ \
        (varl1<=varf2).tostr()+(varl1<=varf2).dtype()+"|"+ \
        (varf1<=varf2).tostr()+(varf1<=varf2).dtype()+"|"+ \
        (vars1<=vars2).tostr()+(vars1<=vars2).dtype()+"|"+ \
        (vars1<=vart2).tostr()+(vars1<=vart2).dtype()+"|"+ \
        (vart1<=vars2).tostr()+(vart1<=vars2).dtype()+"|"+ \
        (vart1<=vart2).tostr()+(vart1<=vart2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","TB|TB|TB|TB|TB|TB|TB|TB|TB|FB|TB|TB|TB|FB|FB|TB|TB|FB|FB|FB|TB|FB|FB|FB|FB|TB|TB|TB|TB|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)103):
      testname="Test operator > with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        dchar   varc1=1
        dshort  varw1=2
        dint    vari1=3
        dlong   varl1=4
        dfloat  varf1=5
        dstring vars1="ABC"
        dstring vart1="DEF"
        dchar   varc2=5
        dshort  varw2=4
        dint    vari2=3
        dlong   varl2=2
        dfloat  varf2=1
        dstring vars2="GHI"
        dstring vart2="DEF"
        con.print(( \
        (varc1>varc2).tostr()+(varc1>varc2).dtype()+"|"+ \
        (varw1>varc2).tostr()+(varw1>varc2).dtype()+"|"+ \
        (vari1>varc2).tostr()+(vari1>varc2).dtype()+"|"+ \
        (varl1>varc2).tostr()+(varl1>varc2).dtype()+"|"+ \
        (varf1>varc2).tostr()+(varf1>varc2).dtype()+"|"+ \
        (varc1>varw2).tostr()+(varc1>varw2).dtype()+"|"+ \
        (varw1>varw2).tostr()+(varw1>varw2).dtype()+"|"+ \
        (vari1>varw2).tostr()+(vari1>varw2).dtype()+"|"+ \
        (varl1>varw2).tostr()+(varl1>varw2).dtype()+"|"+ \
        (varf1>varw2).tostr()+(varf1>varw2).dtype()+"|"+ \
        (varc1>vari2).tostr()+(varc1>vari2).dtype()+"|"+ \
        (varw1>vari2).tostr()+(varw1>vari2).dtype()+"|"+ \
        (vari1>vari2).tostr()+(vari1>vari2).dtype()+"|"+ \
        (varl1>vari2).tostr()+(varl1>vari2).dtype()+"|"+ \
        (varf1>vari2).tostr()+(varf1>vari2).dtype()+"|"+ \
        (varc1>varl2).tostr()+(varc1>varl2).dtype()+"|"+ \
        (varw1>varl2).tostr()+(varw1>varl2).dtype()+"|"+ \
        (vari1>varl2).tostr()+(vari1>varl2).dtype()+"|"+ \
        (varl1>varl2).tostr()+(varl1>varl2).dtype()+"|"+ \
        (varf1>varl2).tostr()+(varf1>varl2).dtype()+"|"+ \
        (varc1>varf2).tostr()+(varc1>varf2).dtype()+"|"+ \
        (varw1>varf2).tostr()+(varw1>varf2).dtype()+"|"+ \
        (vari1>varf2).tostr()+(vari1>varf2).dtype()+"|"+ \
        (varl1>varf2).tostr()+(varl1>varf2).dtype()+"|"+ \
        (varf1>varf2).tostr()+(varf1>varf2).dtype()+"|"+ \
        (vars1>vars2).tostr()+(vars1>vars2).dtype()+"|"+ \
        (vars1>vart2).tostr()+(vars1>vart2).dtype()+"|"+ \
        (vart1>vars2).tostr()+(vart1>vars2).dtype()+"|"+ \
        (vart1>vart2).tostr()+(vart1>vart2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FB|FB|FB|FB|FB|FB|FB|FB|FB|TB|FB|FB|FB|TB|TB|FB|FB|TB|TB|TB|FB|TB|TB|TB|TB|FB|FB|FB|FB|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)104):
      testname="Test operator >= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        dchar   varc1=1
        dshort  varw1=2
        dint    vari1=3
        dlong   varl1=4
        dfloat  varf1=5
        dstring vars1="ABC"
        dstring vart1="DEF"
        dchar   varc2=5
        dshort  varw2=4
        dint    vari2=3
        dlong   varl2=2
        dfloat  varf2=1
        dstring vars2="GHI"
        dstring vart2="DEF"
        con.print(( \
        (varc1>=varc2).tostr()+(varc1>=varc2).dtype()+"|"+ \
        (varw1>=varc2).tostr()+(varw1>=varc2).dtype()+"|"+ \
        (vari1>=varc2).tostr()+(vari1>=varc2).dtype()+"|"+ \
        (varl1>=varc2).tostr()+(varl1>=varc2).dtype()+"|"+ \
        (varf1>=varc2).tostr()+(varf1>=varc2).dtype()+"|"+ \
        (varc1>=varw2).tostr()+(varc1>=varw2).dtype()+"|"+ \
        (varw1>=varw2).tostr()+(varw1>=varw2).dtype()+"|"+ \
        (vari1>=varw2).tostr()+(vari1>=varw2).dtype()+"|"+ \
        (varl1>=varw2).tostr()+(varl1>=varw2).dtype()+"|"+ \
        (varf1>=varw2).tostr()+(varf1>=varw2).dtype()+"|"+ \
        (varc1>=vari2).tostr()+(varc1>=vari2).dtype()+"|"+ \
        (varw1>=vari2).tostr()+(varw1>=vari2).dtype()+"|"+ \
        (vari1>=vari2).tostr()+(vari1>=vari2).dtype()+"|"+ \
        (varl1>=vari2).tostr()+(varl1>=vari2).dtype()+"|"+ \
        (varf1>=vari2).tostr()+(varf1>=vari2).dtype()+"|"+ \
        (varc1>=varl2).tostr()+(varc1>=varl2).dtype()+"|"+ \
        (varw1>=varl2).tostr()+(varw1>=varl2).dtype()+"|"+ \
        (vari1>=varl2).tostr()+(vari1>=varl2).dtype()+"|"+ \
        (varl1>=varl2).tostr()+(varl1>=varl2).dtype()+"|"+ \
        (varf1>=varl2).tostr()+(varf1>=varl2).dtype()+"|"+ \
        (varc1>=varf2).tostr()+(varc1>=varf2).dtype()+"|"+ \
        (varw1>=varf2).tostr()+(varw1>=varf2).dtype()+"|"+ \
        (vari1>=varf2).tostr()+(vari1>=varf2).dtype()+"|"+ \
        (varl1>=varf2).tostr()+(varl1>=varf2).dtype()+"|"+ \
        (varf1>=varf2).tostr()+(varf1>=varf2).dtype()+"|"+ \
        (vars1>=vars2).tostr()+(vars1>=vars2).dtype()+"|"+ \
        (vars1>=vart2).tostr()+(vars1>=vart2).dtype()+"|"+ \
        (vart1>=vars2).tostr()+(vart1>=vars2).dtype()+"|"+ \
        (vart1>=vart2).tostr()+(vart1>=vart2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FB|FB|FB|FB|TB|FB|FB|FB|TB|TB|FB|FB|TB|TB|TB|FB|TB|TB|TB|TB|TB|TB|TB|TB|TB|FB|FB|FB|TB|END",false)
      break
     
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)105):
      testname="Test operator == with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      .implem
      main:
        dbool     varb1=false
        dbool     varo1=true
        dchar     varc1=1
        dshort    varw1=2
        dint      vari1=3
        dlong     varl1=4
        dfloat    varf1=5
        enutype   vare1=enutype.enu1
        enutype   varn1=enutype.enu3
        dbool     varb2=true
        dbool     varo2=true
        dchar     varc2=5
        dshort    varw2=4
        dint      vari2=3
        dlong     varl2=2
        dfloat    varf2=1
        enutype   vare2=enutype.enu2
        enutype   varn2=enutype.enu3
        con.print(( \
        (varb1==varb2).tostr()+(varb1==varb2).dtype()+"|"+ \
        (varb1==varo2).tostr()+(varb1==varo2).dtype()+"|"+ \
        (varo1==varb2).tostr()+(varo1==varb2).dtype()+"|"+ \
        (varo1==varo2).tostr()+(varo1==varo2).dtype()+"|"+ \
        (varc1==varc2).tostr()+(varc1==varc2).dtype()+"|"+ \
        (varw1==varc2).tostr()+(varw1==varc2).dtype()+"|"+ \
        (vari1==varc2).tostr()+(vari1==varc2).dtype()+"|"+ \
        (varl1==varc2).tostr()+(varl1==varc2).dtype()+"|"+ \
        (varf1==varc2).tostr()+(varf1==varc2).dtype()+"|"+ \
        (varc1==varw2).tostr()+(varc1==varw2).dtype()+"|"+ \
        (varw1==varw2).tostr()+(varw1==varw2).dtype()+"|"+ \
        (vari1==varw2).tostr()+(vari1==varw2).dtype()+"|"+ \
        (varl1==varw2).tostr()+(varl1==varw2).dtype()+"|"+ \
        (varf1==varw2).tostr()+(varf1==varw2).dtype()+"|"+ \
        (varc1==vari2).tostr()+(varc1==vari2).dtype()+"|"+ \
        (varw1==vari2).tostr()+(varw1==vari2).dtype()+"|"+ \
        (vari1==vari2).tostr()+(vari1==vari2).dtype()+"|"+ \
        (varl1==vari2).tostr()+(varl1==vari2).dtype()+"|"+ \
        (varf1==vari2).tostr()+(varf1==vari2).dtype()+"|"+ \
        (varc1==varl2).tostr()+(varc1==varl2).dtype()+"|"+ \
        (varw1==varl2).tostr()+(varw1==varl2).dtype()+"|"+ \
        (vari1==varl2).tostr()+(vari1==varl2).dtype()+"|"+ \
        (varl1==varl2).tostr()+(varl1==varl2).dtype()+"|"+ \
        (varf1==varl2).tostr()+(varf1==varl2).dtype()+"|"+ \
        (varc1==varf2).tostr()+(varc1==varf2).dtype()+"|"+ \
        (varw1==varf2).tostr()+(varw1==varf2).dtype()+"|"+ \
        (vari1==varf2).tostr()+(vari1==varf2).dtype()+"|"+ \
        (varl1==varf2).tostr()+(varl1==varf2).dtype()+"|"+ \
        (varf1==varf2).tostr()+(varf1==varf2).dtype()+"|"+ \
        (vare1==vare2).tostr()+(vare1==vare2).dtype()+"|"+ \
        (vare1==varn2).tostr()+(vare1==varn2).dtype()+"|"+ \
        (varn1==vare2).tostr()+(varn1==vare2).dtype()+"|"+ \
        (varn1==varn2).tostr()+(varn1==varn2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FB|FB|TB|TB|FB|FB|FB|FB|TB|FB|FB|FB|TB|FB|FB|FB|TB|FB|FB|FB|TB|FB|FB|FB|TB|FB|FB|FB|FB|FB|FB|FB|TB|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)106):
      testname="Test operator != with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      .implem
      main:
        dbool     varb1=false
        dbool     varo1=true
        dchar     varc1=1
        dshort    varw1=2
        dint      vari1=3
        dlong     varl1=4
        dfloat    varf1=5
        enutype   vare1=enutype.enu1
        enutype   varn1=enutype.enu3
        dbool     varb2=true
        dbool     varo2=true
        dchar     varc2=5
        dshort    varw2=4
        dint      vari2=3
        dlong     varl2=2
        dfloat    varf2=1
        enutype   vare2=enutype.enu2
        enutype   varn2=enutype.enu3
        con.print(( \
        (varb1!=varb2).tostr()+(varb1!=varb2).dtype()+"|"+ \
        (varb1!=varo2).tostr()+(varb1!=varo2).dtype()+"|"+ \
        (varo1!=varb2).tostr()+(varo1!=varb2).dtype()+"|"+ \
        (varo1!=varo2).tostr()+(varo1!=varo2).dtype()+"|"+ \
        (varc1!=varc2).tostr()+(varc1!=varc2).dtype()+"|"+ \
        (varw1!=varc2).tostr()+(varw1!=varc2).dtype()+"|"+ \
        (vari1!=varc2).tostr()+(vari1!=varc2).dtype()+"|"+ \
        (varl1!=varc2).tostr()+(varl1!=varc2).dtype()+"|"+ \
        (varf1!=varc2).tostr()+(varf1!=varc2).dtype()+"|"+ \
        (varc1!=varw2).tostr()+(varc1!=varw2).dtype()+"|"+ \
        (varw1!=varw2).tostr()+(varw1!=varw2).dtype()+"|"+ \
        (vari1!=varw2).tostr()+(vari1!=varw2).dtype()+"|"+ \
        (varl1!=varw2).tostr()+(varl1!=varw2).dtype()+"|"+ \
        (varf1!=varw2).tostr()+(varf1!=varw2).dtype()+"|"+ \
        (varc1!=vari2).tostr()+(varc1!=vari2).dtype()+"|"+ \
        (varw1!=vari2).tostr()+(varw1!=vari2).dtype()+"|"+ \
        (vari1!=vari2).tostr()+(vari1!=vari2).dtype()+"|"+ \
        (varl1!=vari2).tostr()+(varl1!=vari2).dtype()+"|"+ \
        (varf1!=vari2).tostr()+(varf1!=vari2).dtype()+"|"+ \
        (varc1!=varl2).tostr()+(varc1!=varl2).dtype()+"|"+ \
        (varw1!=varl2).tostr()+(varw1!=varl2).dtype()+"|"+ \
        (vari1!=varl2).tostr()+(vari1!=varl2).dtype()+"|"+ \
        (varl1!=varl2).tostr()+(varl1!=varl2).dtype()+"|"+ \
        (varf1!=varl2).tostr()+(varf1!=varl2).dtype()+"|"+ \
        (varc1!=varf2).tostr()+(varc1!=varf2).dtype()+"|"+ \
        (varw1!=varf2).tostr()+(varw1!=varf2).dtype()+"|"+ \
        (vari1!=varf2).tostr()+(vari1!=varf2).dtype()+"|"+ \
        (varl1!=varf2).tostr()+(varl1!=varf2).dtype()+"|"+ \
        (varf1!=varf2).tostr()+(varf1!=varf2).dtype()+"|"+ \
        (vare1!=vare2).tostr()+(vare1!=vare2).dtype()+"|"+ \
        (vare1!=varn2).tostr()+(vare1!=varn2).dtype()+"|"+ \
        (varn1!=vare2).tostr()+(varn1!=vare2).dtype()+"|"+ \
        (varn1!=varn2).tostr()+(varn1!=varn2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","TB|TB|FB|FB|TB|TB|TB|TB|FB|TB|TB|TB|FB|TB|TB|TB|FB|TB|TB|TB|FB|TB|TB|TB|FB|TB|TB|TB|TB|TB|TB|TB|FB|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)107):
      testname="Test operator & with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1&varc2).toint().tostr()+(varc1&varc2).dtype()+"|"+ \ 
        (varw1&varw2).tostr()+(varw1&varw2).dtype()+"|"+ \ 
        (vari1&vari2).tostr()+(vari1&vari2).dtype()+"|"+ \ 
        (varl1&varl2).tostr()+(varl1&varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","1C|1W|1I|1L|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)108):
      testname="Test operator ^ with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1^varc2).toint().tostr()+(varc1^varc2).dtype()+"|"+ \ 
        (varw1^varw2).tostr()+(varw1^varw2).dtype()+"|"+ \ 
        (vari1^vari2).tostr()+(vari1^vari2).dtype()+"|"+ \ 
        (varl1^varl2).tostr()+(varl1^varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","126C|32766W|2147483646I|9223372036854775806L|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)109):
      testname="Test operator | with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1|varc2).toint().tostr()+(varc1|varc2).dtype()+"|"+ \ 
        (varw1|varw2).tostr()+(varw1|varw2).dtype()+"|"+ \ 
        (vari1|vari2).tostr()+(vari1|vari2).dtype()+"|"+ \ 
        (varl1|varl2).tostr()+(varl1|varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","127C|32767W|2147483647I|9223372036854775807L|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)110):
      testname="Test operator && with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      .implem
      main:
        dbool vara1=true
        dbool vara2=false
        dbool varb1=false
        dbool varb2=true
        con.print(( \
        (vara1&&varb1).tostr()+(vara1&&varb1).dtype()+"|"+ \
        (vara1&&varb2).tostr()+(vara1&&varb2).dtype()+"|"+ \
        (vara2&&varb1).tostr()+(vara2&&varb1).dtype()+"|"+ \
        (vara2&&varb2).tostr()+(vara2&&varb2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FB|TB|FB|FB|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)111):
      testname="Test operator || with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      .implem
      main:
        dbool vara1=true
        dbool vara2=false
        dbool varb1=false
        dbool varb2=true
        con.print(( \
        (vara1||varb1).tostr()+(vara1||varb1).dtype()+"|"+ \
        (vara1||varb2).tostr()+(vara1||varb2).dtype()+"|"+ \
        (vara2||varb1).tostr()+(vara2||varb1).dtype()+"|"+ \
        (vara2||varb2).tostr()+(vara2||varb2).dtype()+"|"+ \
        "END").replace("bool","B").replace("true","T").replace("false","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","TB|TB|FB|TB|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)112):
      testname="Test operator = with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      .implem
      main:
        dbool   varb1=false
        dchar   varc1=50
        dshort  varw1=3
        dint    vari1=4
        dlong   varl1=5
        dfloat  varf1=6
        dstring vars1="ABC"
        enutype vare1=enutype.enu1
        con.print(( \
        (varb1=varb1||true).tostr()+(varb1=varb1||true).dtype()+"|"+ \
        (varc1=varc1+1).toint().tostr()+(varc1=varc1+1).dtype()+"|"+ \   
        (varw1=varc1+1).tostr()+(varw1=varc1+1).dtype()+"|"+ \           
        (varw1=varw1+1).tostr()+(varw1=varw1+1).dtype()+"|"+ \           
        (vari1=varc1+1).tostr()+(vari1=varc1+1).dtype()+"|"+ \           
        (vari1=varw1+1).tostr()+(vari1=varw1+1).dtype()+"|"+ \           
        (vari1=vari1+1).tostr()+(vari1=vari1+1).dtype()+"|"+ \           
        (varl1=varc1+1).tostr()+(varl1=varc1+1).dtype()+"|"+ \           
        (varl1=varw1+1).tostr()+(varl1=varw1+1).dtype()+"|"+ \           
        (varl1=vari1+1).tostr()+(varl1=vari1+1).dtype()+"|"+ \           
        (varl1=varl1+1).tostr()+(varl1=varl1+1).dtype()+"|"+ \           
        (varf1=varc1+1).tostr()+(varf1=varc1+1).dtype()+"|"+ \           
        (varf1=varw1+1).tostr()+(varf1=varw1+1).dtype()+"|"+ \           
        (varf1=vari1+1).tostr()+(varf1=vari1+1).dtype()+"|"+ \           
        (varf1=varl1+1).tostr()+(varf1=varl1+1).dtype()+"|"+ \           
        (varf1=varf1+1).tostr()+(varf1=varf1+1).dtype()+"|"+ \           
        (vars1=vars1+"DEF")+(vars1=vars1+"DEF").dtype()+"|"+ \           
        (vare1=enutype.enu2).toint().tostr()+(vare1=enutype.enu2).dtype()+"|"+ \
        "END").replace(".000000","").replace("bool","B").replace("true","T").replace("false","F").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F").replace("string","S"))
      :main
      ]")
      execute_test(testnr,testname,"main","","TdB|51dC|53dW|54dW|53dI|56dI|57dI|53dL|56dL|59dL|60dL|53dF|56dF|59dF|62dF|63dF|ABCDEFdS|1enutype|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)113):
      testname="Test operator += with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      .implem
      main:
        const dchar   _varc=50
        const dshort  _varw=1
        const dint    _vari=2
        const dlong   _varl=3
        const dfloat  _varf=4
        const dstring _vars="ABC"
        dchar   varc1=_varc
        dshort  varw1=_varw
        dint    vari1=_vari
        dlong   varl1=_varl
        dfloat  varf1=_varf
        dstring vars1=_vars
        dchar   varc2=_varc
        dshort  varw2=_varw
        dint    vari2=_vari
        dlong   varl2=_varl
        dfloat  varf2=_varf
        dstring vars2=_vars
        string result=""
        result+=(varc1+=varc2).tostr()+"|"; varc1=_varc
        result+=(varw1+=varc2).tostr()+"|"; varw1=_varw
        result+=(varw1+=varw2).tostr()+"|"; varw1=_varw
        result+=(vari1+=varc2).tostr()+"|"; vari1=_vari
        result+=(vari1+=varw2).tostr()+"|"; vari1=_vari
        result+=(vari1+=vari2).tostr()+"|"; vari1=_vari
        result+=(varl1+=varc2).tostr()+"|"; varl1=_varl
        result+=(varl1+=varw2).tostr()+"|"; varl1=_varl
        result+=(varl1+=vari2).tostr()+"|"; varl1=_varl
        result+=(varl1+=varl2).tostr()+"|"; varl1=_varl
        result+=(varf1+=varc2).tostr()+"|"; varf1=_varf
        result+=(varf1+=varw2).tostr()+"|"; varf1=_varf
        result+=(varf1+=vari2).tostr()+"|"; varf1=_varf
        result+=(varf1+=varl2).tostr()+"|"; varf1=_varf
        result+=(varf1+=varf2).tostr()+"|"; varf1=_varf
        result+=(vars1+=varc2)        +"|"; vars1=_vars
        result+=(vars1+=vars2)        +"|"; vars1=_vars
        con.print((result+ \
        (varc1+=varc2).dtype()+"|"+ \
        (varw1+=varc2).dtype()+"|"+ \
        (varw1+=varw2).dtype()+"|"+ \
        (vari1+=varc2).dtype()+"|"+ \
        (vari1+=varw2).dtype()+"|"+ \
        (vari1+=vari2).dtype()+"|"+ \
        (varl1+=varc2).dtype()+"|"+ \
        (varl1+=varw2).dtype()+"|"+ \
        (varl1+=vari2).dtype()+"|"+ \
        (varl1+=varl2).dtype()+"|"+ \
        (varf1+=varc2).dtype()+"|"+ \
        (varf1+=varw2).dtype()+"|"+ \
        (varf1+=vari2).dtype()+"|"+ \
        (varf1+=varl2).dtype()+"|"+ \
        (varf1+=varf2).dtype()+"|"+ \
        (vars1+=varc2).dtype()+"|"+ \
        (vars1+=vars2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F").replace("string","S"))
      :main
      ]")
      execute_test(testnr,testname,"main","","d|51|2|52|3|4|53|4|5|6|54|5|6|7|8|ABC2|ABCABC|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|dF|dF|dF|dF|dF|dS|dS|END",false)

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)114):
      testname="Test operator -= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=50
        const dshort  _varw1=2
        const dint    _vari1=3
        const dlong   _varl1=4
        const dfloat  _varf1=5
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dfloat  varf1=_varf1
        dchar   varc2=1
        dshort  varw2=2
        dint    vari2=3
        dlong   varl2=4
        dfloat  varf2=5
        string result=""
        result+=(varc1-=varc2).tostr()+"|"; varc1=_varc1
        result+=(varw1-=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1-=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1-=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1-=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1-=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1-=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1-=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1-=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1-=varl2).tostr()+"|"; varl1=_varl1
        result+=(varf1-=varc2).tostr()+"|"; varf1=_varf1
        result+=(varf1-=varw2).tostr()+"|"; varf1=_varf1
        result+=(varf1-=vari2).tostr()+"|"; varf1=_varf1
        result+=(varf1-=varl2).tostr()+"|"; varf1=_varf1
        result+=(varf1-=varf2).tostr()+"|"; varf1=_varf1
        con.print((result+ \
        (varc1-=varc2).dtype()+"|"+ \
        (varw1-=varc2).dtype()+"|"+ \
        (varw1-=varw2).dtype()+"|"+ \
        (vari1-=varc2).dtype()+"|"+ \
        (vari1-=varw2).dtype()+"|"+ \
        (vari1-=vari2).dtype()+"|"+ \
        (varl1-=varc2).dtype()+"|"+ \
        (varl1-=varw2).dtype()+"|"+ \
        (varl1-=vari2).dtype()+"|"+ \
        (varl1-=varl2).dtype()+"|"+ \
        (varf1-=varc2).dtype()+"|"+ \
        (varf1-=varw2).dtype()+"|"+ \
        (varf1-=vari2).dtype()+"|"+ \
        (varf1-=varl2).dtype()+"|"+ \
        (varf1-=varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","1|1|0|2|1|0|3|2|1|0|4|3|2|1|0|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|dF|dF|dF|dF|dF|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)115):
      testname="Test operator *= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=50
        const dshort  _varw1=3
        const dint    _vari1=4
        const dlong   _varl1=5
        const dfloat  _varf1=6
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dfloat  varf1=_varf1
        dchar   varc2=2
        dshort  varw2=3
        dint    vari2=4
        dlong   varl2=5
        dfloat  varf2=6
        string result=""
        result+=(varc1*=varc2).tostr()+"|"; varc1=_varc1
        result+=(varw1*=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1*=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1*=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1*=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1*=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1*=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1*=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1*=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1*=varl2).tostr()+"|"; varl1=_varl1
        result+=(varf1*=varc2).tostr()+"|"; varf1=_varf1
        result+=(varf1*=varw2).tostr()+"|"; varf1=_varf1
        result+=(varf1*=vari2).tostr()+"|"; varf1=_varf1
        result+=(varf1*=varl2).tostr()+"|"; varf1=_varf1
        result+=(varf1*=varf2).tostr()+"|"; varf1=_varf1
        con.print((result+ \
        (varc1*=varc2).dtype()+"|"+ \
        (varw1*=varc2).dtype()+"|"+ \
        (varw1*=varw2).dtype()+"|"+ \
        (vari1*=varc2).dtype()+"|"+ \
        (vari1*=varw2).dtype()+"|"+ \
        (vari1*=vari2).dtype()+"|"+ \
        (varl1*=varc2).dtype()+"|"+ \
        (varl1*=varw2).dtype()+"|"+ \
        (varl1*=vari2).dtype()+"|"+ \
        (varl1*=varl2).dtype()+"|"+ \
        (varf1*=varc2).dtype()+"|"+ \
        (varf1*=varw2).dtype()+"|"+ \
        (varf1*=vari2).dtype()+"|"+ \
        (varf1*=varl2).dtype()+"|"+ \
        (varf1*=varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","d|6|9|8|12|16|10|15|20|25|12|18|24|30|36|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|dF|dF|dF|dF|dF|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)116):
      testname="Test operator /= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=100
        const dshort  _varw1=128
        const dint    _vari1=512
        const dlong   _varl1=1024
        const dfloat  _varf1=2048
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dfloat  varf1=_varf1
        dchar   varc2=2
        dshort  varw2=4
        dint    vari2=8
        dlong   varl2=16
        dfloat  varf2=32
        string result=""
        result+=(varc1/=varc2).tostr()+"|"; varc1=_varc1
        result+=(varw1/=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1/=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1/=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1/=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1/=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1/=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1/=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1/=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1/=varl2).tostr()+"|"; varl1=_varl1
        result+=(varf1/=varc2).tostr()+"|"; varf1=_varf1
        result+=(varf1/=varw2).tostr()+"|"; varf1=_varf1
        result+=(varf1/=vari2).tostr()+"|"; varf1=_varf1
        result+=(varf1/=varl2).tostr()+"|"; varf1=_varf1
        result+=(varf1/=varf2).tostr()+"|"; varf1=_varf1
        con.print((result+ \
        (varc1/=varc2).dtype()+"|"+ \
        (varw1/=varc2).dtype()+"|"+ \
        (varw1/=varw2).dtype()+"|"+ \
        (vari1/=varc2).dtype()+"|"+ \
        (vari1/=varw2).dtype()+"|"+ \
        (vari1/=vari2).dtype()+"|"+ \
        (varl1/=varc2).dtype()+"|"+ \
        (varl1/=varw2).dtype()+"|"+ \
        (varl1/=vari2).dtype()+"|"+ \
        (varl1/=varl2).dtype()+"|"+ \
        (varf1/=varc2).dtype()+"|"+ \
        (varf1/=varw2).dtype()+"|"+ \
        (varf1/=vari2).dtype()+"|"+ \
        (varf1/=varl2).dtype()+"|"+ \
        (varf1/=varf2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","2|64|32|256|128|64|512|256|128|64|1024|512|256|128|64|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|dF|dF|dF|dF|dF|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)117):
      testname="Test operator %= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=101
        const dshort  _varw1=131
        const dint    _vari1=517
        const dlong   _varl1=1031
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dchar   varc2=2
        dshort  varw2=4
        dint    vari2=8
        dlong   varl2=16
        string result=""
        result+=(varc1%=varc2).toint().tostr()+"|"; varc1=_varc1
        result+=(varw1%=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1%=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1%=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1%=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1%=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1%=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1%=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1%=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1%=varl2).tostr()+"|"; varl1=_varl1
        con.print((result+ \
        (varc1%=varc2).dtype()+"|"+ \
        (varw1%=varc2).dtype()+"|"+ \
        (varw1%=varw2).dtype()+"|"+ \
        (vari1%=varc2).dtype()+"|"+ \
        (vari1%=varw2).dtype()+"|"+ \
        (vari1%=vari2).dtype()+"|"+ \
        (varl1%=varc2).dtype()+"|"+ \
        (varl1%=varw2).dtype()+"|"+ \
        (varl1%=vari2).dtype()+"|"+ \
        (varl1%=varl2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","1|1|3|1|1|5|1|3|7|7|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)118):
      testname="Test operator <<= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=32
        const dshort  _varw1=64
        const dint    _vari1=128
        const dlong   _varl1=256
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dchar   varc2=1
        dshort  varw2=2
        dint    vari2=3
        dlong   varl2=4
        string result=""
        result+=(varc1<<=varc2).toint().tostr()+"|"; varc1=_varc1
        result+=(varw1<<=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1<<=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1<<=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1<<=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1<<=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1<<=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1<<=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1<<=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1<<=varl2).tostr()+"|"; varl1=_varl1
        con.print((result+ \
        (varc1<<=varc2).dtype()+"|"+ \
        (varw1<<=varc2).dtype()+"|"+ \
        (varw1<<=varw2).dtype()+"|"+ \
        (vari1<<=varc2).dtype()+"|"+ \
        (vari1<<=varw2).dtype()+"|"+ \
        (vari1<<=vari2).dtype()+"|"+ \
        (varl1<<=varc2).dtype()+"|"+ \
        (varl1<<=varw2).dtype()+"|"+ \
        (varl1<<=vari2).dtype()+"|"+ \
        (varl1<<=varl2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","64|128|256|256|512|1024|512|1024|2048|4096|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)119):
      testname="Test operator >>= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      .implem
      main:
        const dchar   _varc1=64
        const dshort  _varw1=128
        const dint    _vari1=256
        const dlong   _varl1=512
        dchar   varc1=_varc1
        dshort  varw1=_varw1
        dint    vari1=_vari1
        dlong   varl1=_varl1
        dchar   varc2=1
        dshort  varw2=2
        dint    vari2=3
        dlong   varl2=4
        string result=""
        result+=(varc1>>=varc2).toint().tostr()+"|"; varc1=_varc1
        result+=(varw1>>=varc2).tostr()+"|"; varw1=_varw1
        result+=(varw1>>=varw2).tostr()+"|"; varw1=_varw1
        result+=(vari1>>=varc2).tostr()+"|"; vari1=_vari1
        result+=(vari1>>=varw2).tostr()+"|"; vari1=_vari1
        result+=(vari1>>=vari2).tostr()+"|"; vari1=_vari1
        result+=(varl1>>=varc2).tostr()+"|"; varl1=_varl1
        result+=(varl1>>=varw2).tostr()+"|"; varl1=_varl1
        result+=(varl1>>=vari2).tostr()+"|"; varl1=_varl1
        result+=(varl1>>=varl2).tostr()+"|"; varl1=_varl1
        con.print((result+ \
        (varc1>>=varc2).dtype()+"|"+ \
        (varw1>>=varc2).dtype()+"|"+ \
        (varw1>>=varw2).dtype()+"|"+ \
        (vari1>>=varc2).dtype()+"|"+ \
        (vari1>>=varw2).dtype()+"|"+ \
        (vari1>>=vari2).dtype()+"|"+ \
        (varl1>>=varc2).dtype()+"|"+ \
        (varl1>>=varw2).dtype()+"|"+ \
        (varl1>>=vari2).dtype()+"|"+ \
        (varl1>>=varl2).dtype()+"|"+ \
        "END").replace(".000000","").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F"))
      :main
      ]")
      execute_test(testnr,testname,"main","","32|64|32|128|64|32|256|128|64|32|dC|dW|dW|dI|dI|dI|dL|dL|dL|dL|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)120):
      testname="Test operator &= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1&=varc2).toint().tostr()+(varc1&=varc2).dtype()+"|"+ \ 
        (varw1&=varw2).tostr()+(varw1&=varw2).dtype()+"|"+ \ 
        (vari1&=vari2).tostr()+(vari1&=vari2).dtype()+"|"+ \ 
        (varl1&=varl2).tostr()+(varl1&=varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","1dC|1dW|1dI|1dL|END",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)121):
      testname="Test operator ^= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1^=varc2).toint().tostr()+(varc1^=varc2).dtype()+"|"+ \ 
        (varw1^=varw2).tostr()+(varw1^=varw2).dtype()+"|"+ \ 
        (vari1^=vari2).tostr()+(vari1^=vari2).dtype()+"|"+ \ 
        (varl1^=varl2).tostr()+(varl1^=varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","126dC|32766dW|2147483646dI|9223372036854775806dL|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)122):
      testname="Test operator |= with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      .implem
      main:
        dchar  varc1=0x0F
        dshort varw1=0x00FF
        dint   vari1=0x0000FFFF
        dlong  varl1=0x00000000FFFFFFFF
        dchar  varc2=0x71
        dshort varw2=0x7F01
        dint   vari2=0x7FFF0001
        dlong  varl2=0x7FFFFFFF00000001
        con.print(( \
        (varc1|=varc2).toint().tostr()+(varc1|=varc2).dtype()+"|"+ \ 
        (varw1|=varw2).tostr()+(varw1|=varw2).dtype()+"|"+ \ 
        (vari1|=vari2).tostr()+(vari1|=vari2).dtype()+"|"+ \ 
        (varl1|=varl2).tostr()+(varl1|=varl2).dtype()+"|"+ \ 
        "END").replace("char","C").replace("short","W").replace("int","I").replace("long","L"))
      :main
      ]")
      execute_test(testnr,testname,"main","","127dC|32767dW|2147483647dI|9223372036854775807dL|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)123):
      testname="Test operator -> with all allowed master type combinations"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class myclass:
        int i
        string s
        string tostr()
      :class
      .implem
      fmem string myclass.tostr():
        return "("+self.i.tostr()+","+self.s+")"
      :fmem
      main:
        dbool   varb1=false
        dchar   varc1=50
        dshort  varw1=3
        dint    vari1=4
        dlong   varl1=5
        dfloat  varf1=6
        dstring vars1="ABC"
        enutype vare1=enutype.enu1
        myclass vara1=(myclass){1,"ZYX"}
        con.print(( \
        (varb1=varb1||true       ->varb1&&false      ).tostr()+(varb1=varb1||true).dtype()+"|"+ \
        (varc1=varc1+1           ->varc1+1           ).toint().tostr()+(varc1=varc1+1).dtype()+"|"+ \   
        (varw1=varc1+1           ->varw1+1           ).tostr()+(varw1=varc1+1).dtype()+"|"+ \           
        (varw1=varw1+1           ->varw1+1           ).tostr()+(varw1=varw1+1).dtype()+"|"+ \           
        (vari1=varc1+1           ->vari1+1           ).tostr()+(vari1=varc1+1).dtype()+"|"+ \           
        (vari1=varw1+1           ->vari1+1           ).tostr()+(vari1=varw1+1).dtype()+"|"+ \           
        (vari1=vari1+1           ->vari1+1           ).tostr()+(vari1=vari1+1).dtype()+"|"+ \           
        (varl1=varc1+1           ->varl1+1           ).tostr()+(varl1=varc1+1).dtype()+"|"+ \           
        (varl1=varw1+1           ->varl1+1           ).tostr()+(varl1=varw1+1).dtype()+"|"+ \           
        (varl1=vari1+1           ->varl1+1           ).tostr()+(varl1=vari1+1).dtype()+"|"+ \           
        (varl1=varl1+1           ->varl1+1           ).tostr()+(varl1=varl1+1).dtype()+"|"+ \           
        (varf1=varc1+1           ->varf1+1           ).tostr()+(varf1=varc1+1).dtype()+"|"+ \           
        (varf1=varw1+1           ->varf1+1           ).tostr()+(varf1=varw1+1).dtype()+"|"+ \           
        (varf1=vari1+1           ->varf1+1           ).tostr()+(varf1=vari1+1).dtype()+"|"+ \           
        (varf1=varl1+1           ->varf1+1           ).tostr()+(varf1=varl1+1).dtype()+"|"+ \           
        (varf1=varf1+1           ->varf1+1           ).tostr()+(varf1=varf1+1).dtype()+"|"+ \           
        (vars1=vars1+"DEF"       ->vars1+"GHI"       )+(vars1=vars1+"DEF").dtype()+"|"+ \           
        (vare1=enutype.enu2      ->enutype.enu3      ).toint().tostr()+(vare1=enutype.enu2).dtype()+"|"+ \
        (vara1=(myclass){2,"PQR"}->(myclass){3,"UVW"}).tostr()+(vara1).dtype()+"|"+ \           
        "END").replace(".000000","").replace("bool","B").replace("true","T").replace("false","F").replace("char","C").replace("short","W").replace("int","I").replace("long","L").replace("float","F").replace("string","S"))
      :main
      ]")
      execute_test(testnr,testname,"main","","FdB|52dC|54dW|55dW|54dI|57dI|58dI|54dL|57dL|60dL|61dL|54dF|57dF|60dF|63dF|64dF|ABCDEFGHIdS|2enutype|(3,UVW)myclass|END",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)124):
      testname="Test ternary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int x
        int y
        int z
        int i=1
        int j=2
        x=1; y=0; i=1; j=2; z=(x==1?i=(y==0?3:4):j=(y!=0?5:6))
        con.print(x.tostr()+y.tostr()+"("+i.tostr()+j.tostr()+")"+z.tostr()+"|")
        x=0; y=1; i=1; j=2; z=(x==1?i=(y==0?3:4):j=(y!=0?5:6))
        con.print(x.tostr()+y.tostr()+"("+i.tostr()+j.tostr()+")"+z.tostr()+"|")
        x=1; y=1; i=1; j=2; z=(x==1?i=(y==0?3:4):j=(y!=0?5:6))
        con.print(x.tostr()+y.tostr()+"("+i.tostr()+j.tostr()+")"+z.tostr()+"|")
        x=0; y=0; i=1; j=2; z=(x==1?i=(y==0?3:4):j=(y!=0?5:6))
        con.print(x.tostr()+y.tostr()+"("+i.tostr()+j.tostr()+")"+z.tostr()+"|")
      :main
      ]")
      execute_test(testnr,testname,"main","","10(32)3|01(15)5|11(42)4|00(16)6|",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)125):
      testname="Test fix array subcripts 1 to 5 dimensions"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class myclass:
        int var1
        int var2
        int var3
      :class
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      type enutype as denu
      type myclass as dclass
      type char[3] as darfix
      type char[] as dardyn
      string tprint(dclass v)
      string xprint(darfix v)
      string dprint(dardyn v)
      .implem
      func string tprint(dclass v):
        return v.var1.tostr()+v.var2.tostr()+v.var3.tostr()
      :func
      func string xprint(darfix v):
        return v[0].tostr()+v[1].tostr()+v[2].tostr()
      :func
      func string dprint(dardyn v):
        return v[0].tostr()+v[1].tostr()+v[2].tostr()
      :func
      main:
        int i
        int j
        int k
        int l
        int m
        string result=""
        
        var barr1=(dbool[3]){true,false,true}
        var carr1=(dchar[3]){1,2,3}
        var warr1=(dshort[3]){1,2,3}
        var iarr1=(dint[3]){1,2,3}
        var larr1=(dlong[3]){1,2,3}
        var farr1=(dfloat[3]){1,2,3}
        var sarr1=(dstring[3]){"1","2","3"}
        var earr1=(denu[3]){denu.enu1,denu.enu2,denu.enu3}
        var tarr1=(dclass[3]){{1,2,3},{1,2,3},{1,2,3}}
        var xarr1=(darfix[3]){{'a','b','c'},{'a','b','c'},{'a','b','c'}}
        var darr1=(dardyn[3]){{'a','b','c'},{'a','b','c'},{'a','b','c'}}
        for(i=0 if i<3 do i++): result+=barr1[i].tostr().replace("true","T").replace("false","F"); :for result+="|"
        for(i=0 if i<3 do i++): result+=carr1[i].toint().tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=warr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=iarr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=larr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=farr1[i].tostr().replace(".000000",""); :for result+="|"
        for(i=0 if i<3 do i++): result+=sarr1[i]; :for result+="|"
        for(i=0 if i<3 do i++): result+=earr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=tprint(tarr1[i]); :for result+="|"
        for(i=0 if i<3 do i++): result+=xprint(xarr1[i]); :for result+="|"
        for(i=0 if i<3 do i++): result+=dprint(darr1[i]); :for result+="|"
        result+="***"

        var barr2=(dbool[3,3]){{true,false,true},{true,false,true},{true,false,true}}
        var carr2=(dchar[3,3]){{1,2,3},{1,2,3},{1,2,3}}
        var warr2=(dshort[3,3]){{1,2,3},{1,2,3},{1,2,3}}
        var iarr2=(dint[3,3]){{1,2,3},{1,2,3},{1,2,3}}
        var larr2=(dlong[3,3]){{1,2,3},{1,2,3},{1,2,3}}
        var farr2=(dfloat[3,3]){{1,2,3},{1,2,3},{1,2,3}}
        var sarr2=(dstring[3,3]){{"1","2","3"},{"1","2","3"},{"1","2","3"}}
        var earr2=(denu[3,3]){{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}
        var tarr2=(dclass[3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var xarr2=(darfix[3,3]){{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}
        var darr2=(dardyn[3,3]){{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=barr2[i,j].tostr().replace("true","T").replace("false","F"); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=carr2[i,j].toint().tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=warr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=iarr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=larr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=farr2[i,j].tostr().replace(".000000",""); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=sarr2[i,j]; :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=earr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=tprint(tarr2[i,j]); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=xprint(xarr2[i,j]); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=dprint(darr2[i,j]); :for :for result+="|"
        result+="***"

        var barr3=(dbool[3,3,3]){{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}
        var carr3=(dchar[3,3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var warr3=(dshort[3,3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var iarr3=(dint[3,3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var larr3=(dlong[3,3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var farr3=(dfloat[3,3,3]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var sarr3=(dstring[3,3,3]){{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}
        var earr3=(denu[3,3,3]){{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}
        var tarr3=(dclass[3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var xarr3=(darfix[3,3,3]){{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}
        var darr3=(dardyn[3,3,3]){{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=barr3[i,j,k].tostr().replace("true","T").replace("false","F"); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=carr3[i,j,k].toint().tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=warr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=iarr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=larr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=farr3[i,j,k].tostr().replace(".000000",""); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=sarr3[i,j,k]; :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=earr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=tprint(tarr3[i,j,k]); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=xprint(xarr3[i,j,k]); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=dprint(darr3[i,j,k]); :for :for :for result+="|"
        result+="***"

        var barr4=(dbool[3,3,3,3]){{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}}
        var carr4=(dchar[3,3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var warr4=(dshort[3,3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var iarr4=(dint[3,3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var larr4=(dlong[3,3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var farr4=(dfloat[3,3,3,3]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var sarr4=(dstring[3,3,3,3]){{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}}
        var earr4=(denu[3,3,3,3]){{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}}
        var tarr4=(dclass[3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var xarr4=(darfix[3,3,3,3]){{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}
        var darr4=(dardyn[3,3,3,3]){{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=barr4[i,j,k,l].tostr().replace("true","T").replace("false","F"); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=carr4[i,j,k,l].toint().tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=warr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=iarr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=larr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=farr4[i,j,k,l].tostr().replace(".000000",""); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=sarr4[i,j,k,l]; :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=earr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=tprint(tarr4[i,j,k,l]); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=xprint(xarr4[i,j,k,l]); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=dprint(darr4[i,j,k,l]); :for :for :for :for result+="|"
        result+="***"

        var barr5=(dbool[3,3,3,3,3]){{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}},{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}},{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}}}
        var carr5=(dchar[3,3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var warr5=(dshort[3,3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var iarr5=(dint[3,3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var larr5=(dlong[3,3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var farr5=(dfloat[3,3,3,3,3]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var sarr5=(dstring[3,3,3,3,3]){{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}},{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}},{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}}}
        var earr5=(denu[3,3,3,3,3]){{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}},{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}},{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}}}
        var tarr5=(dclass[3,3,3,3,3]){{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}},{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}},{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}}
        var xarr5=(darfix[3,3,3,3,3]){{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}}
        var darr5=(dardyn[3,3,3,3,3]){{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=barr5[i,j,k,l,m].tostr().replace("true","T").replace("false","F"); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=carr5[i,j,k,l,m].toint().tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=warr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=iarr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=larr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=farr5[i,j,k,l,m].tostr().replace(".000000",""); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=sarr5[i,j,k,l,m]; :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=earr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=tprint(tarr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=xprint(xarr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=dprint(darr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        result+="***"

        con.print(result)

      :main
      ]")
      execute_test(testnr,testname,"main","", \
      "TFT|123|123|123|123|123|123|012|123123123|abcabcabc|abcabcabc|***TFTTFTTFT|123123123|123123123|123123123|123123123|123123123|123123123|012012012|123123123123123123123123123|abc"+ \
      "abcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabc|***TFTTFTTFTTFTTFTTFTTFTTFTTFT|123123123123123123123123123|123123123123123123123123123|123123123123123123123123123|12312312"+ \
      "3123123123123123123|123123123123123123123123123|123123123123123123123123123|012012012012012012012012012|123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|**"+ \
      "*TFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123|012012012012012012012012012012012012012012012012012012012012012012012012012012012|12312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|***TFTTFTTFTTFTTFTT"+ \
      "FTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT"+ \
      "TFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT|1231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123|12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|1231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123123123123123123123123123123123|1231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|01201201201201201201201201201201201201201201201201201201201201201201"+ \
      "2012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012|"+ \
      "12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "3123123123123123123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|***",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)126):
      testname="Test dyn array subcripts 1 to 5 dimension"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class myclass:
        int var1
        int var2
        int var3
      :class
      type bool as dbool
      type char as dchar
      type short as dshort
      type int as dint
      type long as dlong
      type float as dfloat
      type string as dstring
      type enutype as denu
      type myclass as dclass
      type char[3] as darfix
      type char[] as dardyn
      string tprint(dclass v)
      string xprint(darfix v)
      string dprint(dardyn v)
      .implem
      func string tprint(dclass v):
        return v.var1.tostr()+v.var2.tostr()+v.var3.tostr()
      :func
      func string xprint(darfix v):
        return v[0].tostr()+v[1].tostr()+v[2].tostr()
      :func
      func string dprint(dardyn v):
        return v[0].tostr()+v[1].tostr()+v[2].tostr()
      :func
      main:
        int i
        int j
        int k
        int l
        int m
        string result=""
        
        var barr1=(dbool[]){true,false,true}
        var carr1=(dchar[]){1,2,3}
        var warr1=(dshort[]){1,2,3}
        var iarr1=(dint[]){1,2,3}
        var larr1=(dlong[]){1,2,3}
        var farr1=(dfloat[]){1,2,3}
        var sarr1=(dstring[]){"1","2","3"}
        var earr1=(denu[]){denu.enu1,denu.enu2,denu.enu3}
        var tarr1=(dclass[]){{1,2,3},{1,2,3},{1,2,3}}
        var xarr1=(darfix[]){{'a','b','c'},{'a','b','c'},{'a','b','c'}}
        var darr1=(dardyn[]){{'a','b','c'},{'a','b','c'},{'a','b','c'}}
        for(i=0 if i<3 do i++): result+=barr1[i].tostr().replace("true","T").replace("false","F"); :for result+="|"
        for(i=0 if i<3 do i++): result+=carr1[i].toint().tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=warr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=iarr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=larr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=farr1[i].tostr().replace(".000000",""); :for result+="|"
        for(i=0 if i<3 do i++): result+=sarr1[i]; :for result+="|"
        for(i=0 if i<3 do i++): result+=earr1[i].tostr(); :for result+="|"
        for(i=0 if i<3 do i++): result+=tprint(tarr1[i]); :for result+="|"
        for(i=0 if i<3 do i++): result+=xprint(xarr1[i]); :for result+="|"
        for(i=0 if i<3 do i++): result+=dprint(darr1[i]); :for result+="|"
        result+="***"

        var barr2=(dbool[,]){{true,false,true},{true,false,true},{true,false,true}}
        var carr2=(dchar[,]){{1,2,3},{1,2,3},{1,2,3}}
        var warr2=(dshort[,]){{1,2,3},{1,2,3},{1,2,3}}
        var iarr2=(dint[,]){{1,2,3},{1,2,3},{1,2,3}}
        var larr2=(dlong[,]){{1,2,3},{1,2,3},{1,2,3}}
        var farr2=(dfloat[,]){{1,2,3},{1,2,3},{1,2,3}}
        var sarr2=(dstring[,]){{"1","2","3"},{"1","2","3"},{"1","2","3"}}
        var earr2=(denu[,]){{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}
        var tarr2=(dclass[,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var xarr2=(darfix[,]){{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}
        var darr2=(dardyn[,]){{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=barr2[i,j].tostr().replace("true","T").replace("false","F"); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=carr2[i,j].toint().tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=warr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=iarr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=larr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=farr2[i,j].tostr().replace(".000000",""); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=sarr2[i,j]; :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=earr2[i,j].tostr(); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=tprint(tarr2[i,j]); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=xprint(xarr2[i,j]); :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=dprint(darr2[i,j]); :for :for result+="|"
        result+="***"

        var barr3=(dbool[,,]){{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}
        var carr3=(dchar[,,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var warr3=(dshort[,,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var iarr3=(dint[,,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var larr3=(dlong[,,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var farr3=(dfloat[,,]){{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}
        var sarr3=(dstring[,,]){{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}
        var earr3=(denu[,,]){{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}
        var tarr3=(dclass[,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var xarr3=(darfix[,,]){{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}
        var darr3=(dardyn[,,]){{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=barr3[i,j,k].tostr().replace("true","T").replace("false","F"); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=carr3[i,j,k].toint().tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=warr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=iarr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=larr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=farr3[i,j,k].tostr().replace(".000000",""); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=sarr3[i,j,k]; :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=earr3[i,j,k].tostr(); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=tprint(tarr3[i,j,k]); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=xprint(xarr3[i,j,k]); :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=dprint(darr3[i,j,k]); :for :for :for result+="|"
        result+="***"

        var barr4=(dbool[,,,]){{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}}
        var carr4=(dchar[,,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var warr4=(dshort[,,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var iarr4=(dint[,,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var larr4=(dlong[,,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var farr4=(dfloat[,,,]){{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}
        var sarr4=(dstring[,,,]){{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}}
        var earr4=(denu[,,,]){{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}}
        var tarr4=(dclass[,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var xarr4=(darfix[,,,]){{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}
        var darr4=(dardyn[,,,]){{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=barr4[i,j,k,l].tostr().replace("true","T").replace("false","F"); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=carr4[i,j,k,l].toint().tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=warr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=iarr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=larr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=farr4[i,j,k,l].tostr().replace(".000000",""); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=sarr4[i,j,k,l]; :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=earr4[i,j,k,l].tostr(); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=tprint(tarr4[i,j,k,l]); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=xprint(xarr4[i,j,k,l]); :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=dprint(darr4[i,j,k,l]); :for :for :for :for result+="|"
        result+="***"

        var barr5=(dbool[,,,,]){{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}},{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}},{{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}},{{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}},{{true,false,true},{true,false,true},{true,false,true}}}}}
        var carr5=(dchar[,,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var warr5=(dshort[,,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var iarr5=(dint[,,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var larr5=(dlong[,,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var farr5=(dfloat[,,,,]){{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}
        var sarr5=(dstring[,,,,]){{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}},{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}},{{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}},{{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}},{{"1","2","3"},{"1","2","3"},{"1","2","3"}}}}}
        var earr5=(denu[,,,,]){{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}},{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}},{{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}},{{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}},{{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3},{denu.enu1,denu.enu2,denu.enu3}}}}}
        var tarr5=(dclass[,,,,]){{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}},{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}},{{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}},{{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}},{{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}},{{1,2,3},{1,2,3},{1,2,3}}}}}}
        var xarr5=(darfix[,,,,]){{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}}
        var darr5=(dardyn[,,,,]){{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}},{{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}},{{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}},{{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}},{{'a','b','c'},{'a','b','c'},{'a','b','c'}}}}}}
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=barr5[i,j,k,l,m].tostr().replace("true","T").replace("false","F"); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=carr5[i,j,k,l,m].toint().tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=warr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=iarr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=larr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=farr5[i,j,k,l,m].tostr().replace(".000000",""); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=sarr5[i,j,k,l,m]; :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=earr5[i,j,k,l,m].tostr(); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=tprint(tarr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=xprint(xarr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=dprint(darr5[i,j,k,l,m]); :for :for :for :for :for result+="|"
        result+="***"

        con.print(result)

      :main
      ]")
      execute_test(testnr,testname,"main","", \
      "TFT|123|123|123|123|123|123|012|123123123|abcabcabc|abcabcabc|***TFTTFTTFT|123123123|123123123|123123123|123123123|123123123|123123123|012012012|123123123123123123123123123|abc"+ \
      "abcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabc|***TFTTFTTFTTFTTFTTFTTFTTFTTFT|123123123123123123123123123|123123123123123123123123123|123123123123123123123123123|12312312"+ \
      "3123123123123123123|123123123123123123123123123|123123123123123123123123123|012012012012012012012012012|123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|**"+ \
      "*TFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123|012012012012012012012012012012012012012012012012012012012012012012012012012012012|12312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|***TFTTFTTFTTFTTFTT"+ \
      "FTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT"+ \
      "TFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFTTFT|1231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|12312312312312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123|12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "3123123123123123123123123123123123123123123123123123123123123123123123123123123|123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|1231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "123123123123123123123123123123123123123|1231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123|01201201201201201201201201201201201201201201201201201201201201201201"+ \
      "2012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012012|"+ \
      "12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "31231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231231"+ \
      "23123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123"+ \
      "12312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312312"+ \
      "3123123123123123123123123|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"+ \
      "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"+ \
      "cabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca"+ \
      "bcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc|***",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)127):
      testname="Test string indexing"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int i
        string str1="Hello this is a string!"
        string str2=""
        string str3=""
        for(i=0 if i<str1.len() do i++):
          str2+=str1[i]
          str1[i]=str2[i].upper()
          str3+=str1[i].lower()
        :for
        con.print(str1+str2+str3)
      :main
      ]")
      execute_test(testnr,testname,"main","","HELLO THIS IS A STRING!Hello this is a string!hello this is a string!",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)128):
      testname="Pass litteral values all master types and defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      string f01(bool p)
      string f02(char p)
      string f03(short p)
      string f04(int p)
      string f05(long p)
      string f06(float p)
      string f07(string p)
      string f08(enutype p)
      string f09(classtype p)
      string f10(char[3] p)
      string f11(char[] p)
      string f12(type1 p)
      string f13(type2 p)
      string f14(type3 p)
      string f15(type4 p)
      string f16(type5 p)
      string f17(type6 p)
      string f18(type7 p)
      string f19(type8 p)
      string f20(type9 p)
      string f21(type10 p)
      string f22(type11 p)
      .implem
      func string f01(bool p): return p.tostr(); :func
      func string f02(char p): return p.tostr(); :func
      func string f03(short p): return p.tostr(); :func
      func string f04(int p): return p.tostr(); :func
      func string f05(long p): return p.tostr(); :func
      func string f06(float p): return p.tostr().replace(".000000",""); :func
      func string f07(string p): return p; :func
      func string f08(enutype p): return p.tostr(); :func
      func string f09(classtype p): return p.var1.tostr()+p.var2.tostr()+p.var3.tostr(); :func
      func string f10(char[3] p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f11(char[] p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f12(type1 p): return p.tostr(); :func
      func string f13(type2 p): return p.tostr(); :func
      func string f14(type3 p): return p.tostr(); :func
      func string f15(type4 p): return p.tostr(); :func
      func string f16(type5 p): return p.tostr(); :func
      func string f17(type6 p): return p.tostr().replace(".000000",""); :func
      func string f18(type7 p): return p; :func
      func string f19(type8 p): return p.tostr(); :func
      func string f20(type9 p): return p.var1.tostr()+p.var2.tostr()+p.var3.tostr(); :func
      func string f21(type10 p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f22(type11 p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      main:
        string test= \
        f01(true)+"|"+ \
        f02('a')+"|"+ \
        f03(32767S)+"|"+ \
        f04((int)2147483647)+"|"+ \
        f05((long)6E9)+"|"+ \
        f06(-1.1E-5)+"|"+ \
        f07("hello")+"|"+ \
        f08(enutype.enu1)+"|"+ \
        f09((classtype){'a','a','a'})+"|"+ \
        f10((char[3]){'a','a','a'})+"|"+ \
        f11((char[]){'a','a','a','a'})+"|"+ \
        f12((type1)true)+"|"+ \
        f13('a')+"|"+ \
        f14(32767S)+"|"+ \
        f15((int)2147483647)+"|"+ \
        f16((long)6E9)+"|"+ \
        f17(-1.1E-5)+"|"+ \
        f18("hello")+"|"+ \
        f19(type8.enu1)+"|"+ \
        f20((type9){'a','a','a'})+"|"+ \
        f21((type10){'a','a','a'})+"|"+ \
        f22((type11){'a','a','a','a'})+"|";
        con.print(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","true|a|32767|2147483647|6000000000|-0.000011|hello|0|979797|aaa|aaa|true|a|32767|2147483647|6000000000|-0.000011|hello|0|979797|aaa|aaa|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)129):
      testname="Pass by value all master types and defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      string f01(bool p)
      string f02(char p)
      string f03(short p)
      string f04(int p)
      string f05(long p)
      string f06(float p)
      string f07(string p)
      string f08(enutype p)
      string f09(classtype p)
      string f10(char[3] p)
      string f11(char[] p)
      string f12(type1 p)
      string f13(type2 p)
      string f14(type3 p)
      string f15(type4 p)
      string f16(type5 p)
      string f17(type6 p)
      string f18(type7 p)
      string f19(type8 p)
      string f20(type9 p)
      string f21(type10 p)
      string f22(type11 p)
      .implem
      func string f01(bool p): return p.tostr(); :func
      func string f02(char p): return p.tostr(); :func
      func string f03(short p): return p.tostr(); :func
      func string f04(int p): return p.tostr(); :func
      func string f05(long p): return p.tostr(); :func
      func string f06(float p): return p.tostr().replace(".000000",""); :func
      func string f07(string p): return p; :func
      func string f08(enutype p): return p.tostr(); :func
      func string f09(classtype p): return p.var1.tostr()+p.var2.tostr()+p.var3.tostr(); :func
      func string f10(char[3] p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f11(char[] p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f12(type1 p): return p.tostr(); :func
      func string f13(type2 p): return p.tostr(); :func
      func string f14(type3 p): return p.tostr(); :func
      func string f15(type4 p): return p.tostr(); :func
      func string f16(type5 p): return p.tostr(); :func
      func string f17(type6 p): return p.tostr().replace(".000000",""); :func
      func string f18(type7 p): return p; :func
      func string f19(type8 p): return p.tostr(); :func
      func string f20(type9 p): return p.var1.tostr()+p.var2.tostr()+p.var3.tostr(); :func
      func string f21(type10 p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      func string f22(type11 p): return p[0].tostr()+p[1].tostr()+p[2].tostr(); :func
      main:
        bool var1=true
        char var2='a'
        short var3=32767S
        int var4=(int)2147483647
        long var5=(long)6E9
        float var6=-1.1E-5
        string var7="hello"
        enutype var8=enutype.enu1
        classtype var9=(classtype){'a','a','a'}
        char[3] var10=(char[3]){'a','a','a'}
        char[] var11=(char[]){'a','a','a','a'}
        type1 tvar1=true
        type2 tvar2='a'
        type3 tvar3=32767S
        type4 tvar4=(int)2147483647
        type5 tvar5=(long)6E9
        type6 tvar6=-1.1E-5
        type7 tvar7="hello"
        type8 tvar8=type8.enu1
        type9 tvar9=(type9){'a','a','a'}
        type10 tvar10=(type10){'a','a','a'}
        type11 tvar11=(type11){'a','a','a','a'}
        string test= \
        f01(var1)+"|"+ \
        f02(var2)+"|"+ \
        f03(var3)+"|"+ \
        f04(var4)+"|"+ \
        f05(var5)+"|"+ \
        f06(var6)+"|"+ \
        f07(var7)+"|"+ \
        f08(var8)+"|"+ \
        f09(var9)+"|"+ \
        f10(var10)+"|"+ \
        f11(var11)+"|"+ \
        f12(tvar1)+"|"+ \
        f13(tvar2)+"|"+ \
        f14(tvar3)+"|"+ \
        f15(tvar4)+"|"+ \
        f16(tvar5)+"|"+ \
        f17(tvar6)+"|"+ \
        f18(tvar7)+"|"+ \
        f19(tvar8)+"|"+ \
        f20(tvar9)+"|"+ \
        f21(tvar10)+"|"+ \
        f22(tvar11)+"|";
        con.print(test)
      :main
      ]")
      execute_test(testnr,testname,"main","","true|a|32767|2147483647|6000000000|-0.000011|hello|0|979797|aaa|aaa|true|a|32767|2147483647|6000000000|-0.000011|hello|0|979797|aaa|aaa|",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)130):
      testname="Pass by ref all master types and defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      string f01(ref bool p)
      string f02(ref char p)
      string f03(ref short p)
      string f04(ref int p)
      string f05(ref long p)
      string f06(ref float p)
      string f07(ref string p)
      string f08(ref enutype p)
      string f09(ref classtype p)
      string f10(ref char[3] p)
      string f11(ref char[] p)
      string f12(ref type1 p)
      string f13(ref type2 p)
      string f14(ref type3 p)
      string f15(ref type4 p)
      string f16(ref type5 p)
      string f17(ref type6 p)
      string f18(ref type7 p)
      string f19(ref type8 p)
      string f20(ref type9 p)
      string f21(ref type10 p)
      string f22(ref type11 p)
      .implem
      func string f01(ref bool      p): bool      v=p; p=true;                      return v.tostr();                                           :func
      func string f02(ref char      p): char      v=p; p='a';                       return v.tostr();                                           :func
      func string f03(ref short     p): short     v=p; p=32767S;                    return v.tostr();                                           :func
      func string f04(ref int       p): int       v=p; p=(int)2147483647;           return v.tostr();                                           :func
      func string f05(ref long      p): long      v=p; p=(long)6E9;                 return v.tostr();                                           :func
      func string f06(ref float     p): float     v=p; p=-1.1E-5;                   return v.tostr().replace(".000000","");                     :func
      func string f07(ref string    p): string    v=p; p="hello";                   return v;                                                   :func
      func string f08(ref enutype   p): enutype   v=p; p=enutype.enu3;              return v.tostr();                                           :func
      func string f09(ref classtype p): classtype v=p; p=(classtype){'a','b','c'};  return v.var1.tostr()+v.var2.tostr()+v.var3.tostr();        :func
      func string f10(ref char[3]   p): char[3]   v=p; p=(char[3]){'d','e','f'};    return v[0].tostr()+v[1].tostr()+v[2].tostr();              :func
      func string f11(ref char[]    p): char[]    v=p; p=(char[]){'g','h','i','j'}; return v[0].tostr()+v[1].tostr()+v[2].tostr()+v[3].tostr(); :func
      func string f12(ref type1     p): type1     v=p; p=true;                      return v.tostr();                                           :func
      func string f13(ref type2     p): type2     v=p; p='b';                       return v.tostr();                                           :func
      func string f14(ref type3     p): type3     v=p; p=32766S;                    return v.tostr();                                           :func
      func string f15(ref type4     p): type4     v=p; p=(int)2147483646;           return v.tostr();                                           :func
      func string f16(ref type5     p): type5     v=p; p=(long)5E9;                 return v.tostr();                                           :func
      func string f17(ref type6     p): type6     v=p; p=-3.2E-5;                   return v.tostr().replace(".000000","");                     :func
      func string f18(ref type7     p): type7     v=p; p="man";                     return v;                                                   :func
      func string f19(ref type8     p): type8     v=p; p=type8.enu3;                return v.tostr();                                           :func
      func string f20(ref type9     p): type9     v=p; p=(type9){'k','l','m'};      return v.var1.tostr()+v.var2.tostr()+v.var3.tostr();        :func
      func string f21(ref type10    p): type10    v=p; p=(type10){'n','o','p'};     return v[0].tostr()+v[1].tostr()+v[2].tostr();              :func
      func string f22(ref type11    p): type11    v=p; p=(type11){'q','r','s','t'}; return v[0].tostr()+v[1].tostr()+v[2].tostr()+v[3].tostr(); :func
      main:
        bool var1=false
        char var2='0'
        short var3=1
        int var4=2
        long var5=3
        float var6=4
        string var7="5"
        enutype var8=enutype.enu1
        classtype var9=(classtype){'6','7','8'}
        char[3] var10=(char[3]){'9','A','B'}
        char[] var11=(char[]){'C','D','E','F'}
        type1 tvar1=false
        type2 tvar2='1'
        type3 tvar3=2
        type4 tvar4=3
        type5 tvar5=4
        type6 tvar6=5
        type7 tvar7="6"
        type8 tvar8=type8.enu2
        type9 tvar9=(type9){'8','9','A'}
        type10 tvar10=(type10){'B','C','D'}
        type11 tvar11=(type11){'E','F','G','H'}
        string result=""
        result+=var1.tostr()+"|"
        result+=var2.tostr()+"|"
        result+=var3.tostr()+"|"
        result+=var4.tostr()+"|"
        result+=var5.tostr()+"|"
        result+=var6.tostr().replace(".000000","")+"|"
        result+=var7+"|"
        result+=var8.tostr()+"|"
        result+=var9.var1.tostr()+var9.var2.tostr()+var9.var3.tostr()+"|"
        result+=var10[0].tostr()+var10[1].tostr()+var10[2].tostr()+"|"
        result+=var11[0].tostr()+var11[1].tostr()+var11[2].tostr()+var11[3].tostr()+"|"
        result+=tvar1.tostr()+"|"
        result+=tvar2.tostr()+"|"
        result+=tvar3.tostr()+"|"
        result+=tvar4.tostr()+"|"
        result+=tvar5.tostr()+"|"
        result+=tvar6.tostr().replace(".000000","")+"|"
        result+=tvar7+"|"
        result+=tvar8.tostr()+"|"
        result+=tvar9.var1.tostr()+tvar9.var2.tostr()+tvar9.var3.tostr()+"|"
        result+=tvar10[0].tostr()+tvar10[1].tostr()+tvar10[2].tostr()+"|"
        result+=tvar11[0].tostr()+tvar11[1].tostr()+tvar11[2].tostr()+tvar11[3].tostr()+"|"
        result+=f01(var1)+"|"
        result+=f02(var2)+"|"
        result+=f03(var3)+"|"
        result+=f04(var4)+"|"
        result+=f05(var5)+"|"
        result+=f06(var6)+"|"
        result+=f07(var7)+"|"
        result+=f08(var8)+"|"
        result+=f09(var9)+"|"
        result+=f10(var10)+"|"
        result+=f11(var11)+"|"
        result+=f12(tvar1)+"|"
        result+=f13(tvar2)+"|"
        result+=f14(tvar3)+"|"
        result+=f15(tvar4)+"|"
        result+=f16(tvar5)+"|"
        result+=f17(tvar6)+"|"
        result+=f18(tvar7)+"|"
        result+=f19(tvar8)+"|"
        result+=f20(tvar9)+"|"
        result+=f21(tvar10)+"|"
        result+=f22(tvar11)+"|"
        result+=var1.tostr()+"|"
        result+=var2.tostr()+"|"
        result+=var3.tostr()+"|"
        result+=var4.tostr()+"|"
        result+=var5.tostr()+"|"
        result+=var6.tostr().replace(".000000","")+"|"
        result+=var7+"|"
        result+=var8.tostr()+"|"
        result+=var9.var1.tostr()+var9.var2.tostr()+var9.var3.tostr()+"|"
        result+=var10[0].tostr()+var10[1].tostr()+var10[2].tostr()+"|"
        result+=var11[0].tostr()+var11[1].tostr()+var11[2].tostr()+var11[3].tostr()+"|"
        result+=tvar1.tostr()+"|"
        result+=tvar2.tostr()+"|"
        result+=tvar3.tostr()+"|"
        result+=tvar4.tostr()+"|"
        result+=tvar5.tostr()+"|"
        result+=tvar6.tostr().replace(".000000","")+"|"
        result+=tvar7+"|"
        result+=tvar8.tostr()+"|"
        result+=tvar9.var1.tostr()+tvar9.var2.tostr()+tvar9.var3.tostr()+"|"
        result+=tvar10[0].tostr()+tvar10[1].tostr()+tvar10[2].tostr()+"|"
        result+=tvar11[0].tostr()+tvar11[1].tostr()+tvar11[2].tostr()+tvar11[3].tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false|0|1|2|3|4|5|0|545556|9AB|CDEF|false|1|2|3|4|5|6|1|565765|BCD|EFGH|false|0|1|2|3|4|5|0|545556|9AB|CDEF|false|1|2|3|4|5|6|1|565765|BCD|EFGH|true|a|32767|2147483647|6000000000|-0.000011|hello|2|979899|def|ghij|true|b|32766|2147483646|5000000000|-0.000032|man|2|107108109|nop|qrst|",false)
      break                                              

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)131):
      testname="return all master types and defined types"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
      :class  
      type bool as type1
      type char as type2
      type short as type3
      type int as type4
      type long as type5
      type float as type6
      type string as type7
      type enutype as type8
      type classtype as type9
      type char[3] as type10
      type char[] as type11
      bool f01()
      char f02()
      short f03()
      int f04()
      long f05()
      float f06()
      string f07()
      enutype f08()
      classtype f09()
      char[3] f10()
      char[] f11()
      type1 f12()
      type2 f13()
      type3 f14()
      type4 f15()
      type5 f16()
      type6 f17()
      type7 f18()
      type8 f19()
      type9 f20()
      type10 f21()
      type11 f22()
      .implem
      func bool      f01(): bool      v=true;                      return v; :func
      func char      f02(): char      v='a';                       return v; :func
      func short     f03(): short     v=32767S;                    return v; :func
      func int       f04(): int       v=(int)2147483647;           return v; :func
      func long      f05(): long      v=(long)6E9;                 return v; :func
      func float     f06(): float     v=-1.1E-5;                   return v; :func
      func string    f07(): string    v="hello";                   return v; :func
      func enutype   f08(): enutype   v=enutype.enu3;              return v; :func
      func classtype f09(): classtype v=(classtype){'a','b','c'};  return v; :func
      func char[3]   f10(): char[3]   v=(char[3]){'d','e','f'};    return v; :func
      func char[]    f11(): char[]    v=(char[]){'g','h','i','j'}; return v; :func
      func type1     f12(): type1     v=true;                      return v; :func
      func type2     f13(): type2     v='b';                       return v; :func
      func type3     f14(): type3     v=32766S;                    return v; :func
      func type4     f15(): type4     v=(int)2147483646;           return v; :func
      func type5     f16(): type5     v=(long)5E9;                 return v; :func
      func type6     f17(): type6     v=-3.2E-5;                   return v; :func
      func type7     f18(): type7     v="man";                     return v; :func
      func type8     f19(): type8     v=type8.enu3;                return v; :func
      func type9     f20(): type9     v=(type9){'k','l','m'};      return v; :func
      func type10    f21(): type10    v=(type10){'n','o','p'};     return v; :func
      func type11    f22(): type11    v=(type11){'q','r','s','t'}; return v; :func
      main:
        bool var1
        char var2
        short var3
        int var4
        long var5
        float var6
        string var7
        enutype var8
        classtype var9
        char[3] var10
        char[] var11
        type1 tvar1
        type2 tvar2
        type3 tvar3
        type4 tvar4
        type5 tvar5
        type6 tvar6
        type7 tvar7
        type8 tvar8
        type9 tvar9
        type10 tvar10
        type11 tvar11
        var1=f01()
        var2=f02()
        var3=f03()
        var4=f04()
        var5=f05()
        var6=f06()
        var7=f07()
        var8=f08()
        var9=f09()
        var10=f10()
        var11=f11()
        tvar1=f12()
        tvar2=f13()
        tvar3=f14()
        tvar4=f15()
        tvar5=f16()
        tvar6=f17()
        tvar7=f18()
        tvar8=f19()
        tvar9=f20()
        tvar10=f21()
        tvar11=f22()
        string result=""
        result+=var1.tostr()+"|"
        result+=var2.tostr()+"|"
        result+=var3.tostr()+"|"
        result+=var4.tostr()+"|"
        result+=var5.tostr()+"|"
        result+=var6.tostr().replace(".000000","")+"|"
        result+=var7+"|"
        result+=var8.tostr()+"|"
        result+=var9.var1.tostr()+var9.var2.tostr()+var9.var3.tostr()+"|"
        result+=var10[0].tostr()+var10[1].tostr()+var10[2].tostr()+"|"
        result+=var11[0].tostr()+var11[1].tostr()+var11[2].tostr()+var11[3].tostr()+"|"
        result+=tvar1.tostr()+"|"
        result+=tvar2.tostr()+"|"
        result+=tvar3.tostr()+"|"
        result+=tvar4.tostr()+"|"
        result+=tvar5.tostr()+"|"
        result+=tvar6.tostr().replace(".000000","")+"|"
        result+=tvar7+"|"
        result+=tvar8.tostr()+"|"
        result+=tvar9.var1.tostr()+tvar9.var2.tostr()+tvar9.var3.tostr()+"|"
        result+=tvar10[0].tostr()+tvar10[1].tostr()+tvar10[2].tostr()+"|"
        result+=tvar11[0].tostr()+tvar11[1].tostr()+tvar11[2].tostr()+tvar11[3].tostr()+"|"
       con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","true|a|32767|2147483647|6000000000|-0.000011|hello|2|979899|def|ghij|true|b|32766|2147483646|5000000000|-0.000032|man|2|107108109|nop|qrst|",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)132):
      testname="Test operator overloads for all overloadable operators (numeric operands)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type int as type1
      type1 [++](type1 opnd1)  
      type1 [--](type1 opnd1)  
      void  [(++)](ref type1 opnd1)
      void  [(--)](ref type1 opnd1)
      void  [(+)](ref type1 opnd1) 
      type1 [(-)](type1 opnd1) 
      type1 [!](type1 opnd1)   
      type1 [~](type1 opnd1)   
      type1 [*](type1 opnd1,type1 opnd2)
      type1 [/](type1 opnd1,type1 opnd2)
      type1 [%](type1 opnd1,type1 opnd2)
      type1 [+](type1 opnd1,type1 opnd2)
      type1 [-](type1 opnd1,type1 opnd2)
      type1 [<<](type1 opnd1,type1 opnd2)
      type1 [>>](type1 opnd1,type1 opnd2)
      type1 [<](type1 opnd1,type1 opnd2)
      type1 [<=](type1 opnd1,type1 opnd2)
      type1 [>](type1 opnd1,type1 opnd2)
      type1 [>=](type1 opnd1,type1 opnd2)
      type1 [==](type1 opnd1,type1 opnd2)
      type1 [!=](type1 opnd1,type1 opnd2)
      type1 [&](type1 opnd1,type1 opnd2)
      type1 [^](type1 opnd1,type1 opnd2)
      type1 [|](type1 opnd1,type1 opnd2)
      type1 [&&](type1 opnd1,type1 opnd2)
      type1 [||](type1 opnd1,type1 opnd2)
      void  [=](ref type1 opnd1,type1 opnd2)
      void  [+=](ref type1 opnd1,type1 opnd2)
      void  [-=](ref type1 opnd1,type1 opnd2)
      void  [*=](ref type1 opnd1,type1 opnd2)
      void  [/=](ref type1 opnd1,type1 opnd2)
      void  [%=](ref type1 opnd1,type1 opnd2)
      void  [<<=](ref type1 opnd1,type1 opnd2)
      void  [>>=](ref type1 opnd1,type1 opnd2)
      void  [&=](ref type1 opnd1,type1 opnd2)
      void  [^=](ref type1 opnd1,type1 opnd2)
      void  [|=](ref type1 opnd1,type1 opnd2)
      .implem
      oper type1 [++](type1 opnd1):                 return (type1)((int)opnd1+1);             :oper
      oper type1 [--](type1 opnd1):                 return (type1)((int)opnd1+2);             :oper
      oper void  [(++)](ref type1 opnd1):           opnd1=(type1)((int)opnd1+3);              :oper
      oper void  [(--)](ref type1 opnd1):           opnd1=(type1)((int)opnd1+4);              :oper
      oper void  [(+)](ref type1 opnd1):            opnd1=(type1)((int)opnd1+5);              :oper
      oper type1 [(-)](type1 opnd1):                return (type1)((int)opnd1+6);             :oper
      oper type1 [!](type1 opnd1):                  return (type1)((int)opnd1+7);             :oper
      oper type1 [~](type1 opnd1):                  return (type1)((int)opnd1+8);             :oper
      oper type1 [*](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+9+(int)opnd2);  :oper
      oper type1 [/](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+10+(int)opnd2); :oper
      oper type1 [%](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+11+(int)opnd2); :oper
      oper type1 [+](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+12+(int)opnd2); :oper
      oper type1 [-](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+13+(int)opnd2); :oper
      oper type1 [<<](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+14+(int)opnd2); :oper
      oper type1 [>>](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+15+(int)opnd2); :oper
      oper type1 [<](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+16+(int)opnd2); :oper
      oper type1 [<=](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+17+(int)opnd2); :oper
      oper type1 [>](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+18+(int)opnd2); :oper
      oper type1 [>=](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+19+(int)opnd2); :oper
      oper type1 [==](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+20+(int)opnd2); :oper
      oper type1 [!=](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+21+(int)opnd2); :oper
      oper type1 [&](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+22+(int)opnd2); :oper
      oper type1 [^](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+23+(int)opnd2); :oper
      oper type1 [|](type1 opnd1,type1 opnd2):      return (type1)((int)opnd1+24+(int)opnd2); :oper
      oper type1 [&&](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+25+(int)opnd2); :oper
      oper type1 [||](type1 opnd1,type1 opnd2):     return (type1)((int)opnd1+26+(int)opnd2); :oper
      oper void [=](ref type1 opnd1,type1 opnd2):   opnd1=(type1)((int)opnd1+27+(int)opnd2);  :oper
      oper void [+=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+28+(int)opnd2);  :oper
      oper void [-=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+29+(int)opnd2);  :oper
      oper void [*=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+30+(int)opnd2);  :oper
      oper void [/=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+31+(int)opnd2);  :oper
      oper void [%=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+32+(int)opnd2);  :oper
      oper void [<<=](ref type1 opnd1,type1 opnd2): opnd1=(type1)((int)opnd1+33+(int)opnd2);  :oper
      oper void [>>=](ref type1 opnd1,type1 opnd2): opnd1=(type1)((int)opnd1+34+(int)opnd2);  :oper
      oper void [&=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+35+(int)opnd2);  :oper
      oper void [^=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+36+(int)opnd2);  :oper
      oper void [|=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((int)opnd1+37+(int)opnd2);  :oper
      main:
        type1 var1
        type1 var2
        string result=""
        var1=1; var2=2; result+=(var1++).tostr()+":"
        var1=1; var2=2; result+=(var1--).tostr()+":"
        var1=1; var2=2; result+=(++var1).tostr()+":"
        var1=1; var2=2; result+=(--var1).tostr()+":"
        var1=1; var2=2; result+=(+var1).tostr()+":"
        var1=1; var2=2; result+=(-var1).tostr()+":"
        var1=1; var2=2; result+=(!var1).tostr()+":"
        var1=1; var2=2; result+=(~var1).tostr()+":"
        var1=1; var2=2; result+=(var1*var2).tostr()+":"
        var1=1; var2=2; result+=(var1/var2).tostr()+":"
        var1=1; var2=2; result+=(var1%var2).tostr()+":"
        var1=1; var2=2; result+=(var1+var2).tostr()+":"
        var1=1; var2=2; result+=(var1-var2).tostr()+":"
        var1=1; var2=2; result+=(var1<<var2).tostr()+":"
        var1=1; var2=2; result+=(var1>>var2).tostr()+":"
        var1=1; var2=2; result+=(var1<var2).tostr()+":"
        var1=1; var2=2; result+=(var1<=var2).tostr()+":"
        var1=1; var2=2; result+=(var1>var2).tostr()+":"
        var1=1; var2=2; result+=(var1>=var2).tostr()+":"
        var1=1; var2=2; result+=(var1==var2).tostr()+":"
        var1=1; var2=2; result+=(var1!=var2).tostr()+":"
        var1=1; var2=2; result+=(var1&var2).tostr()+":"
        var1=1; var2=2; result+=(var1^var2).tostr()+":"
        var1=1; var2=2; result+=(var1|var2).tostr()+":"
        var1=1; var2=2; result+=(var1&&var2).tostr()+":"
        var1=1; var2=2; result+=(var1||var2).tostr()+":"
        var1=1; var2=2; result+=(var1=var2).tostr()+":"
        var1=1; var2=2; result+=(var1+=var2).tostr()+":"
        var1=1; var2=2; result+=(var1-=var2).tostr()+":"
        var1=1; var2=2; result+=(var1*=var2).tostr()+":"
        var1=1; var2=2; result+=(var1/=var2).tostr()+":"
        var1=1; var2=2; result+=(var1%=var2).tostr()+":"
        var1=1; var2=2; result+=(var1<<=var2).tostr()+":"
        var1=1; var2=2; result+=(var1>>=var2).tostr()+":"
        var1=1; var2=2; result+=(var1&=var2).tostr()+":"
        var1=1; var2=2; result+=(var1^=var2).tostr()+":"
        var1=1; var2=2; result+=(var1|=var2).tostr()+":"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","2:3:4:5:6:7:8:9:12:13:14:15:16:17:18:19:20:21:22:23:24:25:26:27:28:29:30:31:32:33:34:35:36:37:38:39:40:",false)
      break
      
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)133):
      testname="Test operator overloads for all overloadable operators (string operands)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      type string as type1
      type1 [++](type1 opnd1)  
      type1 [--](type1 opnd1)  
      void  [(++)](ref type1 opnd1)
      void  [(--)](ref type1 opnd1)
      void  [(+)](ref type1 opnd1) 
      type1 [(-)](type1 opnd1) 
      type1 [!](type1 opnd1)   
      type1 [~](type1 opnd1)   
      type1 [*](type1 opnd1,type1 opnd2)
      type1 [/](type1 opnd1,type1 opnd2)
      type1 [%](type1 opnd1,type1 opnd2)
      type1 [+](type1 opnd1,type1 opnd2)
      type1 [-](type1 opnd1,type1 opnd2)
      type1 [<<](type1 opnd1,type1 opnd2)
      type1 [>>](type1 opnd1,type1 opnd2)
      type1 [<](type1 opnd1,type1 opnd2)
      type1 [<=](type1 opnd1,type1 opnd2)
      type1 [>](type1 opnd1,type1 opnd2)
      type1 [>=](type1 opnd1,type1 opnd2)
      type1 [==](type1 opnd1,type1 opnd2)
      type1 [!=](type1 opnd1,type1 opnd2)
      type1 [&](type1 opnd1,type1 opnd2)
      type1 [^](type1 opnd1,type1 opnd2)
      type1 [|](type1 opnd1,type1 opnd2)
      type1 [&&](type1 opnd1,type1 opnd2)
      type1 [||](type1 opnd1,type1 opnd2)
      void  [=](ref type1 opnd1,type1 opnd2)
      void  [+=](ref type1 opnd1,type1 opnd2)
      void  [-=](ref type1 opnd1,type1 opnd2)
      void  [*=](ref type1 opnd1,type1 opnd2)
      void  [/=](ref type1 opnd1,type1 opnd2)
      void  [%=](ref type1 opnd1,type1 opnd2)
      void  [<<=](ref type1 opnd1,type1 opnd2)
      void  [>>=](ref type1 opnd1,type1 opnd2)
      void  [&=](ref type1 opnd1,type1 opnd2)
      void  [^=](ref type1 opnd1,type1 opnd2)
      void  [|=](ref type1 opnd1,type1 opnd2)
      .implem
      oper type1 [++](type1 opnd1):                 return (type1)((string)opnd1+"++");               :oper
      oper type1 [--](type1 opnd1):                 return (type1)((string)opnd1+"--");               :oper
      oper void  [(++)](ref type1 opnd1):           opnd1=(type1)((string)opnd1+"(++)");              :oper
      oper void  [(--)](ref type1 opnd1):           opnd1=(type1)((string)opnd1+"(--)");              :oper
      oper void  [(+)](ref type1 opnd1):            opnd1=(type1)((string)opnd1+"(+)");               :oper
      oper type1 [(-)](type1 opnd1):                return (type1)((string)opnd1+"(-)");              :oper
      oper type1 [!](type1 opnd1):                  return (type1)((string)opnd1+"!");                :oper
      oper type1 [~](type1 opnd1):                  return (type1)((string)opnd1+"~");                :oper
      oper type1 [*](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"*"+(string)opnd2);  :oper
      oper type1 [/](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"/"+(string)opnd2);  :oper
      oper type1 [%](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"%"+(string)opnd2);  :oper
      oper type1 [+](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"+"+(string)opnd2);  :oper
      oper type1 [-](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"-"+(string)opnd2);  :oper
      oper type1 [<<](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"<<"+(string)opnd2); :oper
      oper type1 [>>](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+">>"+(string)opnd2); :oper
      oper type1 [<](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"<"+(string)opnd2);  :oper
      oper type1 [<=](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"<="+(string)opnd2); :oper
      oper type1 [>](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+">"+(string)opnd2);  :oper
      oper type1 [>=](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+">="+(string)opnd2); :oper
      oper type1 [==](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"=="+(string)opnd2); :oper
      oper type1 [!=](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"!="+(string)opnd2); :oper
      oper type1 [&](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"&"+(string)opnd2);  :oper
      oper type1 [^](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"^"+(string)opnd2);  :oper
      oper type1 [|](type1 opnd1,type1 opnd2):      return (type1)((string)opnd1+"|"+(string)opnd2);  :oper
      oper type1 [&&](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"&&"+(string)opnd2); :oper
      oper type1 [||](type1 opnd1,type1 opnd2):     return (type1)((string)opnd1+"||"+(string)opnd2); :oper
      oper void [=](ref type1 opnd1,type1 opnd2):   opnd1=(type1)((string)opnd1+"="+(string)opnd2);   :oper
      oper void [+=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"+="+(string)opnd2);  :oper
      oper void [-=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"-="+(string)opnd2);  :oper
      oper void [*=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"*="+(string)opnd2);  :oper
      oper void [/=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"/="+(string)opnd2);  :oper
      oper void [%=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"%="+(string)opnd2);  :oper
      oper void [<<=](ref type1 opnd1,type1 opnd2): opnd1=(type1)((string)opnd1+"<<="+(string)opnd2); :oper
      oper void [>>=](ref type1 opnd1,type1 opnd2): opnd1=(type1)((string)opnd1+">>="+(string)opnd2); :oper
      oper void [&=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"&="+(string)opnd2);  :oper
      oper void [^=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"^="+(string)opnd2);  :oper
      oper void [|=](ref type1 opnd1,type1 opnd2):  opnd1=(type1)((string)opnd1+"|="+(string)opnd2);  :oper
      main:
        type1 var1
        type1 var2
        string result=""
        var1="1"; var2="2"; result+=(var1++)+":"
        var1="1"; var2="2"; result+=(var1--)+":"
        var1="1"; var2="2"; result+=(++var1)+":"
        var1="1"; var2="2"; result+=(--var1)+":"
        var1="1"; var2="2"; result+=(+var1)+":"
        var1="1"; var2="2"; result+=(-var1)+":"
        var1="1"; var2="2"; result+=(!var1)+":"
        var1="1"; var2="2"; result+=(~var1)+":"
        var1="1"; var2="2"; result+=(var1*var2)+":"
        var1="1"; var2="2"; result+=(var1/var2)+":"
        var1="1"; var2="2"; result+=(var1%var2)+":"
        var1="1"; var2="2"; result+=(var1+var2)+":"
        var1="1"; var2="2"; result+=(var1-var2)+":"
        var1="1"; var2="2"; result+=(var1<<var2)+":"
        var1="1"; var2="2"; result+=(var1>>var2)+":"
        var1="1"; var2="2"; result+=(var1<var2)+":"
        var1="1"; var2="2"; result+=(var1<=var2)+":"
        var1="1"; var2="2"; result+=(var1>var2)+":"
        var1="1"; var2="2"; result+=(var1>=var2)+":"
        var1="1"; var2="2"; result+=(var1==var2)+":"
        var1="1"; var2="2"; result+=(var1!=var2)+":"
        var1="1"; var2="2"; result+=(var1&var2)+":"
        var1="1"; var2="2"; result+=(var1^var2)+":"
        var1="1"; var2="2"; result+=(var1|var2)+":"
        var1="1"; var2="2"; result+=(var1&&var2)+":"
        var1="1"; var2="2"; result+=(var1||var2)+":"
        var1="1"; var2="2"; result+=(var1=var2)+":"
        var1="1"; var2="2"; result+=(var1+=var2)+":"
        var1="1"; var2="2"; result+=(var1-=var2)+":"
        var1="1"; var2="2"; result+=(var1*=var2)+":"
        var1="1"; var2="2"; result+=(var1/=var2)+":"
        var1="1"; var2="2"; result+=(var1%=var2)+":"
        var1="1"; var2="2"; result+=(var1<<=var2)+":"
        var1="1"; var2="2"; result+=(var1>>=var2)+":"
        var1="1"; var2="2"; result+=(var1&=var2)+":"
        var1="1"; var2="2"; result+=(var1^=var2)+":"
        var1="1"; var2="2"; result+=(var1|=var2)+":"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","1++:1--:1(++):1(--):1(+):1(-):1!:1~:1*2:1/2:1%2:1+2:1-2:1<<2:1>>2:1<2:1<=2:1>2:1>=2:1==2:1!=2:1&2:1^2:1|2:1&&2:1||2:1=2:1+=2:1-=2:1*=2:1/=2:1%=2:1<<=2:1>>=2:1&=2:1^=2:1|=2:",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)134):
      testname="Test date class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        int yr
        int mo
        int da
        dtm.date d
        dtm.date b
        string result=""
        b=dtm.date(2021,10,15);  result+="bs="+b.tostr()+"|"
        d=dtm.date(2021,10,15);  result+="a1="+d.tostr()+"|"
        d.value(2021,10,15);     result+="a2="+d.tostr()+"|"
        yr=b.year();             result+="y="+yr.tostr()+"|"
        mo=b.month();            result+="m="+mo.tostr()+"|"
        da=b.day();              result+="d="+da.tostr()+"|"
        d=b.begofmonth();        result+="bm="+d.tostr()+"|"
        d=b.endofmonth();        result+="em="+d.tostr()+"|"
        d=b.addyears(1);         result+="y+1="+d.tostr()+"|"
        d=b.addyears(-1);        result+="y-1="+d.tostr()+"|"
        d=b.addmonths(25);       result+="m+25="+d.tostr()+"|"
        d=b.addmonths(-26);      result+="m-26="+d.tostr()+"|"
        d=b.adddays(25);         result+="d+25="+d.tostr()+"|"
        d=b.adddays(-26);        result+="d-26="+d.tostr()+"|"
        d=dtm.getdate();         result+="t="+d.tostr()+"|"
        d=dtm.getutcdate();      result+="utc="+d.tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","bs=20211015|a1=20211015|a2=20211015|y=2021|m=10|d=15|bm=20211001|em=20211031|y+1=20221015|y-1=20201015|m+25=20231115|m-26=20190815|d+25=20211109|d-26=20210919|"+"t="+dt.getdate().tostr()+"|"+"utc="+dt.getutcdate().tostr()+"|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)135): 
      testname="Test time class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        int hr
        int mi
        int se
        int ms
        int us
        int ns
        dtm.time t
        dtm.time b
        string result=""
        b=dtm.time(23,10,15);             result+="c1="+b.tostr(':')+"|"
        b=dtm.time(23,10,15,123);         result+="c2="+b.tostr(':')+"|"
        b=dtm.time(23,10,15,123,456);     result+="c3="+b.tostr(':')+"|"
        b=dtm.time(23,10,15,123,456,789); result+="c4="+b.tostr(':')+"|"
        t.value(23,10,15);                result+="v1="+t.tostr(':')+"|"
        t.value(23,10,15,123);            result+="v2="+t.tostr(':')+"|"
        t.value(23,10,15,123,456);        result+="v3="+t.tostr(':')+"|"
        t.value(23,10,15,123,456,789);    result+="v4="+t.tostr(':')+"|"
        hr=b.hour();                      result+="hr="+hr.tostr()+"|"
        mi=b.minute();                    result+="mi="+mi.tostr()+"|"
        se=b.second();                    result+="se="+se.tostr()+"|"
        ms=b.millisec();                  result+="ms="+ms.tostr()+"|"
        us=b.microsec();                  result+="us="+us.tostr()+"|"
        ns=b.nanosec();                   result+="ns="+ns.tostr()+"|"
        t=b.addhours(50);                 result+="hr+50="+t.tostr(':')+"|"
        t=b.addhours(-50);                result+="hr-50="+t.tostr(':')+"|"
        t=b.addminutes(500);              result+="mi+500="+t.tostr(':')+"|"
        t=b.addminutes(-500);             result+="mi-500="+t.tostr(':')+"|"
        t=b.addseconds(5000);             result+="se+5000="+t.tostr(':')+"|"
        t=b.addseconds(-5000);            result+="se-5000="+t.tostr(':')+"|"
        t=b.addmillisecs(5001);           result+="ms+5001="+t.tostr(':')+"|"
        t=b.addmillisecs(-5001);          result+="ms-5001="+t.tostr(':')+"|"
        t=b.addmicrosecs(5001);           result+="us+5001="+t.tostr(':')+"|"
        t=b.addmicrosecs(-5001);          result+="us-5001="+t.tostr(':')+"|"
        t=b.addnanosecs(5001);            result+="ns+5001="+t.tostr(':')+"|"
        t=b.addnanosecs(-5001);           result+="ns-5001="+t.tostr(':')+"|"
        t=dtm.gettime();                  result+="t="+t.tostr(':')+"|"
        t=dtm.getutctime();               result+="utc="+t.tostr(':')+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","c1=23:10:15.000000000|c2=23:10:15.123000000|c3=23:10:15.123456000|c4=23:10:15.123456789|v1=23:10:15.000000000|v2=23:10:15.123000000|v3=23:10:15.123456000|v4=23:10:15.123456789|hr=23|mi=10|se=15|ms=123|us=456|ns=789|hr+50=01:10:15.123456789|hr-50=21:10:15.123456789|mi+500=07:30:15.123456789|mi-500=14:50:15.123456789|se+5000=00:33:35.123456789|se-5000=21:46:55.123456789|ms+5001=23:10:20.124456789|ms-5001=23:10:10.122456789|us+5001=23:10:15.128457789|us-5001=23:10:15.118455789|ns+5001=23:10:15.123461790|ns-5001=23:10:15.123451788|*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)136): 
      testname="Test datetime class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        int yr
        int mo
        int da
        int hr
        int mi
        int se
        int ms
        int us
        int ns
        dtm.date d
        dtm.time t
        dtm.datetime dt
        dtm.datetime bs
        string result=""
        bs=dtm.datetime(2021,10,15);                      result+="c0="+bs.tostr('.',':')+"|"
        bs=dtm.datetime(2021,10,15,23,10,15);             result+="c1="+bs.tostr('.',':')+"|"
        bs=dtm.datetime(2021,10,15,23,10,15,123);         result+="c2="+bs.tostr('.',':')+"|"
        bs=dtm.datetime(2021,10,15,23,10,15,123,456);     result+="c3="+bs.tostr('.',':')+"|"
        bs=dtm.datetime(2021,10,15,23,10,15,123,456,789); result+="c4="+bs.tostr('.',':')+"|"
        dt.value(2021,10,15);                             result+="v0="+dt.tostr('.',':')+"|"
        dt.value(2021,10,15,23,10,15);                    result+="v1="+dt.tostr('.',':')+"|"
        dt.value(2021,10,15,23,10,15,123);                result+="v2="+dt.tostr('.',':')+"|"
        dt.value(2021,10,15,23,10,15,123,456);            result+="v3="+dt.tostr('.',':')+"|"
        dt.value(2021,10,15,23,10,15,123,456,789);        result+="v4="+dt.tostr('.',':')+"|"
        yr=bs.year();                                     result+="yr="+yr.tostr()+"|"
        mo=bs.month();                                    result+="mo="+mo.tostr()+"|"
        da=bs.day();                                      result+="da="+da.tostr()+"|"
        hr=bs.hour();                                     result+="hr="+hr.tostr()+"|"
        mi=bs.minute();                                   result+="mi="+mi.tostr()+"|"
        se=bs.second();                                   result+="se="+se.tostr()+"|"
        ms=bs.millisec();                                 result+="ms="+ms.tostr()+"|"
        us=bs.microsec();                                 result+="us="+us.tostr()+"|"
        ns=bs.nanosec();                                  result+="ns="+ns.tostr()+"|"
        dt=bs.begofmonth();                               result+="bm="+dt.tostr('.',':')+"|"
        dt=bs.endofmonth();                               result+="em="+dt.tostr('.',':')+"|"
        dt=bs.addyears(1);                                result+="y+1="+dt.tostr('.',':')+"|"
        dt=bs.addyears(-1);                               result+="y-1="+dt.tostr('.',':')+"|"
        dt=bs.addmonths(25);                              result+="m+25="+dt.tostr('.',':')+"|"
        dt=bs.addmonths(-26);                             result+="m-26="+dt.tostr('.',':')+"|"
        dt=bs.adddays(25);                                result+="d+25="+dt.tostr('.',':')+"|"
        dt=bs.adddays(-26);                               result+="d-26="+dt.tostr('.',':')+"|"
        dt=bs.addhours(50);                               result+="hr+50="+dt.tostr('.',':')+"|"
        dt=bs.addhours(-50);                              result+="hr-50="+dt.tostr('.',':')+"|"
        dt=bs.addminutes(500);                            result+="mi+500="+dt.tostr('.',':')+"|"
        dt=bs.addminutes(-500);                           result+="mi-500="+dt.tostr('.',':')+"|"
        dt=bs.addseconds(5000);                           result+="se+5000="+dt.tostr('.',':')+"|"
        dt=bs.addseconds(-5000);                          result+="se-5000="+dt.tostr('.',':')+"|"
        dt=bs.addmillisecs(5001);                         result+="ms+5001="+dt.tostr('.',':')+"|"
        dt=bs.addmillisecs(-5001);                        result+="ms-5001="+dt.tostr('.',':')+"|"
        dt=bs.addmicrosecs(5001);                         result+="us+5001="+dt.tostr('.',':')+"|"
        dt=bs.addmicrosecs(-5001);                        result+="us-5001="+dt.tostr('.',':')+"|"
        dt=bs.addnanosecs(5001);                          result+="ns+5001="+dt.tostr('.',':')+"|"
        dt=bs.addnanosecs(-5001);                         result+="ns-5001="+dt.tostr('.',':')+"|"
        d =bs.todate();                                   result+="d="+d.tostr('.')+"|"
        t =bs.totime();                                   result+="t="+t.tostr(':')+"|"
        dt=dtm.getdatetime();                             result+="t="+dt.tostr('.',':')+"|"
        dt=dtm.getutcdatetime();                          result+="utc="+dt.tostr('.',':')+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","c0=2021.10.15 00:00:00.000000000|c1=2021.10.15 23:10:15.000000000|c2=2021.10.15 23:10:15.123000000|c3=2021.10.15 23:10:15.123456000|c4=2021.10.15 23:10:15.123456789|v0=2021.10.15 00:00:00.000000000|v1=2021.10.15 23:10:15.000000000|v2=2021.10.15 23:10:15.123000000|v3=2021.10.15 23:10:15.123456000|v4=2021.10.15 23:10:15.123456789|yr=2021|mo=10|da=15|hr=23|mi=10|se=15|ms=123|us=456|ns=789|bm=2021.10.01 23:10:15.123456789|em=2021.10.31 23:10:15.123456789|y+1=2022.10.15 23:10:15.123456789|y-1=2020.10.15 23:10:15.123456789|m+25=2023.11.15 23:10:15.123456789|m-26=2019.08.15 23:10:15.123456789|d+25=2021.11.09 23:10:15.123456789|d-26=2021.09.19 23:10:15.123456789|hr+50=2021.10.18 01:10:15.123456789|hr-50=2021.10.13 21:10:15.123456789|mi+500=2021.10.16 07:30:15.123456789|mi-500=2021.10.15 14:50:15.123456789|se+5000=2021.10.16 00:33:35.123456789|se-5000=2021.10.15 21:46:55.123456789|ms+5001=2021.10.15 23:10:20.124456789|ms-5001=2021.10.15 23:10:10.122456789|us+5001=2021.10.15 23:10:15.128457789|us-5001=2021.10.15 23:10:15.118455789|ns+5001=2021.10.15 23:10:15.123461790|ns-5001=2021.10.15 23:10:15.123451788|d=2021.10.15|t=23:10:15.123456789|*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)137): 
      testname="Test timespan class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        long dal
        long hrl
        long mil
        long sel
        long msl
        long usl
        long nsl
        float daf
        float hrf
        float mif
        float sef
        float msf
        float usf
        float nsf
        dtm.timespan ts
        dtm.timespan bs
        string result=""
        bs=dtm.timespan(15);                       result+="c0="+bs.tostr(':')+"|"       
        bs=dtm.timespan(15,23,10,15);              result+="c1="+bs.tostr(':')+"|"       
        bs=dtm.timespan(15,23,10,15,123);          result+="c2="+bs.tostr(':')+"|"       
        bs=dtm.timespan(15,23,10,15,123,456);      result+="c3="+bs.tostr(':')+"|"       
        bs=dtm.timespan(15,23,10,15,123,456,789);  result+="c4="+bs.tostr(':')+"|"       
        ts.value(15);                             result+="v0="+ts.tostr(':')+"|"       
        ts.value(15,23,10,15);                    result+="v1="+ts.tostr(':')+"|"       
        ts.value(15,23,10,15,123);                result+="v2="+ts.tostr(':')+"|"       
        ts.value(15,23,10,15,123,456);            result+="v3="+ts.tostr(':')+"|"       
        ts.value(15,23,10,15,123,456,789);        result+="v4="+ts.tostr(':')+"|"       
        dal=bs.day();                             result+="da="+dal.tostr()+"|"         
        hrl=bs.hour();                            result+="hr="+hrl.tostr()+"|"         
        mil=bs.minute();                          result+="mi="+mil.tostr()+"|"         
        sel=bs.second();                          result+="se="+sel.tostr()+"|"         
        msl=bs.millisec();                        result+="ms="+msl.tostr()+"|"         
        usl=bs.microsec();                        result+="us="+usl.tostr()+"|"         
        nsl=bs.nanosec();                         result+="ns="+nsl.tostr()+"|"         
        daf=bs.indays();                          result+="das="+daf.tostr()+"|"        
        hrf=bs.inhours();                         result+="hrs="+hrf.tostr()+"|"        
        mif=bs.inminutes();                       result+="mis="+mif.tostr()+"|"        
        sef=bs.inseconds();                       result+="ses="+sef.tostr()+"|"        
        msf=bs.inmillisecs();                     result+="mss="+msf.tostr()+"|"        
        usf=bs.inmicrosecs();                     result+="uss="+usf.tostr()+"|"        
        nsf=ts.innanosecs();                      result+="nss="+nsf.tostr()+"|"        
        ts=bs.adddays(25);                        result+="d+25="+ts.tostr(':')+"|"     
        ts=bs.adddays(-26);                       result+="d-26="+ts.tostr(':')+"|"     
        ts=bs.addhours(50);                       result+="hr+50="+ts.tostr(':')+"|"    
        ts=bs.addhours(-50);                      result+="hr-50="+ts.tostr(':')+"|"    
        ts=bs.addminutes(500);                    result+="mi+500="+ts.tostr(':')+"|"   
        ts=bs.addminutes(-500);                   result+="mi-500="+ts.tostr(':')+"|"   
        ts=bs.addseconds(5000);                   result+="se+5000="+ts.tostr(':')+"|"  
        ts=bs.addseconds(-5000);                  result+="se-5000="+ts.tostr(':')+"|"  
        ts=bs.addmillisecs(5001);                 result+="ms+5001="+ts.tostr(':')+"|"  
        ts=bs.addmillisecs(-5001);                result+="ms-5001="+ts.tostr(':')+"|"  
        ts=bs.addmicrosecs(5001);                 result+="us+5001="+ts.tostr(':')+"|"  
        ts=bs.addmicrosecs(-5001);                result+="us-5001="+ts.tostr(':')+"|"  
        ts=bs.addnanosecs(5001);                  result+="ns+5001="+ts.tostr(':')+"|"  
        ts=bs.addnanosecs(-5001);                 result+="ns-5001="+ts.tostr(':')+"|"  
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","c0=+15 00:00:00.000000000|c1=+15 23:10:15.000000000|c2=+15 23:10:15.123000000|c3=+15 23:10:15.123456000|c4=+15 23:10:15.123456789|v0=+15 00:00:00.000000000|v1=+15 23:10:15.000000000|v2=+15 23:10:15.123000000|v3=+15 23:10:15.123456000|v4=+15 23:10:15.123456789|da=15|hr=23|mi=10|se=15|ms=123|us=456|ns=789|das=15.965453|hrs=383.170868|mis=22990.252058|ses=1379415.123457|mss=1379415123.456789|uss=1379415123456.789062|nss=1379415123456789.000000|d+25=+40 23:10:15.123456789|d-26=-11 23:10:15.123456789|hr+50=+18 01:10:15.123456789|hr-50=+13 21:10:15.123456789|mi+500=+16 07:30:15.123456789|mi-500=+15 14:50:15.123456789|se+5000=+16 00:33:35.123456789|se-5000=+15 21:46:55.123456789|ms+5001=+15 23:10:20.124456789|ms-5001=+15 23:10:10.122456789|us+5001=+15 23:10:15.128457789|us-5001=+15 23:10:15.118455789|ns+5001=+15 23:10:15.123461790|ns-5001=+15 23:10:15.123451788|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)138): 
      testname="Test timespan class operator date-date"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.date d1
        dtm.date d2
        string result=""
        d1=dtm.date(2021,10,15); d2=dtm.date(2025,10,15); result+="d2-d1 (yr)="+(d2-d1).tostr(':')+"|"                                                                     
        d1=dtm.date(2021,10,15); d2=dtm.date(2025,10,15); result+="d1-d2 (yr)="+(d1-d2).tostr(':')+"|"                                                                     
        d1=dtm.date(2021,10,15); d2=dtm.date(2022,12,15); result+="d2-d1 (mo)="+(d2-d1).tostr(':')+"|"                                                                     
        d1=dtm.date(2021,10,15); d2=dtm.date(2022,12,15); result+="d1-d2 (mo)="+(d1-d2).tostr(':')+"|"                                                                     
        d1=dtm.date(2021,10,15); d2=dtm.date(2021,11,20); result+="d2-d1 (da)="+(d2-d1).tostr(':')+"|"                                                                     
        d1=dtm.date(2021,10,15); d2=dtm.date(2021,11,20); result+="d1-d2 (da)="+(d1-d2).tostr(':')+"|"                                                                     
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","d2-d1 (yr)=+1461 00:00:00.000000000|d1-d2 (yr)=-1461 00:00:00.000000000|d2-d1 (mo)=+426 00:00:00.000000000|d1-d2 (mo)=-426 00:00:00.000000000|d2-d1 (da)=+36 00:00:00.000000000|d1-d2 (da)=-36 00:00:00.000000000|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)139): 
      testname="Test timespan class operator time-time"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.time t1
        dtm.time t2
        string result=""
        t1=dtm.time(14,30,15);          t2=dtm.time(20,30,15);          result+="t2-t1 (hr)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15);          t2=dtm.time(20,30,15);          result+="t1-t2 (hr)="+(t1-t2).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15);          t2=dtm.time(15,35,15);          result+="t2-t1 (mi)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15);          t2=dtm.time(15,35,15);          result+="t1-t2 (mi)="+(t1-t2).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15);          t2=dtm.time(14,35,25);          result+="t2-t1 (se)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15);          t2=dtm.time(14,35,25);          result+="t1-t2 (se)="+(t1-t2).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10);       t2=dtm.time(14,30,25,20);       result+="t2-t1 (ms)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10);       t2=dtm.time(14,30,25,20);       result+="t1-t2 (ms)="+(t1-t2).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10,20);    t2=dtm.time(14,30,25,20,30);    result+="t2-t1 (us)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10,20);    t2=dtm.time(14,30,25,20,30);    result+="t1-t2 (us)="+(t1-t2).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10,20,30); t2=dtm.time(14,30,25,20,30,40); result+="t2-t1 (ns)="+(t2-t1).tostr(':')+"|"                                                       
        t1=dtm.time(14,30,15,10,20,30); t2=dtm.time(14,30,25,20,30,40); result+="t1-t2 (ns)="+(t1-t2).tostr(':')+"|"                                                       
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","t2-t1 (hr)=+0 06:00:00.000000000|t1-t2 (hr)=-0 06:00:00.000000000|t2-t1 (mi)=+0 01:05:00.000000000|t1-t2 (mi)=-0 01:05:00.000000000|t2-t1 (se)=+0 00:05:10.000000000|t1-t2 (se)=-0 00:05:10.000000000|t2-t1 (ms)=+0 00:00:10.010000000|t1-t2 (ms)=-0 00:00:10.010000000|t2-t1 (us)=+0 00:00:10.010010000|t1-t2 (us)=-0 00:00:10.010010000|t2-t1 (ns)=+0 00:00:10.010010010|t1-t2 (ns)=-0 00:00:10.010010010|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)140): 
      testname="Test timespan class datetime-datetime"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.datetime dt1
        dtm.datetime dt2
        string result=""
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2025,10,15);                   result+="dt2-dt1 (yr)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2025,10,15);                   result+="dt1-dt2 (yr)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2022,12,15);                   result+="dt2-dt1 (mo)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2022,12,15);                   result+="dt1-dt2 (mo)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2021,11,20);                   result+="dt2-dt1 (da)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15);                   dt2=dtm.datetime(2021,11,20);                   result+="dt1-dt2 (da)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,20,30,15);          result+="dt2-dt1 (hr)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,20,30,15);          result+="dt1-dt2 (hr)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,15,35,15);          result+="dt2-dt1 (mi)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,15,35,15);          result+="dt1-dt2 (mi)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,14,35,25);          result+="dt2-dt1 (se)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15);          dt2=dtm.datetime(2021,11,20,14,35,25);          result+="dt1-dt2 (se)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10);       dt2=dtm.datetime(2021,11,20,14,30,25,20);       result+="dt2-dt1 (ms)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10);       dt2=dtm.datetime(2021,11,20,14,30,25,20);       result+="dt1-dt2 (ms)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10,20);    dt2=dtm.datetime(2021,11,20,14,30,25,20,30);    result+="dt2-dt1 (us)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10,20);    dt2=dtm.datetime(2021,11,20,14,30,25,20,30);    result+="dt1-dt2 (us)="+(dt1-dt2).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10,20,30); dt2=dtm.datetime(2021,11,20,14,30,25,20,30,40); result+="dt2-dt1 (ns)="+(dt2-dt1).tostr(':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,30,15,10,20,30); dt2=dtm.datetime(2021,11,20,14,30,25,20,30,40); result+="dt1-dt2 (ns)="+(dt1-dt2).tostr(':')+"|"                   
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","dt2-dt1 (yr)=+1461 00:00:00.000000000|dt1-dt2 (yr)=-1461 00:00:00.000000000|dt2-dt1 (mo)=+426 00:00:00.000000000|dt1-dt2 (mo)=-426 00:00:00.000000000|dt2-dt1 (da)=+36 00:00:00.000000000|dt1-dt2 (da)=-36 00:00:00.000000000|dt2-dt1 (hr)=+36 06:00:00.000000000|dt1-dt2 (hr)=-36 06:00:00.000000000|dt2-dt1 (mi)=+36 01:05:00.000000000|dt1-dt2 (mi)=-36 01:05:00.000000000|dt2-dt1 (se)=+36 00:05:10.000000000|dt1-dt2 (se)=-36 00:05:10.000000000|dt2-dt1 (ms)=+36 00:00:10.010000000|dt1-dt2 (ms)=-36 00:00:10.010000000|dt2-dt1 (us)=+36 00:00:10.010010000|dt1-dt2 (us)=-36 00:00:10.010010000|dt2-dt1 (ns)=+36 00:00:10.010010010|dt1-dt2 (ns)=-36 00:00:10.010010010|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)141): 
      testname="Test timespan class operator date+timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.date d1
        dtm.timespan ts
        string result=""
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+500); result+="d1+(+500d)="+(d1+ts).tostr('.')+"|"                                                                       
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-500); result+="d1+(-500d)="+(d1+ts).tostr('.')+"|"                                                                       
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+80);  result+="d1+(+80d)="+(d1+ts).tostr('.')+"|"                                                                        
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-80);  result+="d1+(-80d)="+(d1+ts).tostr('.')+"|"                                                                        
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+5);   result+="d1+(+5d)="+(d1+ts).tostr('.')+"|"                                                                         
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-5);   result+="d1+(-5d)="+(d1+ts).tostr('.')+"|"                                                                         
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","d1+(+500d)=2023.02.27|d1+(-500d)=2020.06.02|d1+(+80d)=2022.01.03|d1+(-80d)=2021.07.27|d1+(+5d)=2021.10.20|d1+(-5d)=2021.10.10|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)142): 
      testname="Test timespan class operator time+timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.time t1
        dtm.timespan ts
        string result=""
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+26,0,0);             result+="t1+(+26h)="+(t1+ts).tostr(':')+"|"                                              
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-26,0,0);             result+="t1+(-26h)="+(t1+ts).tostr(':')+"|"                                              
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+45,0);            result+="t1+(+1h+45m)="+(t1+ts).tostr(':')+"|"                                           
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-45,0);            result+="t1+(-1h-45m)="+(t1+ts).tostr(':')+"|"                                           
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+45);           result+="t1+(+1h+1m+45s)="+(t1+ts).tostr(':')+"|"                                        
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-45);           result+="t1+(-1h-1m-45s)="+(t1+ts).tostr(':')+"|"                                        
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+500);       result+="t1+(+1h+1m+1s+500ms)="+(t1+ts).tostr(':')+"|"                                   
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-500);       result+="t1+(-1h-1m-1s-500ms)="+(t1+ts).tostr(':')+"|"                                   
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+1,+500);    result+="t1+(+1h+1m+1s+ms+500us)="+(t1+ts).tostr(':')+"|"                                
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-1,-500);    result+="t1+(-1h-1m-1s-ms-500us)="+(t1+ts).tostr(':')+"|"                                
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+1,+1,+500); result+="t1+(+1h+1m+1s+ms+1us+500ns)="+(t1+ts).tostr(':')+"|"                            
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-1,-1,-500); result+="t1+(-1h-1m-1s-ms-1us-500ns)="+(t1+ts).tostr(':')+"|"                            
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","t1+(+26h)=16:10:15.100100100|t1+(-26h)=12:10:15.100100100|t1+(+1h+45m)=15:55:15.100100100|t1+(-1h-45m)=12:25:15.100100100|t1+(+1h+1m+45s)=15:12:00.100100100|t1+(-1h-1m-45s)=13:08:30.100100100|t1+(+1h+1m+1s+500ms)=15:11:16.600100100|t1+(-1h-1m-1s-500ms)=13:09:13.600100100|t1+(+1h+1m+1s+ms+500us)=15:11:16.101600100|t1+(-1h-1m-1s-ms-500us)=13:09:14.098600100|t1+(+1h+1m+1s+ms+1us+500ns)=15:11:16.101101600|t1+(-1h-1m-1s-ms-1us-500ns)=13:09:14.099098600|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)143): 
      testname="Test timespan class operator datetime+timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.datetime dt1
        dtm.timespan ts
        string result=""
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+500);                   result+="dt1+(+500d)="+(dt1+ts).tostr('.',':')+"|"                     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-500);                   result+="dt1+(-500d)="+(dt1+ts).tostr('.',':')+"|"                     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+80);                    result+="dt1+(+80d)="+(dt1+ts).tostr('.',':')+"|"                      
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-80);                    result+="dt1+(-80d)="+(dt1+ts).tostr('.',':')+"|"                      
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+5);                     result+="dt1+(+5d)="+(dt1+ts).tostr('.',':')+"|"                       
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-5);                     result+="dt1+(-5d)="+(dt1+ts).tostr('.',':')+"|"                       
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+26,0,0);             result+="dt1+(+5d+26h)="+(dt1+ts).tostr('.',':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-26,0,0);             result+="dt1+(-5d-26h)="+(dt1+ts).tostr('.',':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+45,0);            result+="dt1+(+1d+1h+45m)="+(dt1+ts).tostr('.',':')+"|"                
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-45,0);            result+="dt1+(-1d-1h-45m)="+(dt1+ts).tostr('.',':')+"|"                
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+45);           result+="dt1+(+1d+1h+1m+45s)="+(dt1+ts).tostr('.',':')+"|"             
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-45);           result+="dt1+(-1d-1h-1m-45s)="+(dt1+ts).tostr('.',':')+"|"             
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+500);       result+="dt1+(+1d+1h+1m+1s+500ms)="+(dt1+ts).tostr('.',':')+"|"        
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-500);       result+="dt1+(-1d-1h-1m-1s-500ms)="+(dt1+ts).tostr('.',':')+"|"        
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+1,+500);    result+="dt1+(+1d+1h+1m+1s+ms+500us)="+(dt1+ts).tostr('.',':')+"|"     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-1,-500);    result+="dt1+(-1d-1h-1m-1s-ms-500us)="+(dt1+ts).tostr('.',':')+"|"     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+1,+1,+500); result+="dt1+(+1d+1h+1m+1s+ms+1us+500ns)="+(dt1+ts).tostr('.',':')+"|" 
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-1,-1,-500); result+="dt1+(-1d-1h-1m-1s-ms-1us-500ns)="+(dt1+ts).tostr('.',':')+"|" 
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","dt1+(+500d)=2023.02.27 14:10:15.100100100|dt1+(-500d)=2020.06.02 14:10:15.100100100|dt1+(+80d)=2022.01.03 14:10:15.100100100|dt1+(-80d)=2021.07.27 14:10:15.100100100|dt1+(+5d)=2021.10.20 14:10:15.100100100|dt1+(-5d)=2021.10.10 14:10:15.100100100|dt1+(+5d+26h)=2021.10.17 16:10:15.100100100|dt1+(-5d-26h)=2021.10.13 12:10:15.100100100|dt1+(+1d+1h+45m)=2021.10.16 15:55:15.100100100|dt1+(-1d-1h-45m)=2021.10.14 12:25:15.100100100|dt1+(+1d+1h+1m+45s)=2021.10.16 15:12:00.100100100|dt1+(-1d-1h-1m-45s)=2021.10.14 13:08:30.100100100|dt1+(+1d+1h+1m+1s+500ms)=2021.10.16 15:11:16.600100100|dt1+(-1d-1h-1m-1s-500ms)=2021.10.14 13:09:13.600100100|dt1+(+1d+1h+1m+1s+ms+500us)=2021.10.16 15:11:16.101600100|dt1+(-1d-1h-1m-1s-ms-500us)=2021.10.14 13:09:14.098600100|dt1+(+1d+1h+1m+1s+ms+1us+500ns)=2021.10.16 15:11:16.101101600|dt1+(-1d-1h-1m-1s-ms-1us-500ns)=2021.10.14 13:09:14.099098600|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)144): 
      testname="Test timespan class operator date-timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.date d1
        dtm.timespan ts
        string result=""
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+500); result+="d1-(+500d)="+(d1-ts).tostr('.')+"|"                                                                       
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-500); result+="d1-(-500d)="+(d1-ts).tostr('.')+"|"                                                                       
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+80);  result+="d1-(+80d)="+(d1-ts).tostr('.')+"|"                                                                        
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-80);  result+="d1-(-80d)="+(d1-ts).tostr('.')+"|"                                                                        
        d1=dtm.date(2021,10,15); ts=dtm.timespan(+5);   result+="d1-(+5d)="+(d1-ts).tostr('.')+"|"                                                                         
        d1=dtm.date(2021,10,15); ts=dtm.timespan(-5);   result+="d1-(-5d)="+(d1-ts).tostr('.')+"|"                                                                         
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","d1-(+500d)=2020.06.02|d1-(-500d)=2023.02.27|d1-(+80d)=2021.07.27|d1-(-80d)=2022.01.03|d1-(+5d)=2021.10.10|d1-(-5d)=2021.10.20|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)145): 
      testname="Test timespan class operator time-timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.time t1
        dtm.timespan ts
        string result=""
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+26,0,0);             result+="t1-(26h)="+(t1-ts).tostr(':')+"|"                                              
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-26,0,0);             result+="t1-(26h)="+(t1-ts).tostr(':')+"|"                                              
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+45,0);            result+="t1-(1h+45m)="+(t1-ts).tostr(':')+"|"                                           
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-45,0);            result+="t1-(1h-45m)="+(t1-ts).tostr(':')+"|"                                           
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+45);           result+="t1-(1h+1m+45s)="+(t1-ts).tostr(':')+"|"                                        
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-45);           result+="t1-(1h-1m-45s)="+(t1-ts).tostr(':')+"|"                                        
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+500);       result+="t1-(1h+1m+1s+500ms)="+(t1-ts).tostr(':')+"|"                                   
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-500);       result+="t1-(1h-1m-1s-500ms)="+(t1-ts).tostr(':')+"|"                                   
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+1,+500);    result+="t1-(1h+1m+1s+ms+500us)="+(t1-ts).tostr(':')+"|"                                
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-1,-500);    result+="t1-(1h-1m-1s-ms-500us)="+(t1-ts).tostr(':')+"|"                                
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,+1,+1,+1,+1,+1,+500); result+="t1-(1h+1m+1s+ms+1us+500ns)="+(t1-ts).tostr(':')+"|"                            
        t1=dtm.time(14,10,15,100,100,100); ts=dtm.timespan(0,-1,-1,-1,-1,-1,-500); result+="t1-(1h-1m-1s-ms-1us-500ns)="+(t1-ts).tostr(':')+"|"                            
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","t1-(26h)=12:10:15.100100100|t1-(26h)=16:10:15.100100100|t1-(1h+45m)=12:25:15.100100100|t1-(1h-45m)=15:55:15.100100100|t1-(1h+1m+45s)=13:08:30.100100100|t1-(1h-1m-45s)=15:12:00.100100100|t1-(1h+1m+1s+500ms)=13:09:13.600100100|t1-(1h-1m-1s-500ms)=15:11:16.600100100|t1-(1h+1m+1s+ms+500us)=13:09:14.098600100|t1-(1h-1m-1s-ms-500us)=15:11:16.101600100|t1-(1h+1m+1s+ms+1us+500ns)=13:09:14.099098600|t1-(1h-1m-1s-ms-1us-500ns)=15:11:16.101101600|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)146): 
      testname="Test timespan class operator datetime-timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.datetime dt1
        dtm.timespan ts
        string result=""
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+500);                   result+="dt1-(+500d)="+(dt1-ts).tostr('.',':')+"|"                     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-500);                   result+="dt1-(-500d)="+(dt1-ts).tostr('.',':')+"|"                     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+80);                    result+="dt1-(+80d)="+(dt1-ts).tostr('.',':')+"|"                      
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-80);                    result+="dt1-(-80d)="+(dt1-ts).tostr('.',':')+"|"                      
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+5);                     result+="dt1-(+5d)="+(dt1-ts).tostr('.',':')+"|"                       
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-5);                     result+="dt1-(-5d)="+(dt1-ts).tostr('.',':')+"|"                       
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+26,0,0);             result+="dt1-(+5d+26h)="+(dt1-ts).tostr('.',':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-26,0,0);             result+="dt1-(-5d-26h)="+(dt1-ts).tostr('.',':')+"|"                   
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+45,0);            result+="dt1-(+1d+1h+45m)="+(dt1-ts).tostr('.',':')+"|"                
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-45,0);            result+="dt1-(-1d-1h-45m)="+(dt1-ts).tostr('.',':')+"|"                
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+45);           result+="dt1-(+1d+1h+1m+45s)="+(dt1-ts).tostr('.',':')+"|"             
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-45);           result+="dt1-(-1d-1h-1m-45s)="+(dt1-ts).tostr('.',':')+"|"             
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+500);       result+="dt1-(+1d+1h+1m+1s+500ms)="+(dt1-ts).tostr('.',':')+"|"        
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-500);       result+="dt1-(-1d-1h-1m-1s-500ms)="+(dt1-ts).tostr('.',':')+"|"        
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+1,+500);    result+="dt1-(+1d+1h+1m+1s+ms+500us)="+(dt1-ts).tostr('.',':')+"|"     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-1,-500);    result+="dt1-(-1d-1h-1m-1s-ms-500us)="+(dt1-ts).tostr('.',':')+"|"     
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(+1,+1,+1,+1,+1,+1,+500); result+="dt1-(+1d+1h+1m+1s+ms+1us+500ns)="+(dt1-ts).tostr('.',':')+"|" 
        dt1=dtm.datetime(2021,10,15,14,10,15,100,100,100); ts=dtm.timespan(-1,-1,-1,-1,-1,-1,-500); result+="dt1-(-1d-1h-1m-1s-ms-1us-500ns)="+(dt1-ts).tostr('.',':')+"|" 
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","dt1-(+500d)=2020.06.02 14:10:15.100100100|dt1-(-500d)=2023.02.27 14:10:15.100100100|dt1-(+80d)=2021.07.27 14:10:15.100100100|dt1-(-80d)=2022.01.03 14:10:15.100100100|dt1-(+5d)=2021.10.10 14:10:15.100100100|dt1-(-5d)=2021.10.20 14:10:15.100100100|dt1-(+5d+26h)=2021.10.13 12:10:15.100100100|dt1-(-5d-26h)=2021.10.17 16:10:15.100100100|dt1-(+1d+1h+45m)=2021.10.14 12:25:15.100100100|dt1-(-1d-1h-45m)=2021.10.16 15:55:15.100100100|dt1-(+1d+1h+1m+45s)=2021.10.14 13:08:30.100100100|dt1-(-1d-1h-1m-45s)=2021.10.16 15:12:00.100100100|dt1-(+1d+1h+1m+1s+500ms)=2021.10.14 13:09:13.600100100|dt1-(-1d-1h-1m-1s-500ms)=2021.10.16 15:11:16.600100100|dt1-(+1d+1h+1m+1s+ms+500us)=2021.10.14 13:09:14.098600100|dt1-(-1d-1h-1m-1s-ms-500us)=2021.10.16 15:11:16.101600100|dt1-(+1d+1h+1m+1s+ms+1us+500ns)=2021.10.14 13:09:14.099098600|dt1-(-1d-1h-1m-1s-ms-1us-500ns)=2021.10.16 15:11:16.101101600|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)147): 
      testname="Test timespan class operator timespan+timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.timespan ts
        dtm.timespan bs
        string result=""
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+500);                   result+="bs+(+500d)="+(bs+ts).tostr(':')+"|"                                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-500);                   result+="bs+(-500d)="+(bs+ts).tostr(':')+"|"                                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+80);                    result+="bs+(+80d)="+(bs+ts).tostr(':')+"|"                                               
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-80);                    result+="bs+(-80d)="+(bs+ts).tostr(':')+"|"                                               
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+5);                     result+="bs+(+5d)="+(bs+ts).tostr(':')+"|"                                                
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-5);                     result+="bs+(-5d)="+(bs+ts).tostr(':')+"|"                                                
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+26,0,0);             result+="bs+(+1d+26h)="+(bs+ts).tostr(':')+"|"                                            
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-26,0,0);             result+="bs+(-1d-26h)="+(bs+ts).tostr(':')+"|"                                            
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+45,0);            result+="bs+(+1d+1h+45m)="+(bs+ts).tostr(':')+"|"                                         
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-45,0);            result+="bs+(-1d-1h-45m)="+(bs+ts).tostr(':')+"|"                                         
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+45);           result+="bs+(+1d+1h+1m+45s)="+(bs+ts).tostr(':')+"|"                                      
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-45);           result+="bs+(-1d-1h-1m-45s)="+(bs+ts).tostr(':')+"|"                                      
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+500);       result+="bs+(+1d+1h+1m+1s+500ms)="+(bs+ts).tostr(':')+"|"                                 
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-500);       result+="bs+(-1d-1h-1m-1s-500ms)="+(bs+ts).tostr(':')+"|"                                 
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+1,+500);    result+="bs+(+1d+1h+1m+1s+1ms+500us)="+(bs+ts).tostr(':')+"|"                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-1,-500);    result+="bs+(-1d-1h-1m-1s-1ms-500us)="+(bs+ts).tostr(':')+"|"                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+1,+1,+500); result+="bs+(+1d+1h+1m+1s+1ms+1us+500ns)="+(bs+ts).tostr(':')+"|"                          
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-1,-1,-500); result+="bs+(-1d-1h-1m-1s-1ms-1us-500ns)="+(bs+ts).tostr(':')+"|"                          
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","bs+(+500d)=+501 01:01:01.001001001|bs+(-500d)=-499 01:01:01.001001001|bs+(+80d)=+81 01:01:01.001001001|bs+(-80d)=-79 01:01:01.001001001|bs+(+5d)=+6 01:01:01.001001001|bs+(-5d)=-4 01:01:01.001001001|bs+(+1d+26h)=+3 03:01:01.001001001|bs+(-1d-26h)=-2 23:01:01.001001001|bs+(+1d+1h+45m)=+2 02:46:01.001001001|bs+(-1d-1h-45m)=-1 23:16:01.001001001|bs+(+1d+1h+1m+45s)=+2 02:02:46.001001001|bs+(-1d-1h-1m-45s)=-1 23:59:16.001001001|bs+(+1d+1h+1m+1s+500ms)=+2 02:02:02.501001001|bs+(-1d-1h-1m-1s-500ms)=-1 23:59:59.501001001|bs+(+1d+1h+1m+1s+1ms+500us)=+2 02:02:02.002501001|bs+(-1d-1h-1m-1s-1ms-500us)=-1 23:59:59.999501001|bs+(+1d+1h+1m+1s+1ms+1us+500ns)=+2 02:02:02.002002501|bs+(-1d-1h-1m-1s-1ms-1us-500ns)=-1 23:59:59.999999501|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)148): 
      testname="Test timespan class operator timespan-timespan"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.timespan ts
        dtm.timespan bs
        string result=""
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+500);                   result+="bs-(+500d)="+(bs-ts).tostr(':')+"|"                                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-500);                   result+="bs-(-500d)="+(bs-ts).tostr(':')+"|"                                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+80);                    result+="bs-(+80d)="+(bs-ts).tostr(':')+"|"                                               
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-80);                    result+="bs-(-80d)="+(bs-ts).tostr(':')+"|"                                               
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+5);                     result+="bs-(+5d)="+(bs-ts).tostr(':')+"|"                                                
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-5);                     result+="bs-(-5d)="+(bs-ts).tostr(':')+"|"                                                
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+26,0,0);             result+="bs-(+5d+26h)="+(bs-ts).tostr(':')+"|"                                            
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-26,0,0);             result+="bs-(-5d-26h)="+(bs-ts).tostr(':')+"|"                                            
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+45,0);            result+="bs-(+1d+1h+45m)="+(bs-ts).tostr(':')+"|"                                         
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-45,0);            result+="bs-(-1d-1h-45m)="+(bs-ts).tostr(':')+"|"                                         
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+45);           result+="bs-(+1d+1h+1m+45s)="+(bs-ts).tostr(':')+"|"                                      
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-45);           result+="bs-(-1d-1h-1m-45s)="+(bs-ts).tostr(':')+"|"                                      
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+500);       result+="bs-(+1d+1h+1m+1s+500ms)="+(bs-ts).tostr(':')+"|"                                 
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-500);       result+="bs-(-1d-1h-1m-1s-500ms)="+(bs-ts).tostr(':')+"|"                                 
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+1,+500);    result+="bs-(+1d+1h+1m+1s+ms+500us)="+(bs-ts).tostr(':')+"|"                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-1,-500);    result+="bs-(-1d-1h-1m-1s-ms-500us)="+(bs-ts).tostr(':')+"|"                              
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(+1,+1,+1,+1,+1,+1,+500); result+="bs-(+1d+1h+1m+1s+ms+1us+500ns)="+(bs-ts).tostr(':')+"|"                          
        bs=dtm.timespan(1,1,1,1,1,1,1); ts=dtm.timespan(-1,-1,-1,-1,-1,-1,-500); result+="bs-(-1d-1h-1m-1s-ms-1us-500ns)="+(bs-ts).tostr(':')+"|"                          
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","bs-(+500d)=-499 01:01:01.001001001|bs-(-500d)=+501 01:01:01.001001001|bs-(+80d)=-79 01:01:01.001001001|bs-(-80d)=+81 01:01:01.001001001|bs-(+5d)=-4 01:01:01.001001001|bs-(-5d)=+6 01:01:01.001001001|bs-(+5d+26h)=-2 23:01:01.001001001|bs-(-5d-26h)=+3 03:01:01.001001001|bs-(+1d+1h+45m)=-1 23:16:01.001001001|bs-(-1d-1h-45m)=+2 02:46:01.001001001|bs-(+1d+1h+1m+45s)=-1 23:59:16.001001001|bs-(-1d-1h-1m-45s)=+2 02:02:46.001001001|bs-(+1d+1h+1m+1s+500ms)=-1 23:59:59.501001001|bs-(-1d-1h-1m-1s-500ms)=+2 02:02:02.501001001|bs-(+1d+1h+1m+1s+ms+500us)=-1 23:59:59.999501001|bs-(-1d-1h-1m-1s-ms-500us)=+2 02:02:02.002501001|bs-(+1d+1h+1m+1s+ms+1us+500ns)=-1 23:59:59.999999501|bs-(-1d-1h-1m-1s-ms-1us-500ns)=+2 02:02:02.002002501|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)149): 
      testname="Test date and time limit values"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        dtm.date d1
        dtm.time t1
        dtm.datetime dt1
        dtm.timespan ts
        string result=""
        d1=dtm.date(0000,1,1);                  ts=dtm.timespan(1);             result+="dz+(1d)="  +(d1 +ts).tostr('.')    +"|"
        d1=dtm.date(0000,1,1);                  ts=dtm.timespan(1);             result+="dz-(1d)="  +(d1 -ts).tostr('.')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,1,0,0,0,0,0); result+="tz+(1hr)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,1,0,0,0,0,0); result+="tz-(1hr)=" +(t1 -ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,1,0,0,0,0); result+="tz+(1mi)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,1,0,0,0,0); result+="tz-(1mi)=" +(t1 -ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,1,0,0,0); result+="tz+(1se)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,1,0,0,0); result+="tz-(1se)=" +(t1 -ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,1,0,0); result+="tz+(1ms)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,1,0,0); result+="tz-(1ms)=" +(t1 -ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,0,1,0); result+="tz+(1us)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,0,1,0); result+="tz-(1us)=" +(t1 -ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,0,0,1); result+="tz+(1ns)=" +(t1 +ts).tostr(':')    +"|"
        t1=dtm.time(0,0,0,0,0,0);               ts=dtm.timespan(0,0,0,0,0,0,1); result+="tz-(1ns)=" +(t1 -ts).tostr(':')    +"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(1,0,0,0,0,0,0); result+="dtz+(1da)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(1,0,0,0,0,0,0); result+="dtz-(1da)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,1,0,0,0,0,0); result+="dtz+(1hr)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,1,0,0,0,0,0); result+="dtz-(1hr)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,1,0,0,0,0); result+="dtz+(1mi)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,1,0,0,0,0); result+="dtz-(1mi)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,1,0,0,0); result+="dtz+(1se)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,1,0,0,0); result+="dtz-(1se)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,1,0,0); result+="dtz+(1ms)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,1,0,0); result+="dtz-(1ms)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,0,1,0); result+="dtz+(1us)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,0,1,0); result+="dtz-(1us)="+(dt1-ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,0,0,1); result+="dtz+(1ns)="+(dt1+ts).tostr('.',':')+"|"
        dt1=dtm.datetime(0000,1,1,0,0,0,0,0,0); ts=dtm.timespan(0,0,0,0,0,0,1); result+="dtz-(1ns)="+(dt1-ts).tostr('.',':')+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","dz+(1d)=0000.01.02|dz-(1d)=-0001.12.31|tz+(1hr)=01:00:00.000000000|tz-(1hr)=23:00:00.000000000|tz+(1mi)=00:01:00.000000000|tz-(1mi)=23:59:00.000000000|tz+(1se)=00:00:01.000000000|tz-(1se)=23:59:59.000000000|tz+(1ms)=00:00:00.001000000|tz-(1ms)=23:59:59.999000000|tz+(1us)=00:00:00.000001000|tz-(1us)=23:59:59.999999000|tz+(1ns)=00:00:00.000000001|tz-(1ns)=23:59:59.999999999|dtz+(1da)=0000.01.02 00:00:00.000000000|dtz-(1da)=-0001.12.31 00:00:00.000000000|dtz+(1hr)=0000.01.01 01:00:00.000000000|dtz-(1hr)=-0001.12.31 23:00:00.000000000|dtz+(1mi)=0000.01.01 00:01:00.000000000|dtz-(1mi)=-0001.12.31 23:59:00.000000000|dtz+(1se)=0000.01.01 00:00:01.000000000|dtz-(1se)=-0001.12.31 23:59:59.000000000|dtz+(1ms)=0000.01.01 00:00:00.001000000|dtz-(1ms)=-0001.12.31 23:59:59.999000000|dtz+(1us)=0000.01.01 00:00:00.000001000|dtz-(1us)=-0001.12.31 23:59:59.999999000|dtz+(1ns)=0000.01.01 00:00:00.000000001|dtz-(1ns)=-0001.12.31 23:59:59.999999999|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)150): 
      testname="Test date comparison operators"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        string result=""
        result+="eq+="+(dtm.date(2021,12,01)==dtm.date(2021,12,01)).tostr()+"|"
        result+="eq-="+(dtm.date(2021,12,01)==dtm.date(2021,12,02)).tostr()+"|"
        result+="ne+="+(dtm.date(2021,12,01)!=dtm.date(2021,12,02)).tostr()+"|"
        result+="ne-="+(dtm.date(2021,12,01)!=dtm.date(2021,12,01)).tostr()+"|"
        result+="ls+="+(dtm.date(2021,12,01)<dtm.date(2021,12,02)).tostr()+"|"
        result+="ls-="+(dtm.date(2021,12,01)<dtm.date(2021,12,01)).tostr()+"|"
        result+="ls-="+(dtm.date(2021,12,02)<dtm.date(2021,12,01)).tostr()+"|"
        result+="le+="+(dtm.date(2021,12,01)<=dtm.date(2021,12,02)).tostr()+"|"
        result+="le+="+(dtm.date(2021,12,01)<=dtm.date(2021,12,01)).tostr()+"|"
        result+="le-="+(dtm.date(2021,12,02)<=dtm.date(2021,12,01)).tostr()+"|"
        result+="gs+="+(dtm.date(2021,12,02)>dtm.date(2021,12,01)).tostr()+"|"
        result+="gs-="+(dtm.date(2021,12,01)>dtm.date(2021,12,01)).tostr()+"|"
        result+="gs-="+(dtm.date(2021,12,01)>dtm.date(2021,12,02)).tostr()+"|"
        result+="ge+="+(dtm.date(2021,12,02)>=dtm.date(2021,12,01)).tostr()+"|"
        result+="ge+="+(dtm.date(2021,12,01)>=dtm.date(2021,12,01)).tostr()+"|"
        result+="ge-="+(dtm.date(2021,12,01)>=dtm.date(2021,12,02)).tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)151): 
      testname="Test time comparison operators"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        string result=""
        result+="eq+="+(dtm.time(09,12,01)==dtm.time(09,12,01)).tostr()+"|"
        result+="eq-="+(dtm.time(09,12,01)==dtm.time(09,12,02)).tostr()+"|"
        result+="ne+="+(dtm.time(09,12,01)!=dtm.time(09,12,02)).tostr()+"|"
        result+="ne-="+(dtm.time(09,12,01)!=dtm.time(09,12,01)).tostr()+"|"
        result+="ls+="+(dtm.time(09,12,01)<dtm.time(09,12,02)).tostr()+"|"
        result+="ls-="+(dtm.time(09,12,01)<dtm.time(09,12,01)).tostr()+"|"
        result+="ls-="+(dtm.time(09,12,02)<dtm.time(09,12,01)).tostr()+"|"
        result+="le+="+(dtm.time(09,12,01)<=dtm.time(09,12,02)).tostr()+"|"
        result+="le+="+(dtm.time(09,12,01)<=dtm.time(09,12,01)).tostr()+"|"
        result+="le-="+(dtm.time(09,12,02)<=dtm.time(09,12,01)).tostr()+"|"
        result+="gs+="+(dtm.time(09,12,02)>dtm.time(09,12,01)).tostr()+"|"
        result+="gs-="+(dtm.time(09,12,01)>dtm.time(09,12,01)).tostr()+"|"
        result+="gs-="+(dtm.time(09,12,01)>dtm.time(09,12,02)).tostr()+"|"
        result+="ge+="+(dtm.time(09,12,02)>=dtm.time(09,12,01)).tostr()+"|"
        result+="ge+="+(dtm.time(09,12,01)>=dtm.time(09,12,01)).tostr()+"|"
        result+="ge-="+(dtm.time(09,12,01)>=dtm.time(09,12,02)).tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)152): 
      testname="Test datetime comparison operators"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        string result=""
        result+="eq+="+(dtm.datetime(2021,12,01)==dtm.datetime(2021,12,01)).tostr()+"|"
        result+="eq-="+(dtm.datetime(2021,12,01)==dtm.datetime(2021,12,02)).tostr()+"|"
        result+="ne+="+(dtm.datetime(2021,12,01)!=dtm.datetime(2021,12,02)).tostr()+"|"
        result+="ne-="+(dtm.datetime(2021,12,01)!=dtm.datetime(2021,12,01)).tostr()+"|"
        result+="ls+="+(dtm.datetime(2021,12,01)<dtm.datetime(2021,12,02)).tostr()+"|"
        result+="ls-="+(dtm.datetime(2021,12,01)<dtm.datetime(2021,12,01)).tostr()+"|"
        result+="ls-="+(dtm.datetime(2021,12,02)<dtm.datetime(2021,12,01)).tostr()+"|"
        result+="le+="+(dtm.datetime(2021,12,01)<=dtm.datetime(2021,12,02)).tostr()+"|"
        result+="le+="+(dtm.datetime(2021,12,01)<=dtm.datetime(2021,12,01)).tostr()+"|"
        result+="le-="+(dtm.datetime(2021,12,02)<=dtm.datetime(2021,12,01)).tostr()+"|"
        result+="gs+="+(dtm.datetime(2021,12,02)>dtm.datetime(2021,12,01)).tostr()+"|"
        result+="gs-="+(dtm.datetime(2021,12,01)>dtm.datetime(2021,12,01)).tostr()+"|"
        result+="gs-="+(dtm.datetime(2021,12,01)>dtm.datetime(2021,12,02)).tostr()+"|"
        result+="ge+="+(dtm.datetime(2021,12,02)>=dtm.datetime(2021,12,01)).tostr()+"|"
        result+="ge+="+(dtm.datetime(2021,12,01)>=dtm.datetime(2021,12,01)).tostr()+"|"
        result+="ge-="+(dtm.datetime(2021,12,01)>=dtm.datetime(2021,12,02)).tostr()+"|"
        result+="eq+="+(dtm.datetime(2021,12,01,09,12,01)==dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="eq-="+(dtm.datetime(2021,12,01,09,12,01)==dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        result+="ne+="+(dtm.datetime(2021,12,01,09,12,01)!=dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        result+="ne-="+(dtm.datetime(2021,12,01,09,12,01)!=dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="ls+="+(dtm.datetime(2021,12,01,09,12,01)<dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        result+="ls-="+(dtm.datetime(2021,12,01,09,12,01)<dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="ls-="+(dtm.datetime(2021,12,01,09,12,02)<dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="le+="+(dtm.datetime(2021,12,01,09,12,01)<=dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        result+="le+="+(dtm.datetime(2021,12,01,09,12,01)<=dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="le-="+(dtm.datetime(2021,12,01,09,12,02)<=dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="gs+="+(dtm.datetime(2021,12,01,09,12,02)>dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="gs-="+(dtm.datetime(2021,12,01,09,12,01)>dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="gs-="+(dtm.datetime(2021,12,01,09,12,01)>dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        result+="ge+="+(dtm.datetime(2021,12,01,09,12,02)>=dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="ge+="+(dtm.datetime(2021,12,01,09,12,01)>=dtm.datetime(2021,12,01,09,12,01)).tostr()+"|"
        result+="ge-="+(dtm.datetime(2021,12,01,09,12,01)>=dtm.datetime(2021,12,01,09,12,02)).tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)153): 
      testname="Test timespan comparison operators"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import dtime as dtm
      .implem
      main:
        string result=""
        result+="eq+="+(dtm.timespan(-1)==dtm.timespan(-1)).tostr()+"|"
        result+="eq-="+(dtm.timespan(-1)==dtm.timespan(+1)).tostr()+"|"
        result+="ne+="+(dtm.timespan(-1)!=dtm.timespan(+1)).tostr()+"|"
        result+="ne-="+(dtm.timespan(-1)!=dtm.timespan(-1)).tostr()+"|"
        result+="ls+="+(dtm.timespan(-1)<dtm.timespan(+1)).tostr()+"|"
        result+="ls-="+(dtm.timespan(-1)<dtm.timespan(-1)).tostr()+"|"
        result+="ls-="+(dtm.timespan(+1)<dtm.timespan(-1)).tostr()+"|"
        result+="le+="+(dtm.timespan(-1)<=dtm.timespan(+1)).tostr()+"|"
        result+="le+="+(dtm.timespan(-1)<=dtm.timespan(-1)).tostr()+"|"
        result+="le-="+(dtm.timespan(+1)<=dtm.timespan(-1)).tostr()+"|"
        result+="gs+="+(dtm.timespan(+1)>dtm.timespan(-1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(-1)>dtm.timespan(-1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(-1)>dtm.timespan(+1)).tostr()+"|"
        result+="ge+="+(dtm.timespan(+1)>=dtm.timespan(-1)).tostr()+"|"
        result+="ge+="+(dtm.timespan(-1)>=dtm.timespan(-1)).tostr()+"|"
        result+="ge-="+(dtm.timespan(-1)>=dtm.timespan(+1)).tostr()+"|"
        result+="eq+="+(dtm.timespan(1)==dtm.timespan(1)).tostr()+"|"
        result+="eq-="+(dtm.timespan(1)==dtm.timespan(2)).tostr()+"|"
        result+="ne+="+(dtm.timespan(1)!=dtm.timespan(2)).tostr()+"|"
        result+="ne-="+(dtm.timespan(1)!=dtm.timespan(1)).tostr()+"|"
        result+="ls+="+(dtm.timespan(1)<dtm.timespan(2)).tostr()+"|"
        result+="ls-="+(dtm.timespan(1)<dtm.timespan(1)).tostr()+"|"
        result+="ls-="+(dtm.timespan(2)<dtm.timespan(1)).tostr()+"|"
        result+="le+="+(dtm.timespan(1)<=dtm.timespan(2)).tostr()+"|"
        result+="le+="+(dtm.timespan(1)<=dtm.timespan(1)).tostr()+"|"
        result+="le-="+(dtm.timespan(2)<=dtm.timespan(1)).tostr()+"|"
        result+="gs+="+(dtm.timespan(2)>dtm.timespan(1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(1)>dtm.timespan(1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(1)>dtm.timespan(2)).tostr()+"|"
        result+="ge+="+(dtm.timespan(2)>=dtm.timespan(1)).tostr()+"|"
        result+="ge+="+(dtm.timespan(1)>=dtm.timespan(1)).tostr()+"|"
        result+="ge-="+(dtm.timespan(1)>=dtm.timespan(2)).tostr()+"|"
        result+="eq+="+(dtm.timespan(1,1,1,1)==dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="eq-="+(dtm.timespan(1,1,1,1)==dtm.timespan(1,1,1,2)).tostr()+"|"
        result+="ne+="+(dtm.timespan(1,1,1,1)!=dtm.timespan(1,1,1,2)).tostr()+"|"
        result+="ne-="+(dtm.timespan(1,1,1,1)!=dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="ls+="+(dtm.timespan(1,1,1,1)<dtm.timespan(1,1,1,2)).tostr()+"|"
        result+="ls-="+(dtm.timespan(1,1,1,1)<dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="ls-="+(dtm.timespan(1,1,1,2)<dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="le+="+(dtm.timespan(1,1,1,1)<=dtm.timespan(1,1,1,2)).tostr()+"|"
        result+="le+="+(dtm.timespan(1,1,1,1)<=dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="le-="+(dtm.timespan(1,1,1,2)<=dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="gs+="+(dtm.timespan(1,1,1,2)>dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(1,1,1,1)>dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="gs-="+(dtm.timespan(1,1,1,1)>dtm.timespan(1,1,1,2)).tostr()+"|"
        result+="ge+="+(dtm.timespan(1,1,1,2)>=dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="ge+="+(dtm.timespan(1,1,1,1)>=dtm.timespan(1,1,1,1)).tostr()+"|"
        result+="ge-="+(dtm.timespan(1,1,1,1)>=dtm.timespan(1,1,1,2)).tostr()+"|"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|eq+=true|eq-=false|ne+=true|ne-=false|ls+=true|ls-=false|ls-=false|le+=true|le+=true|le-=false|gs+=true|gs-=false|gs-=false|ge+=true|ge+=true|ge-=false|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)154): 
      testname="Test static class fields in global variables"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field
      :class
      myclass myobj1
      myclass myobj2
      .implem
      main:
        myclass myobj3
        myclass myobj4
        myobj1.field=1000
        con.print(myobj1.field.tostr()+"-"+myobj2.field.tostr()+"-"+myobj3.field.tostr()+"-"+myobj4.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1000-1000-1000-1000",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)155): 
      testname="Test static class fields in local variables"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field
      :class
      myclass myobj1
      myclass myobj2
      .implem
      main:
        myclass myobj3
        myclass myobj4
        myobj3.field=1000
        con.print(myobj1.field.tostr()+"-"+myobj2.field.tostr()+"-"+myobj3.field.tostr()+"-"+myobj4.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1000-1000-1000-1000",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)156): 
      testname="Test static class fields in global variables with initial value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field
      :class
      myclass myobj1=(myclass){1000}
      myclass myobj2
      .implem
      main:
        myclass myobj3
        myclass myobj4
        con.print(myobj1.field.tostr()+"-"+myobj2.field.tostr()+"-"+myobj3.field.tostr()+"-"+myobj4.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1000-1000-1000-1000",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)157): 
      testname="Test static class fields in local variables with initial value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        .publ
        static int field
      :class
      myclass myobj1
      myclass myobj2
      .implem
      main:
        myclass myobj3=(myclass){1000}
        myclass myobj4
        con.print(myobj1.field.tostr()+"-"+myobj2.field.tostr()+"-"+myobj3.field.tostr()+"-"+myobj4.field.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","1000-1000-1000-1000",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)158): 
      testname="Test unused variable on function"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(int p)
      .implem
      func int func1(int p):
        int i
        return p
      :func
      main:
        func1(5)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""i""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)159): 
      testname="Test unused variable on method"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        string mymethod()
      :class
      .implem
      fmem string myclass.mymethod():
        string str1="ABC"
        string str2="DEF"
        return str1
      :fmem
      main:
        myclass myobj
        myobj.mymethod()
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""str2""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)160): 
      testname="Test unused variable on operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string [!](string opnd1)
      .implem
      oper string [!](string opnd1):
        string str="123"
        return "!"+opnd1
      :oper
      main:
        string var1="ABC"
        string var2=!var1
        con.print(var2)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""str""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)161): 
      testname="Test unused parameter on function"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(int p)
      .implem
      func int func1(int p):
        int i=0
        return i
      :func
      main:
        func1(5)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""p""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)162): 
      testname="Test unused parameter on method"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        string mymethod(int x)
      :class
      .implem
      fmem string myclass.mymethod(int x):
        string str1="ABC"
        return str1
      :fmem
      main:
        myclass myobj
        myobj.mymethod()
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""x""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)163): 
      testname="Test unused parameter on operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string [!](string opnd1)
      .implem
      oper string [!](string opnd1):
        string str="123"
        return "!"+str
      :oper
      main:
        string var1="ABC"
        string var2=!var1
        con.print(var2)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""opnd1""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)164): 
      testname="Test unused variable on private module scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int myvar=1
      .implem
      main:
        int var1=1
        int var2=-var1
        con.print(var2.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""myvar""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)165): 
      testname="Test unused static variable on function"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(int p)
      .implem
      func int func1(int p):
        static int j=0
        int i=p
        return i
      :func
      main:
        func1(5)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""j""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)166): 
      testname="Test unused static variable on method"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        string mymethod(int x)
      :class
      .implem
      fmem string myclass.mymethod(int x):
        static string str1="ABC"
        return x.tostr()
      :fmem
      main:
        myclass myobj
        myobj.mymethod()
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""str1""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)167): 
      testname="Test unused static variable on operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string [!](string opnd1)
      .implem
      oper string [!](string opnd1):
        static string str="123"
        return "!"+opnd1
      :oper
      main:
        string var1="ABC"
        string var2=!var1
        con.print(var2)
      :main
      ]")
      execute_test(testnr,testname,"main","","W132*""str""*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)168): 
      testname="Test unitialized variable error on unary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int int1
        int int2=-int1
        con.print(int2.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)169): 
      testname="Test unitialized variable error on binary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int int1
        int int2=int1+1
        int int3=1+int1
        string str1
        string str2=str1+"n"
        string str3="n"+str1
        con.print(int2.tostr()+int3.tostr()+str2+str3)
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *E131* int1 *E131* str1 *E131* str1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)170): 
      testname="Test unitialized variable error on ternary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        bool cond
        int int1
        int int2
        con.print((cond?1:2).tostr())
        con.print((true?int1:2).tostr())
        con.print((false?1:int2).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* cond *E131* int1 *E131* int2 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)171): 
      testname="Test unitialized variable error on function call passing by value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(int p)
      .implem
      func int func1(int p):
        return p+1  
      :func
      main:
        int int1
        con.print(func1(int1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)172): 
      testname="Test unitialized variable error on function call passing by reference"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(ref int p)
      .implem
      func int func1(ref int p):
        p++
        return p+1  
      :func
      main:
        int int1
        con.print(func1(int1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)173): 
      testname="Test unitialized variable error on array subscripting"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int myindex
        int[] array1=(int[]){1,2,3}
        con.print(array1[myindex].tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* myindex *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)174): 
      testname="Test unitialized static variable error on unary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static int int1
        int int2=-int1
        con.print(int2.tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)175): 
      testname="Test unitialized static variable error on binary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static int int1
        int int2=int1+1
        int int3=1+int1
        static string str1
        string str2=str1+"n"
        string str3="n"+str1
        con.print(int2.tostr()+int3.tostr()+str2+str3)
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *E131* int1 *E131* str1 *E131* str1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)176): 
      testname="Test unitialized static variable error on ternary operator"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static bool cond
        static int int1
        static int int2
        con.print((cond?1:2).tostr())
        con.print((true?int1:2).tostr())
        con.print((false?1:int2).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* cond *E131* int1 *E131* int2 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)177): 
      testname="Test unitialized static variable error on function call passing by value"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(int p)
      .implem
      func int func1(int p):
        return p+1  
      :func
      main:
        static int int1
        con.print(func1(int1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)178): 
      testname="Test unitialized static variable error on function call passing by reference"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      int func1(ref int p)
      .implem
      func int func1(ref int p):
        p++
        return p+1  
      :func
      main:
        static int int1
        con.print(func1(int1).tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* int1 *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)179): 
      testname="Test unitialized static variable error on array subscripting"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        static int myindex
        int[] array1=(int[]){1,2,3}
        con.print(array1[myindex].tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","E131* myindex *",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)180): 
      testname="Test function/fmem overload"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        string mymethod(int x)
        string mymethod(int x,int y)
        string mymethod(string s)
        string mymethod(string s,string t)
      :class
      string myfunc(int x)
      string myfunc(int x,int y)
      string myfunc(string s)
      string myfunc(string s,string t)
      .implem
      fmem string myclass.mymethod(int x):
        return "M1("+x.tostr()+")"
      :fmem
      fmem string myclass.mymethod(int x,int y):
        return "M2("+x.tostr()+y.tostr()+")"
      :fmem
      fmem string myclass.mymethod(string s):
        return "M3("+s+")"
      :fmem
      fmem string myclass.mymethod(string s,string t):
        return "M4("+s+t+")"
      :fmem
      func string myfunc(int x):
        return "F1("+x.tostr()+")"
      :func
      func string myfunc(int x,int y):
        return "F2("+x.tostr()+y.tostr()+")"
      :func
      func string myfunc(string s):
        return "F3("+s+")"
      :func
      func string myfunc(string s,string t):
        return "F4("+s+t+")"
      :func
      main:
        myclass myobj
        con.print(myobj.mymethod((int)1))
        con.print(myobj.mymethod((int)2,(int)3))
        con.print(myobj.mymethod("4"))
        con.print(myobj.mymethod("5","6"))
        con.print(myfunc((int)1))
        con.print(myfunc((int)2,(int)3))
        con.print(myfunc("4"))
        con.print(myfunc("5","6"))
      :main
      ]")
      execute_test(testnr,testname,"main","","M1(1)M2(23)M3(4)M4(56)F1(1)F2(23)F3(4)F4(56)",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)181): 
      testname="Test inner block replication (1 to 3 dimensions)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class ielem:
        int i
        string s
      :class
      class xelem1:
        int i
        string s
        ielem[3] farr
        ielem[] darr
      :class
      class xelem2:
        int i
        string s
        ielem[3,3] farr
        ielem[,] darr
      :class
      class xelem3:
        int i
        string s
        ielem[3,3,3] farr
        ielem[,,] darr
      :class
      .implem
      main:
        
        int u
        int v
        int x

        int i
        int j
        int k
        string result=""
        
        string[3] darr1=(string[3]){"ABC","DEF","GHI"}
        string[]  farr1=(string[]) {"JKL","MNO","PQR"}
        xelem1    carr1=(xelem1)   {7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}
        xelem1[3] xarr1=(xelem1[3]){{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}
        xelem1[]  yarr1=(xelem1[]) {{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{7,"stu",{{1,"abc"},{2,"def"},{3,"ghi"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}
        string[3] darr1r=darr1
        string[]  farr1r=farr1
        xelem1    carr1r=carr1
        xelem1[3] xarr1r=xarr1
        xelem1[]  yarr1r=yarr1
        for(i=0 if i<3 do i++): darr1r[i][2]='*'; farr1r[i][2]='*'; carr1r.farr[i].s[2]='*'; carr1r.darr[i].s[2]='*'; :for
        result+="|1.1: "; for(i=0 if i<3 do i++): result+=darr1[i]; result+=farr1[i]; result+=carr1.farr[i].s; result+=carr1.darr[i].s; :for result+="\n"
        result+="|1.1m:"; for(i=0 if i<3 do i++): result+=darr1r[i]; result+=farr1r[i]; result+=carr1r.farr[i].s; result+=carr1r.darr[i].s; :for result+="\n"
        for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): xarr1r[u].farr[i].s[2]='*'; xarr1r[u].darr[i].s[2]='*'; :for :for
        result+="|1.2: "; for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): result+=xarr1[u].farr[i].s; result+=xarr1[u].darr[i].s; :for :for result+="\n"
        result+="|1.2m:"; for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): result+=xarr1r[u].farr[i].s; result+=xarr1r[u].darr[i].s; :for :for result+="\n"
        for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): yarr1r[u].farr[i].s[2]='*'; yarr1r[u].darr[i].s[2]='*'; :for :for
        result+="|1.3: "; for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): result+=yarr1[u].farr[i].s; result+=yarr1[u].darr[i].s; :for :for result+="\n"
        result+="|1.3m:"; for(u=0 if u<3 do u++): for(i=0 if i<3 do i++): result+=yarr1r[u].farr[i].s; result+=yarr1r[u].darr[i].s; :for :for result+="\n"

        string[3,3] darr2=(string[3,3]){{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}
        string[,]   farr2=(string[,])  {{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}}
        xelem2      carr2=(xelem2)     {7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}
        xelem2[3,3] xarr2=(xelem2[3,3]){{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}
        xelem2[,]   yarr2=(xelem2[,])  {{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{7,"stu",{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}
        string[3,3] darr2r=darr2
        string[,]   farr2r=farr2
        xelem2      carr2r=carr2
        xelem2[3,3] xarr2r=xarr2
        xelem2[,]   yarr2r=yarr2
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): darr2r[i,j][2]='*'; farr2r[i,j][2]='*'; carr2r.farr[i,j].s[2]='*'; carr2r.darr[i,j].s[2]='*'; :for :for
        result+="|2.1: "; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=darr2[i,j] ; result+=farr2[i,j]; result+=carr2.farr[i,j].s; result+=carr2.darr[i,j].s; :for :for result+="\n"
        result+="|2.1m:"; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=darr2r[i,j]; result+=farr2r[i,j]; result+=carr2r.farr[i,j].s; result+=carr2r.darr[i,j].s; :for :for result+="\n"
        for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): xarr2r[u,v].farr[i,j].s[2]='*'; xarr2r[u,v].darr[i,j].s[2]='*'; :for :for :for :for
        result+="|2.2: "; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=xarr2[u,v].farr[i,j].s; result+=xarr2[u,v].darr[i,j].s; :for :for :for :for result+="\n"
        result+="|2.2m:"; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=xarr2r[u,v].farr[i,j].s; result+=xarr2r[u,v].darr[i,j].s; :for :for :for :for result+="\n"
        for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): yarr2r[u,v].farr[i,j].s[2]='*'; yarr2r[u,v].darr[i,j].s[2]='*'; :for :for :for :for
        result+="|2.3: "; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=yarr2[u,v].farr[i,j].s; result+=yarr2[u,v].darr[i,j].s; :for :for :for :for result+="\n"
        result+="|2.3m:"; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): result+=yarr2r[u,v].farr[i,j].s; result+=yarr2r[u,v].darr[i,j].s; :for :for :for :for result+="\n"

        string[3,3,3] darr3=(string[3,3,3]){{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}
        string[,,]    farr3=(string[,,])   {{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}}}
        xelem3        carr3=(xelem3)       {7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}
        xelem3[3,3,3] xarr3=(xelem3[3,3,3]){{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}},{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}},{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}}}
        xelem3[,,]    yarr3=(xelem3[,,])   {{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}},{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}},{{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}},{{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{7,"stu",{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}}}
        string[3,3,3] darr3r=darr3
        string[,,]    farr3r=farr3
        xelem3        carr3r=carr3
        xelem3[3,3,3] xarr3r=xarr3
        xelem3[,,]    yarr3r=yarr3
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): darr3r[i,j,k][2]='*'; farr3r[i,j,k][2]='*'; carr3r.farr[i,j,k].s[2]='*'; carr3r.darr[i,j,k].s[2]='*'; :for :for :for
        result+="|3.1: "; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=darr3[i,j,k]; result+=farr3[i,j,k]; result+=carr3.farr[i,j,k].s; result+=carr3.darr[i,j,k].s; :for :for :for result+="\n"
        result+="|3.1m:"; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=darr3r[i,j,k]; result+=farr3r[i,j,k]; result+=carr3r.farr[i,j,k].s; result+=carr3r.darr[i,j,k].s; :for :for :for result+="\n"
        for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): xarr3r[u,v,x].farr[i,j,k].s[2]='*'; xarr3r[u,v,x].darr[i,j,k].s[2]='*'; :for :for :for :for :for :for
        result+="|3.2: "; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=xarr3[u,v,x].farr[i,j,k].s; result+=xarr3[u,v,x].darr[i,j,k].s; :for :for :for :for :for :for result+="\n"
        result+="|3.2m:"; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=xarr3r[u,v,x].farr[i,j,k].s; result+=xarr3r[u,v,x].darr[i,j,k].s; :for :for :for :for :for :for result+="\n"
        for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): yarr3r[u,v,x].farr[i,j,k].s[2]='*'; yarr3r[u,v,x].darr[i,j,k].s[2]='*'; :for :for :for :for :for :for
        result+="|3.3: "; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=yarr3[u,v,x].farr[i,j,k].s; result+=yarr3[u,v,x].darr[i,j,k].s; :for :for :for :for :for :for result+="\n"
        result+="|3.3m:"; for(u=0 if u<3 do u++): for(v=0 if v<3 do v++): for(x=0 if x<3 do x++): for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): result+=yarr3r[u,v,x].farr[i,j,k].s; result+=yarr3r[u,v,x].darr[i,j,k].s; :for :for :for :for :for :for result+="\n"

        con.print(result.replace(" ","").replace("\n",""))

      :main
      ]")
      execute_test(testnr,testname,"main","",r"[
      |1.1: ABCJKLabcjklDEFMNOdefmnoGHIPQRghipqr
      |1.1m:AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*
      |1.2: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |1.2m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      |1.3: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |1.3m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      |2.1: ABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqr
      |2.1m:AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*
      |2.2: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |2.2m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      |2.3: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |2.3m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      |3.1: ABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqr
      |3.1m:AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*
      |3.2: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |3.2m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      |3.3: abcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqrabcjkldefmnoghipqr
      |3.3m:ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*ab*jk*de*mn*gh*pq*
      ]".replace(" ","").replace("\n",""),false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)182): 
      testname="Test inner block replication (4 and 5 dimensions)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class ielem:
        int i
        string s
      :class
      class xelem4:
        int i
        string s
        ielem[3,3,3,3] farr
        ielem[,,,] darr
      :class
      class xelem5:
        int i
        string s
        ielem[3,3,3,3,3] farr
        ielem[,,,,] darr
      :class
      .implem
      main:
        
        int i
        int j
        int k
        int l
        int m
        string result=""
        
        string[3,3,3,3] darr4=(string[3,3,3,3]){{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}}
        string[,,,]     farr4=(string[,,,])    {{{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}}},{{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}}},{{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}},{{"JKL","MNO","PQR"},{"JKL","MNO","PQR"},{"JKL","MNO","PQR"}}}}
        xelem4          carr4=(xelem4)         {7,"stu",{{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}}},{{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}
        string[3,3,3,3] darr4r=darr4
        string[,,,]     farr4r=farr4
        xelem4          carr4r=carr4
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): darr4r[i,j,k,l][2]='*'; farr4r[i,j,k,l][2]='*'; carr4r.farr[i,j,k,l].s[2]='*'; carr4r.darr[i,j,k,l].s[2]='*'; :for :for :for :for
        result+="|4.1: "; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=darr4[i,j,k,l]; result+=farr4[i,j,k,l]; result+=carr4.farr[i,j,k,l].s; result+=carr4.darr[i,j,k,l].s; :for :for :for :for result+="\n"
        result+="|4.1m:"; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): result+=darr4r[i,j,k,l]; result+=farr4r[i,j,k,l]; result+=carr4r.farr[i,j,k,l].s; result+=carr4r.darr[i,j,k,l].s; :for :for :for :for result+="\n"

        string[3,3,3,3,3] darr5=(string[3,3,3,3,3]){{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}},{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}},{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}}}
        string[,,,,]      farr5=(string[,,,,])     {{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}},{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}},{{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}},{{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}},{{"ABC","DEF","GHI"},{"ABC","DEF","GHI"},{"ABC","DEF","GHI"}}}}}
        xelem5            carr5=(xelem5)           {7,"stu",{{{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}}},{{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}}},{{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}},{{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}},{{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}},{{1,"abc"},{2,"def"},{3,"ghi"}}}}}},{{{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}},{{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}},{{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}},{{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}},{{4,"jkl"},{5,"mno"},{6,"pqr"}}}}}}}
        string[3,3,3,3,3] darr5r=darr5
        string[,,,,]      farr5r=farr5
        xelem5            carr5r=carr5
        for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): darr5r[i,j,k,l,m][2]='*'; farr5r[i,j,k,l,m][2]='*'; carr5r.farr[i,j,k,l,m].s[2]='*'; carr5r.darr[i,j,k,l,m].s[2]='*'; :for :for :for :for :for
        result+="|5.1: "; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=darr5[i,j,k,l,m]; result+=farr5[i,j,k,l,m]; result+=carr5.farr[i,j,k,l,m].s; result+=carr5.darr[i,j,k,l,m].s; :for :for :for :for :for result+="\n"
        result+="|5.1m:"; for(i=0 if i<3 do i++): for(j=0 if j<3 do j++): for(k=0 if k<3 do k++): for(l=0 if l<3 do l++): for(m=0 if m<3 do m++): result+=darr5r[i,j,k,l,m]; result+=farr5r[i,j,k,l,m]; result+=carr5r.farr[i,j,k,l,m].s; result+=carr5r.darr[i,j,k,l,m].s; :for :for :for :for :for result+="\n"

        con.print(result.replace(" ","").replace("\n",""))

      :main
      ]")
      execute_test(testnr,testname,"main","",r"[
      |4.1: ABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqrABCJKLabcjklDEFMNOdefmnoGHIPQRghipqr
      |4.1m:AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*AB*JK*ab*jk*DE*MN*de*mn*GH*PQ*gh*pq*
      |5.1: ABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqrABCABCabcjklDEFDEFdefmnoGHIGHIghipqr
      |5.1m:AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*AB*AB*ab*jk*DE*DE*de*mn*GH*GH*gh*pq*
      ]".replace(" ","").replace("\n",""),false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)183): 
      testname="Test array typecasting"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        int i
        string s
      :class
      .implem
      main:
        int[3] array1=(int[3]){1,2,3}
        int[] array2=(int[]){4,5,6}
        string[3] array3=(string[3]){"abc","def","ghi"}
        string[] array4=(string[]){"jkl","mno","pqr"}
        array1=(int[3])array2
        array2=(int[])array1
        array3=(string[3])array4
        array4=(string[])array3
        walk(array1 on e): con.print(e.tostr()); :walk; con.print("|")
        walk(array2 on e): con.print(e.tostr()); :walk; con.print("|")
        walk(array3 on e): con.print(e);         :walk; con.print("|")
        walk(array4 on e): con.print(e);         :walk; con.print("|")
      :main
      ]")
      execute_test(testnr,testname,"main","","456|456|jklmnopqr|jklmnopqr|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)184): 
      testname="Test nested functions"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      string normalfunc(int par)
      .implem
      func string normalfunc(int par):
        let func string nestedfunc1(int par1,int par2,int par3):
          let func string inner(int par1,int par2):
            let func string inner2(int par): int i=1; int j=2; return "(inner21:"+par.tostr()+","+i.tostr()+","+j.tostr()+")"; :func
            int i=3
            int j=4
            return "(inner1="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner2(5)+")"
          :func
          int i=6
          int j=7
          return "(nested1="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner(8,9)+")"
        :func
        let func string nestedfunc2(int par1,int par2,int par3):
          let func string inner(int par1,int par2):
            let func string inner2(int par): int i=11; int j=12; return "(inner22="+par.tostr()+","+i.tostr()+","+j.tostr()+","+")"; :func
            int i=13
            int j=14
            return "(inner2="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner2(15)+")"
          :func
          int i=16
          int j=17
          return "(nested2="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner(18,19)+")"
        :func
        let func string nestedfunc3(int par1,int par2,int par3):
          let func string inner(int par1,int par2):
            let func string inner2(int par): int i=21; int j=22; return "(inner23="+par.tostr()+","+i.tostr()+","+j.tostr()+","+")"; :func
            int i=23
            int j=24
            return "(inner3="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner2(25)+")"
          :func
          int i=26
          int j=27
          return "(nested3="+par1.tostr()+","+par2.tostr()+","+par3.tostr()+","+par.tostr()+","+i.tostr()+","+j.tostr()+","+inner(28,29)+")"
        :func
        int i=30
        int j=31
        return "(normal="+par.tostr()+nestedfunc1(par,i,j)+nestedfunc2(par,i,j)+nestedfunc3(par,i,j)+")"
      :func
      main:
        con.print(normalfunc(1))
      :main
      ]")
      execute_test(testnr,testname,"main","","(normal=1(nested1=1,30,31,1,6,7,(inner1=8,9,31,1,3,4,(inner21:5,1,2)))(nested2=1,30,31,1,16,17,(inner2=18,19,31,1,13,14,(inner22=15,11,12,)))(nested3=1,30,31,1,26,27,(inner3=28,29,31,1,23,24,(inner23=25,21,22,))))",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)185): 
      testname="Test nested operator overloads"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class integer:
        .publ
        int i
        string tostr()
      :class
      string normalfunc(int par)
      .implem
      fmem string integer.tostr():
        return self.i.tostr()
      :fmem
      func string normalfunc(int par):
        let oper integer [+](integer a,integer b):
          return (integer){a.i+b.i}
        :oper
        let oper integer [-](integer a,integer b):
          return (integer){a.i-b.i}
        :oper
        let oper integer [*](integer a,integer b):
          return (integer){a.i*b.i}
        :oper
        let oper integer [/](integer a,integer b):
          return (integer){a.i/b.i}
        :oper
        let func string tostr(integer a):
          return a.i.tostr()
        :func
        integer x=(integer){10}
        integer y=(integer){5}
        return "+"+(x+y).tostr()+" -"+(x-y).tostr()+" *"+(x*y).tostr()+" /"+(x/y).tostr()+" "+par.tostr()
      :func
      main:
        con.print(normalfunc(1))
      :main
      ]")
      execute_test(testnr,testname,"main","","+15 -5 *50 /2 1",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)186):   
      testname="Test nested classes in public scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      class myclass1:
        .publ
        int pui
        string pus
        string print1()
        class myclass2:
          .publ
          int pui
          string pus
          string print1()
          .priv
          int pri
          string prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass2 cla2
        .priv
        int pri
        string prs
        string print2()
        class myclass3:
          .publ
          int pui
          string pus
          string print1()
          .priv
          int pri
          string prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass3 cla3
        allow main() to pri
        allow main() to prs
        allow main() to print2()
        allow main() to cla3
      :class
      myclass1 cla1=(myclass1){1,"a",{2,"b",3,"c"},4,"d",{5,"e",6,"f"}}
      myclass1.myclass2 cla12=(myclass1.myclass2){7,"g",8,"h"}
      .implem
      fmem string myclass1.print1():
        string result=""
        result+="P1:pui1="+self.pui.tostr()+","
        result+="P1:pus1="+self.pus+","
        result+="P1:pri1="+self.pri.tostr()+","
        result+="P1:prs1="+self.prs+","
        result+="P1:cla2("+self.cla2.print1()+"),"
        result+="P1:cla3("+self.cla3.print1()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print1():
        string result=""
        result+="P1:pui2="+self.pui.tostr()+","
        result+="P1:pus2="+self.pus+","
        result+="P1:pri2="+self.pri.tostr()+","
        result+="P1:prs2="+self.prs
        return result
      :fmem
      fmem string myclass1.myclass3.print1():
        string result=""
        result+="P1:pui3="+self.pui.tostr()+","
        result+="P1:pus3="+self.pus+","
        result+="P1:pri3="+self.pri.tostr()+","
        result+="P1:prs3="+self.prs
        return result
      :fmem
      fmem string myclass1.print2():
        string result=""
        result+="P2:pui1="+self.pui.tostr()+","
        result+="P2:pus1="+self.pus+","
        result+="P2:pri1="+self.pri.tostr()+","
        result+="P2:prs1="+self.prs+","
        result+="P2:cla2("+self.cla2.print2()+"),"
        result+="P2:cla3("+self.cla3.print2()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print2():
        string result=""
        result+="P2:pui2="+self.pui.tostr()+","
        result+="P2:pus2="+self.pus+","
        result+="P2:pri2="+self.pri.tostr()+","
        result+="P2:prs2="+self.prs
        return result
      :fmem
      fmem string myclass1.myclass3.print2():
        string result=""
        result+="P2:pui3="+self.pui.tostr()+","
        result+="P2:pus3="+self.pus+","
        result+="P2:pri3="+self.pri.tostr()+","
        result+="P2:prs3="+self.prs
        return result
      :fmem
      main:
        con.print(cla1.pui.tostr()+",")
        con.print(cla1.pus+",")
        con.print(cla1.pri.tostr()+",")
        con.print(cla1.prs+",")
        con.print(cla1.cla2.pui.tostr()+",")
        con.print(cla1.cla2.pus+",")
        con.print(cla1.cla2.pri.tostr()+",")
        con.print(cla1.cla2.prs+",")
        con.print(cla1.cla3.pui.tostr()+",")
        con.print(cla1.cla3.pus+",")
        con.print(cla1.cla3.pri.tostr()+",")
        con.print(cla1.cla3.prs+",")
        con.print(cla12.pui.tostr()+",")
        con.print(cla12.pus+",")
        con.print(cla12.pri.tostr()+",")
        con.print(cla12.prs+"|")
        con.print(cla1.print1()+"|")
        con.print(cla1.cla2.print1()+"|")
        con.print(cla1.cla3.print1()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla1.cla2.print2()+"|")
        con.print(cla1.cla3.print2()+"|")
        con.print(cla12.print2())
      :main
      ]")
      execute_test(testnr,testname,"main","","1,a,4,d,2,b,3,c,5,e,6,f,7,g,8,h|P1:pui1=1,P1:pus1=a,P1:pri1=4,P1:prs1=d,P1:cla2(P1:pui2=2,P1:pus2=b,P1:pri2=3,P1:prs2=c),P1:cla3(P1:pui3=5,P1:pus3=e,P1:pri3=6,P1:prs3=f)|P1:pui2=2,P1:pus2=b,P1:pri2=3,P1:prs2=c|P1:pui3=5,P1:pus3=e,P1:pri3=6,P1:prs3=f|P1:pui2=7,P1:pus2=g,P1:pri2=8,P1:prs2=h|P2:pui1=1,P2:pus1=a,P2:pri1=4,P2:prs1=d,P2:cla2(P2:pui2=2,P2:pus2=b,P2:pri2=3,P2:prs2=c),P2:cla3(P2:pui3=5,P2:pus3=e,P2:pri3=6,P2:prs3=f)|P2:pui2=2,P2:pus2=b,P2:pri2=3,P2:prs2=c|P2:pui3=5,P2:pus3=e,P2:pri3=6,P2:prs3=f|P2:pui2=7,P2:pus2=g,P2:pri2=8,P2:prs2=h",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)187):   
      testname="Test nested classes in private scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int pui
        string pus
        string print1()
        class myclass2:
          .publ
          int pui
          string pus
          string print1()
          .priv
          int pri
          string prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass2 cla2
        .priv
        int pri
        string prs
        string print2()
        class myclass3:
          .publ
          int pui
          string pus
          string print1()
          .priv
          int pri
          string prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass3 cla3
        allow main() to pri
        allow main() to prs
        allow main() to print2()
        allow main() to cla3
      :class
      myclass1 cla1=(myclass1){1,"a",{2,"b",3,"c"},4,"d",{5,"e",6,"f"}}
      myclass1.myclass2 cla12=(myclass1.myclass2){7,"g",8,"h"}
      .implem
      fmem string myclass1.print1():
        string result=""
        result+="P1:pui1="+self.pui.tostr()+","
        result+="P1:pus1="+self.pus+","
        result+="P1:pri1="+self.pri.tostr()+","
        result+="P1:prs1="+self.prs+","
        result+="P1:cla2("+self.cla2.print1()+"),"
        result+="P1:cla3("+self.cla3.print1()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print1():
        string result=""
        result+="P1:pui2="+self.pui.tostr()+","
        result+="P1:pus2="+self.pus+","
        result+="P1:pri2="+self.pri.tostr()+","
        result+="P1:prs2="+self.prs
        return result
      :fmem
      fmem string myclass1.myclass3.print1():
        string result=""
        result+="P1:pui3="+self.pui.tostr()+","
        result+="P1:pus3="+self.pus+","
        result+="P1:pri3="+self.pri.tostr()+","
        result+="P1:prs3="+self.prs
        return result
      :fmem
      fmem string myclass1.print2():
        string result=""
        result+="P2:pui1="+self.pui.tostr()+","
        result+="P2:pus1="+self.pus+","
        result+="P2:pri1="+self.pri.tostr()+","
        result+="P2:prs1="+self.prs+","
        result+="P2:cla2("+self.cla2.print2()+"),"
        result+="P2:cla3("+self.cla3.print2()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print2():
        string result=""
        result+="P2:pui2="+self.pui.tostr()+","
        result+="P2:pus2="+self.pus+","
        result+="P2:pri2="+self.pri.tostr()+","
        result+="P2:prs2="+self.prs
        return result
      :fmem
      fmem string myclass1.myclass3.print2():
        string result=""
        result+="P2:pui3="+self.pui.tostr()+","
        result+="P2:pus3="+self.pus+","
        result+="P2:pri3="+self.pri.tostr()+","
        result+="P2:prs3="+self.prs
        return result
      :fmem
      main:
        con.print(cla1.pui.tostr()+",")
        con.print(cla1.pus+",")
        con.print(cla1.pri.tostr()+",")
        con.print(cla1.prs+",")
        con.print(cla1.cla2.pui.tostr()+",")
        con.print(cla1.cla2.pus+",")
        con.print(cla1.cla2.pri.tostr()+",")
        con.print(cla1.cla2.prs+",")
        con.print(cla1.cla3.pui.tostr()+",")
        con.print(cla1.cla3.pus+",")
        con.print(cla1.cla3.pri.tostr()+",")
        con.print(cla1.cla3.prs+",")
        con.print(cla12.pui.tostr()+",")
        con.print(cla12.pus+",")
        con.print(cla12.pri.tostr()+",")
        con.print(cla12.prs+"|")
        con.print(cla1.print1()+"|")
        con.print(cla1.cla2.print1()+"|")
        con.print(cla1.cla3.print1()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla1.cla2.print2()+"|")
        con.print(cla1.cla3.print2()+"|")
        con.print(cla12.print2())
      :main
      ]")
      execute_test(testnr,testname,"main","","1,a,4,d,2,b,3,c,5,e,6,f,7,g,8,h|P1:pui1=1,P1:pus1=a,P1:pri1=4,P1:prs1=d,P1:cla2(P1:pui2=2,P1:pus2=b,P1:pri2=3,P1:prs2=c),P1:cla3(P1:pui3=5,P1:pus3=e,P1:pri3=6,P1:prs3=f)|P1:pui2=2,P1:pus2=b,P1:pri2=3,P1:prs2=c|P1:pui3=5,P1:pus3=e,P1:pri3=6,P1:prs3=f|P1:pui2=7,P1:pus2=g,P1:pri2=8,P1:prs2=h|P2:pui1=1,P2:pus1=a,P2:pri1=4,P2:prs1=d,P2:cla2(P2:pui2=2,P2:pus2=b,P2:pri2=3,P2:prs2=c),P2:cla3(P2:pui3=5,P2:pus3=e,P2:pri3=6,P2:prs3=f)|P2:pui2=2,P2:pus2=b,P2:pri2=3,P2:prs2=c|P2:pui3=5,P2:pus3=e,P2:pri3=6,P2:prs3=f|P2:pui2=7,P2:pus2=g,P2:pri2=8,P2:prs2=h",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)188):   
      testname="Test nested classes in local scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        class myclass1:
          .publ
          int pui
          string pus
          class myclass2:
            .publ
            int pui
            string pus
            .priv
            int pri
            string prs
            allow main() to pri
            allow main() to prs
          :class
          myclass2 cla2
          .priv
          int pri
          string prs
          class myclass3:
            .publ
            int pui
            string pus
            .priv
            int pri
            string prs
            allow main() to pri
            allow main() to prs
          :class
          myclass3 cla3
          allow main() to pri
          allow main() to prs
          allow main() to cla3
        :class
        myclass1 cla1=(myclass1){1,"a",{2,"b",3,"c"},4,"d",{5,"e",6,"f"}}
        myclass1.myclass2 cla12=(myclass1.myclass2){7,"g",8,"h"}
        con.print(cla1.pui.tostr()+",")
        con.print(cla1.pus+",")
        con.print(cla1.pri.tostr()+",")
        con.print(cla1.prs+",")
        con.print(cla1.cla2.pui.tostr()+",")
        con.print(cla1.cla2.pus+",")
        con.print(cla1.cla2.pri.tostr()+",")
        con.print(cla1.cla2.prs+",")
        con.print(cla1.cla3.pui.tostr()+",")
        con.print(cla1.cla3.pus+",")
        con.print(cla1.cla3.pri.tostr()+",")
        con.print(cla1.cla3.prs+",")
        con.print(cla12.pui.tostr()+",")
        con.print(cla12.pus+",")
        con.print(cla12.pri.tostr()+",")
        con.print(cla12.prs)
      :main
      ]")
      execute_test(testnr,testname,"main","","1,a,4,d,2,b,3,c,5,e,6,f,7,g,8,h",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)189):   
      testname="Test nested classes with static fields in public scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      class myclass1:
        .publ
        int pui
        static int pus
        string print1()
        class myclass2:
          .publ
          int pui
          static int pus
          string print1()
          .priv
          int pri
          static int prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass2 cla2
        .priv
        int pri
        static int prs
        string print2()
        class myclass3:
          .publ
          int pui
          static int pus
          string print1()
          .priv
          int pri
          static int prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow myclass1 to print2()
        :class
        myclass3 cla3
        allow main() to pri
        allow main() to prs
        allow main() to print2()
        allow main() to cla3
      :class
      myclass1 cla1=(myclass1){1,10,{2,20,3,30},4,40,{5,50,6,60}}
      myclass1.myclass2 cla12=(myclass1.myclass2){7,71,8,81}
      myclass1 cla2=(myclass1){19,12,{29,22,39,32},49,42,{59,52,69,62}}
      myclass1.myclass2 cla22=(myclass1.myclass2){79,73,89,83}
      .implem
      fmem string myclass1.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+="cla2("+self.cla2.print1()+"),"
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()+","
        result+="cla3("+self.cla3.print1()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.myclass3.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+="cla2("+self.cla2.print2()+"),"
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()+","
        result+="cla3("+self.cla3.print2()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.myclass3.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      main:
        con.print(cla1.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla12.print2()+"|")
        con.print(cla2.print1()+"|")
        con.print(cla2.print2()+"|")
        con.print(cla22.print1()+"|")
        con.print(cla22.print2()+"|")
        cla1.pui+=1
        cla1.pus+=1
        cla1.cla2.pui+=1
        cla1.cla2.pus+=1
        cla1.cla2.pri+=1
        cla1.cla2.prs+=1
        cla1.pri+=1
        cla1.prs+=1
        cla1.cla3.pui+=1
        cla1.cla3.pus+=1
        cla1.cla3.pri+=1
        cla1.cla3.prs+=1
        con.print("----------")
        con.print(cla1.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla12.print2()+"|")
        con.print(cla2.print1()+"|")
        con.print(cla2.print2()+"|")
        con.print(cla22.print1()+"|")
        con.print(cla22.print2()+"|")
      :main
      ]")
      execute_test(testnr,testname,"main","","1,12,cla2(2,73,3,83),4,42,cla3(5,52,6,62)|1,12,cla2(2,73,3,83),4,42,cla3(5,52,6,62)|7,73,8,83|7,73,8,83|19,12,cla2(29,73,39,83),49,42,cla3(59,52,69,62)|19,12,cla2(29,73,39,83),49,42,cla3(59,52,69,62)|79,73,89,83|79,73,89,83|----------2,13,cla2(3,74,4,84),5,43,cla3(6,53,7,63)|2,13,cla2(3,74,4,84),5,43,cla3(6,53,7,63)|7,74,8,84|7,74,8,84|19,13,cla2(29,74,39,84),49,43,cla3(59,53,69,63)|19,13,cla2(29,74,39,84),49,43,cla3(59,53,69,63)|79,74,89,84|79,74,89,84|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)190):   
      testname="Test nested classes with static fields in private scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass1:
        .publ
        int pui
        static int pus
        string print1()
        class myclass2:
          .publ
          int pui
          static int pus
          string print1()
          .priv
          int pri
          static int prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow main() to print2()
          allow myclass1 to print2()
        :class
        myclass2 cla2
        .priv
        int pri
        static int prs
        string print2()
        class myclass3:
          .publ
          int pui
          static int pus
          string print1()
          .priv
          int pri
          static int prs
          string print2()
          allow main() to pri
          allow main() to prs
          allow myclass1 to print2()
        :class
        myclass3 cla3
        allow main() to pri
        allow main() to prs
        allow main() to print2()
        allow main() to cla3
      :class
      myclass1 cla1=(myclass1){1,10,{2,20,3,30},4,40,{5,50,6,60}}
      myclass1.myclass2 cla12=(myclass1.myclass2){7,71,8,81}
      myclass1 cla2=(myclass1){19,12,{29,22,39,32},49,42,{59,52,69,62}}
      myclass1.myclass2 cla22=(myclass1.myclass2){79,73,89,83}
      .implem
      fmem string myclass1.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+="cla2("+self.cla2.print1()+"),"
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()+","
        result+="cla3("+self.cla3.print1()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.myclass3.print1():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+="cla2("+self.cla2.print2()+"),"
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()+","
        result+="cla3("+self.cla3.print2()+")"
        return result
      :fmem
      fmem string myclass1.myclass2.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      fmem string myclass1.myclass3.print2():
        string result=""
        result+=self.pui.tostr()+","
        result+=self.pus.tostr()+","
        result+=self.pri.tostr()+","
        result+=self.prs.tostr()
        return result
      :fmem
      main:
        con.print(cla1.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla12.print2()+"|")
        con.print(cla2.print1()+"|")
        con.print(cla2.print2()+"|")
        con.print(cla22.print1()+"|")
        con.print(cla22.print2()+"|")
        cla1.pui+=1
        cla1.pus+=1
        cla1.cla2.pui+=1
        cla1.cla2.pus+=1
        cla1.cla2.pri+=1
        cla1.cla2.prs+=1
        cla1.pri+=1
        cla1.prs+=1
        cla1.cla3.pui+=1
        cla1.cla3.pus+=1
        cla1.cla3.pri+=1
        cla1.cla3.prs+=1
        con.print("----------")
        con.print(cla1.print1()+"|")
        con.print(cla1.print2()+"|")
        con.print(cla12.print1()+"|")
        con.print(cla12.print2()+"|")
        con.print(cla2.print1()+"|")
        con.print(cla2.print2()+"|")
        con.print(cla22.print1()+"|")
        con.print(cla22.print2()+"|")
      :main
      ]")
      execute_test(testnr,testname,"main","","1,12,cla2(2,73,3,83),4,42,cla3(5,52,6,62)|1,12,cla2(2,73,3,83),4,42,cla3(5,52,6,62)|7,73,8,83|7,73,8,83|19,12,cla2(29,73,39,83),49,42,cla3(59,52,69,62)|19,12,cla2(29,73,39,83),49,42,cla3(59,52,69,62)|79,73,89,83|79,73,89,83|----------2,13,cla2(3,74,4,84),5,43,cla3(6,53,7,63)|2,13,cla2(3,74,4,84),5,43,cla3(6,53,7,63)|7,74,8,84|7,74,8,84|19,13,cla2(29,74,39,84),49,43,cla3(59,53,69,63)|19,13,cla2(29,74,39,84),49,43,cla3(59,53,69,63)|79,74,89,84|79,74,89,84|",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)191):   
      testname="Test nested classes with static fields in local scope"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        class myclass1:
          .publ
          int pui
          static int pus
          class myclass2:
            .publ
            int pui
            static int pus
            .priv
            int pri
            static int prs
            allow main() to pri
            allow main() to prs
            allow print() to pri
            allow print() to prs
          :class
          myclass2 cla2
          .priv
          int pri
          static int prs
          class myclass3:
            .publ
            int pui
            static int pus
            .priv
            int pri
            static int prs
            allow main() to pri
            allow main() to prs
            allow print() to pri
            allow print() to prs
          :class
          myclass3 cla3
          allow main() to pri
          allow main() to prs
          allow main() to cla3
          allow print() to pri
          allow print() to prs
          allow print() to cla3
        :class
        let func void print(myclass1 a,myclass1.myclass2 b,myclass1 c, myclass1.myclass2 d):
          con.print(a.pui.tostr()+",")
          con.print(a.pus.tostr()+",")
          con.print(a.cla2.pui.tostr()+",")
          con.print(a.cla2.pus.tostr()+",")
          con.print(a.cla2.pri.tostr()+",")
          con.print(a.cla2.prs.tostr()+",")
          con.print(a.pri.tostr()+",")
          con.print(a.prs.tostr()+",")
          con.print(a.cla3.pui.tostr()+",")
          con.print(a.cla3.pus.tostr()+",")
          con.print(a.cla3.pri.tostr()+",")
          con.print(a.cla3.prs.tostr()+"|")
          con.print(b.pui.tostr()+",")
          con.print(b.pus.tostr()+",")
          con.print(b.pri.tostr()+",")
          con.print(b.prs.tostr()+"|")
          con.print(c.pui.tostr()+",")
          con.print(c.pus.tostr()+",")
          con.print(c.cla2.pui.tostr()+",")
          con.print(c.cla2.pus.tostr()+",")
          con.print(c.cla2.pri.tostr()+",")
          con.print(c.cla2.prs.tostr()+",")
          con.print(c.pri.tostr()+",")
          con.print(c.prs.tostr()+",")
          con.print(c.cla3.pui.tostr()+",")
          con.print(c.cla3.pus.tostr()+",")
          con.print(c.cla3.pri.tostr()+",")
          con.print(c.cla3.prs.tostr()+"|")
          con.print(d.pui.tostr()+",")
          con.print(d.pus.tostr()+",")
          con.print(d.pri.tostr()+",")
          con.print(d.prs.tostr()+"|")
          con.print("--------")
        :func
        myclass1 cla1=(myclass1){1,10,{2,20,3,30},4,40,{5,50,6,60}}
        myclass1.myclass2 cla12=(myclass1.myclass2){7,71,8,81}
        myclass1 cla2=(myclass1){19,12,{29,22,39,32},49,42,{59,52,69,62}}
        myclass1.myclass2 cla22=(myclass1.myclass2){79,73,89,83}
        print(cla1,cla12,cla2,cla22)
        cla1.pui+=1
        cla1.pus+=1
        cla1.cla2.pui+=1
        cla1.cla2.pus+=1
        cla1.cla2.pri+=1
        cla1.cla2.prs+=1
        cla1.pri+=1
        cla1.prs+=1
        cla1.cla3.pui+=1
        cla1.cla3.pus+=1
        cla1.cla3.pri+=1
        cla1.cla3.prs+=1
        print(cla1,cla12,cla2,cla22)
      :main
      ]")
      execute_test(testnr,testname,"main","","1,12,2,73,3,83,4,42,5,52,6,62|7,73,8,83|19,12,29,73,39,83,49,42,59,52,69,62|79,73,89,83|--------2,13,3,74,4,84,5,43,6,53,7,63|7,74,8,84|19,13,29,74,39,84,49,43,59,53,69,63|79,74,89,84|--------",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)192): 
      testname="Test for() expression"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        string result
        result="("+for(string s="" if s.len()<5 do s+="a" return s)+")"
        result+="("+for(string t=for(var s="" if s.len()<5 do s+="b" return s) if t.len()<10 do t+="c" return t)+")"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","(aaaaa)(bbbbbccccc)",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)193): 
      testname="Test array() expression"
      create_script(testnr,"main", r"[
      .libs 
      import system as sys
      import console as con
      .private
      void func1()
      void func2()
      void func3()
      void func4()
      .implem
      func void func1():
        int[] x=(int[]){1,2,3,-1,-2,-3}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j].tostr())
        :for
        con.print(">")
        int[] y
        y=array(x on n index i if n>0 as n*2+(int)i); con.print("01:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for
        y=array(x on n index i as n*2+(int)i);        con.print("02:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for        
        y=array(x on n if n>0 as n*2);                con.print("03:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for                
        y=array(x on n as n*2);                       con.print("04:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for                       
        word i
        y=array(x on n index i if n>0 as n*2+(int)i); con.print("05:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for 
        y=array(x on n index i as n*2+(int)i);        con.print("06:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for        
      :func
      func void func2():
        int[6] x=(int[6]){1,2,3,-1,-2,-3}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j].tostr())
        :for
        con.print(">")
        int[] y
        y=array(x on n index i if n>0 as n*2+(int)i); con.print("01:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for
        y=array(x on n index i as n*2+(int)i);        con.print("02:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for        
        y=array(x on n if n>0 as n*2);                con.print("03:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for                
        y=array(x on n as n*2);                       con.print("04:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for                       
        word i
        y=array(x on n index i if n>0 as n*2+(int)i); con.print("05:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for 
        y=array(x on n index i as n*2+(int)i);        con.print("06:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j].tostr()+")"); :for        
      :func
      func void func3():
        string[] x=(string[]){"+a","-b","+c","-d","+e","-f"}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j])
        :for
        con.print(">")
        string[] y
        y=array(x on n index i if n.startswith("+") as n.upper()+i.tostr()); con.print("01:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for
        y=array(x on n index i as n.upper()+i.tostr());                      con.print("02:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for        
        y=array(x on n if n.startswith("+") as n.upper());                   con.print("03:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for                
        y=array(x on n as n.upper());                                        con.print("04:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for                       
        word i
        y=array(x on n index i if n.startswith("+") as n.upper()+i.tostr()); con.print("05:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for
        y=array(x on n index i as n.upper()+i.tostr());                      con.print("06:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for        
      :func
      func void func4():
        string[6] x=(string[6]){"+a","-b","+c","-d","+e","-f"}
        for(int j=0 if j<x.len() do j++):
          con.print(x[j])
        :for
        con.print(">")
        string[] y
        y=array(x on n index i if n.startswith("+") as n.upper()+i.tostr()); con.print("01:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for
        y=array(x on n index i as n.upper()+i.tostr());                      con.print("02:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for        
        y=array(x on n if n.startswith("+") as n.upper());                   con.print("03:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for                
        y=array(x on n as n.upper());                                        con.print("04:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for                       
        word i
        y=array(x on n index i if n.startswith("+") as n.upper()+i.tostr()); con.print("05:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for
        y=array(x on n index i as n.upper()+i.tostr());                      con.print("06:"); for(int j=0 if j<y.len() do j++): con.print("("+y[j]+")"); :for        
      :func
      main:
        func1()
        con.print("***")
        func2()
        con.print("***")
        func3()
        con.print("***")
        func4()
        con.print("***")
      :main
      ]")
      execute_test(testnr,testname,"main","","123-1-2-3>01:(2)(5)(8)02:(2)(5)(8)(1)(0)(-1)03:(2)(4)(6)04:(2)(4)(6)(-2)(-4)(-6)05:(2)(5)(8)06:(2)(5)(8)(1)(0)(-1)***123-1-2-3>01:(2)(5)(8)02:(2)(5)(8)(1)(0)(-1)03:(2)(4)(6)04:(2)(4)(6)(-2)(-4)(-6)05:(2)(5)(8)06:(2)(5)(8)(1)(0)(-1)***+a-b+c-d+e-f>01:(+A0)(+C2)(+E4)02:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)03:(+A)(+C)(+E)04:(+A)(-B)(+C)(-D)(+E)(-F)05:(+A0)(+C2)(+E4)06:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)***+a-b+c-d+e-f>01:(+A0)(+C2)(+E4)02:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)03:(+A)(+C)(+E)04:(+A)(-B)(+C)(-D)(+E)(-F)05:(+A0)(+C2)(+E4)06:(+A0)(-B1)(+C2)(-D3)(+E4)(-F5)***",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)194): 
      testname="Call all standard calls in module math"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import math as ma
      .implem
      main:
        ma.seed(12345)
        string result=""
        result+="e="+ma.e.tostr()+","
        result+="pi="+ma.pi.tostr()+","
        result+="phi="+ma.phi.tostr()+","
        result+="abschr="+ma.abs((char)1).toint().tostr()+","
        result+="absshr="+ma.abs((short)1).tostr()+","
        result+="absint="+ma.abs((int)1).tostr()+","
        result+="abslon="+ma.abs((long)1).tostr()+","
        result+="absflo="+ma.abs((float)1).tostr()+","
        result+="minchr="+ma.min((char)1,(char)2).toint().tostr()+","
        result+="minshr="+ma.min((short)1,(short)2).tostr()+","
        result+="minint="+ma.min((int)1,(int)2).tostr()+","
        result+="minlon="+ma.min((long)1,(long)2).tostr()+","
        result+="minflo="+ma.min((float)1,(float)2).tostr()+","
        result+="maxchr="+ma.max((char)1,(char)2).toint().tostr()+","
        result+="maxshr="+ma.max((short)1,(short)2).tostr()+","
        result+="maxint="+ma.max((int)1,(int)2).tostr()+","
        result+="maxlon="+ma.max((long)1,(long)2).tostr()+","
        result+="maxflo="+ma.max((float)1,(float)2).tostr()+","
        result+="exp="+ma.exp(1.5).tostr()+","
        result+="ln="+ma.ln(1.5).tostr()+","
        result+="log="+ma.log(1.5).tostr()+","
        result+="logn="+ma.logn(10,100).tostr()+","
        result+="pow="+ma.pow(10,10).tostr()+","
        result+="sqrt="+ma.sqrt(1.5).tostr()+","
        result+="cbrt="+ma.cbrt(1.5).tostr()+","
        result+="sin="+ma.sin(1.5).tostr()+","
        result+="cos="+ma.cos(1.5).tostr()+","
        result+="tan="+ma.tan(1.5).tostr()+","
        result+="asin="+ma.asin(0.75).tostr()+","
        result+="acos="+ma.acos(0.75).tostr()+","
        result+="atan="+ma.atan(1.5).tostr()+","
        result+="sinh="+ma.sinh(1.5).tostr()+","
        result+="cosh="+ma.cosh(1.5).tostr()+","
        result+="tanh="+ma.tanh(1.5).tostr()+","
        result+="asinh="+ma.asinh(1.5).tostr()+","
        result+="acosh="+ma.acosh(1.5).tostr()+","
        result+="atanh="+ma.atanh(0.5).tostr()+","
        result+="ceil="+ma.ceil(1.5).tostr()+","
        result+="floor="+ma.floor(1.5).tostr()+","
        result+="round="+ma.round(100.123,2).tostr()+","
        result+="rand="+ma.rand().tostr()
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","e=2.718282,pi=3.141593,phi=1.618034,abschr=1,absshr=1,absint=1,abslon=1,absflo=1.000000,minchr=1,minshr=1,minint=1,minlon=1,minflo=1.000000,maxchr=2,maxshr=2,maxint=2,maxlon=2,maxflo=2.000000,exp=4.481689,ln=0.405465,log=0.176091,logn=0.500000,pow=10000000000.000000,sqrt=1.224745,cbrt=1.144714,sin=0.997495,cos=0.070737,tan=14.101420,asin=0.848062,acos=0.722734,atan=0.982794,sinh=2.129279,cosh=2.352410,tanh=0.905148,asinh=1.194763,acosh=0.962424,atanh=0.549306,ceil=2,floor=1,round=100,rand=*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)195): 
      testname="Call all standard calls in module console"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        con.println("Hello")
        con.print(",man!")
        con.eprintln("Hello")
        con.eprint(",man!")
      :main
      ]")
      execute_test(testnr,testname,"main","","Hello\\n,man!Hello\\n,man!",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)196): 
      testname="Call all standard calls in module fileio"
      create_script(testnr,"main", r"[
      .libs
      import system as sys
      import console as con
      import fileio as io
      .implem
      main:
        
        int hnd=0
        long size=0
        string filename
        var buff1=(char[]){}
        var buff2=(char[]){}
        var buff3=(char[]){}
        var line1=""
        var lines=(string[]){}
        string result=""

        filename=io.modpath()+"test1.txt"

        result+="(test01)"
        result+="pwd="+io.pwd()+","
        result+="modname="+io.modname()+","
        result+="modpath="+io.modpath()+","
        result+="\n"

        result+="(test02)"
        result+="getfilename="+io.getfilename(filename)+","
        result+="getfilenamenoext="+io.getfilenamenoext(filename)+","
        result+="getfileextension="+io.getfileextension(filename)+","
        result+="getfoldername="+io.getfoldername(filename)+","
        result+="fileexists="+io.fileexists(io.modpath()+io.modname()+".ds").tostr()+","
        result+="direxists="+io.direxists(io.modpath()).tostr()+","
        result+="\n"

        result+="(test03)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openwrite="+io.openwrite(hnd,filename).tostr()+","
        result+="write1="+io.write(hnd,(char[]){'a','b','c','d'},3).tostr()+","
        result+="write2="+io.write(hnd,(char[]){'e','f','g'}).tostr()+","
        result+="write3="+io.write(hnd,"hij\n").tostr()+","
        result+="write4="+io.write(hnd,(string[]){"klm\n","nop\n","qrs\n"}).tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="\n"
        io.freehnd(hnd)
        
        result+="(test04)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openappend="+io.openappend(hnd,filename).tostr()+","
        result+="write="+io.write(hnd,"tuv").tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="\n"
        io.freehnd(hnd)
        
        result+="(test05)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openread="+io.openread(hnd,filename).tostr()+","
        result+="read1="+io.read(hnd,buff1,6).tostr()+","
        result+="read3="+io.read(hnd,line1).tostr()+","
        result+="read4="+io.read(hnd,lines).tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="content="+buff1.join("")+":"+line1+":"+lines.join("")+","
        result+="\n"
        io.freehnd(hnd)

        result+="(test06)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openread="+io.openread(hnd,filename).tostr()+","
        result+="read2="+io.read(hnd,buff2).tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="content="+buff2.join("").replace(io.hln,"#")+","
        result+="\n"
        io.freehnd(hnd)

        result+="(test07)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openread="+io.openread(hnd,filename).tostr()+","
        buff2.reset(); while(io.read(hnd,buff1,1)): buff2.add(buff1[0]); :while
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="content="+buff2.join("").replace(io.hln,"#")+","
        result+="\n"
        io.freehnd(hnd)

        result+="(test08)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openread="+io.openread(hnd,filename).tostr()+","
        result+="filesize="+io.getfilesize(hnd,size).tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="size="+(sys.gethostsystem()==sys.oshost.windows?size-4:size).tostr()+","
        result+="\n"
        io.freehnd(hnd)

        result+="(test09)"
        result+="newhnd="+io.newhnd(hnd).tostr()+","
        result+="openread="+io.openread(hnd,filename).tostr()+","
        result+="hnd2file="+io.hnd2file(hnd)+","
        result+="file2hnd="+io.file2hnd(filename).tostr()+","
        result+="closefile="+io.closefile(hnd).tostr()+","
        result+="\n"
        io.freehnd(hnd)
        
        result+="(test10)"
        size=io.getfilesize(filename)
        result+="getfilesize="+(sys.gethostsystem()==sys.oshost.windows?size-4:size).tostr()+","
        result+="\n"

        filename=io.modpath()+"test2.txt"
        buff1=(char[]){'a','b','c','-'}
        buff2=(char[]){'x','y','z'}
        result+="(test11)"
        result+="write="+io.write(filename,buff1).tostr()+","
        result+="append="+io.append(filename,buff2).tostr()+","
        result+="read="+io.read(filename,buff3).tostr()+","
        result+="content="+buff3.join("")+","
        result+="\n"

        filename=io.modpath()+"test3.txt"
        result+="(test12)"
        result+="write="+io.write(filename,"abcd-hijk").tostr()+","
        result+="append="+io.append(filename,"-123").tostr()+","
        result+="read="+io.read(filename,line1).tostr()+","
        result+="content="+line1+","
        result+="\n"

        filename=io.modpath()+"test4.txt"
        result+="(test13)"
        result+="write="+io.write(filename,(string[]){"abcd\n","efg\n","123\n"}).tostr()+","
        result+="append="+io.append(filename,(string[]){"hik\n","lmn\n","xyz\n"}).tostr()+","
        result+="read="+io.read(filename,lines).tostr()+","
        result+="content=("+lines.len().tostr()+")"+lines.join("|")+","
        result+="\n"

        con.print(result)

      :main
      ]")
      execute_test(testnr,testname,"main","","(test01)pwd=*,modname=main_*,modpath=*.tmp*,\\n(test02)getfilename=test1.txt,getfilenamenoext=test1,getfileextension=.txt,getfoldername=*.tmp*,fileexists=true,direxists=true,\\n(test03)newhnd=true,openwrite=true,write1=true,write2=true,write3=true,write4=true,closefile=true,\\n(test04)newhnd=true,openappend=true,write=true,closefile=true,\\n(test05)newhnd=true,openread=true,read1=true,read3=true,read4=true,closefile=true,content=abcefg:hij:klmnopqrstuv,\\n(test06)newhnd=true,openread=true,read2=true,closefile=true,content=abcefghij#klm#nop#qrs#tuv,\\n(test07)newhnd=true,openread=true,closefile=true,content=abcefghij#klm#nop#qrs#tuv,\\n(test08)newhnd=true,openread=true,filesize=true,closefile=true,size=25,\\n(test09)newhnd=true,openread=true,hnd2file=*.tmp*test1.txt,file2hnd=0,closefile=true,\\n(test10)getfilesize=25,\\n(test11)write=true,append=true,read=true,content=abc-xyz,\\n(test12)write=true,append=true,read=true,content=abcd-hijk-123,\\n(test13)write=true,append=true,read=true,content=(7)abcd|efg|123|hik|lmn|xyz|,\\n",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)197): 
      testname="Call all standard calls in module system"
      create_script(testnr,"main", r"[
      .libs
      import system as sys
      import fileio as io
      import console as con
      .implem
      main:
        string result=""
        string line=""
        const string DUNS_PATH=(sys.gethostsystem()==sys.oshost.windows?".\\duns.exe":"./duns")
        string filename=io.modpath()+io.modname()+"_test.ds"
        string[] stdout=(string[]){}
        string[] stderr=(string[]){}
        string script=".libs\nimport ""console"" as con\nimport ""system"" as sys\n.implem\nmain:\ncon.print(""args=(""+sys.args.join(""|"")+"")"")\ncon.eprint(""error000"")\n:main"
        io.write(filename,script)
        io.read("this_is_a_nonexistent_file_name.txt",line)
        result+="getargs()="+sys.getargs().join(",")+"\n"
        result+="args="+sys.args.join(",")+"\n"
        result+="gethostsystem="+(sys.gethostsystem()==sys.oshost.linux?"Ok":"")+(sys.gethostsystem()==sys.oshost.windows?"Ok":"")+"\n"
        result+="gethostsystemname="+(sys.gethostsystemname()=="linux"?"Ok":"")+(sys.gethostsystemname()=="windows"?"Ok":"")+"\n"
        result+="getarchitecture="+(sys.getarchitecture()==32?"Ok":"")+(sys.getarchitecture()==64?"Ok":"")+"\n"
        result+="error="+sys.error().tostr()+"\n"
        result+="errortext="+sys.errortext(sys.error())+"\n"
        result+="lasterror="+sys.lasterror()+"\n"
        sys.delay(1)
        result+="execute1="+sys.execute(DUNS_PATH,filename+" abc def ghi",stdout,stderr,true).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute2="+sys.execute(DUNS_PATH,filename+" abc def ghi",stdout,stderr,false).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute3="+sys.execute(DUNS_PATH,filename+" abc def ghi",stdout,stderr).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute4="+sys.execute(DUNS_PATH,filename+" abc def ghi",stdout).tostr()+"(stdout="+stdout.join("|")+")\n"
        result+="execute5="+sys.execute(DUNS_PATH,(string[]){filename,"abc","def","ghi"},stdout,stderr,true).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute6="+sys.execute(DUNS_PATH,(string[]){filename,"abc","def","ghi"},stdout,stderr,false).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute7="+sys.execute(DUNS_PATH,(string[]){filename,"abc","def","ghi"},stdout,stderr).tostr()+"(stdout="+stdout.join("|")+",stderr="+stderr.join("|")+")\n"
        result+="execute8="+sys.execute(DUNS_PATH,(string[]){filename,"abc","def","ghi"},stdout).tostr()+"(stdout="+stdout.join("|")+")"
        con.print(result.replace("\n",","))
        sys.exit()
        con.print("executed after exit()")
      :main
      ]")
      execute_test(testnr,testname,"main","","getargs()=*.tmp*main_*.ds,args=*.tmp*main_*.ds,gethostsystem=Ok,gethostsystemname=Ok,getarchitecture=Ok,error=1,errortext=Open read error,lasterror=Open read error,execute1=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000,stderr=),execute2=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=error000),execute3=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=error000),execute4=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000),execute5=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000,stderr=),execute6=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=error000),execute7=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=error000),execute8=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000)",true)
                                            //getargs()=*.tmp*main_*.ds,args=*.tmp*main_*.ds,gethostsystem=Ok,gethostsystemname=Ok,getarchitecture=Ok,error=1,errortext=Open read error,lasterror=Open read error,execute1=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000,stderr=),execute2=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=        ),execute3=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=        ),execute4=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000),execute5=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000,stderr=),execute6=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=        ),execute7=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi),stderr=        ),execute8=true(stdout=args=(*.tmp*main_*_test.ds|abc|def|ghi)error000)         
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)198):
      testname="Call all master methods for boolean"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        bool x=true
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){0}).tostr()+","
        result+="tochr="+x.tochr().toint().tostr()+","
        result+="toshr="+x.toshr().tostr()+","
        result+="toint="+x.toint().tostr()+","
        result+="tolon="+x.tolon().tostr()+","
        result+="toflo="+x.toflo().tostr()+","
        result+="tostr="+x.tostr()
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=bool,sizeof=1,tobytes=(1),frombytes=false,tochr=0,toshr=0,toint=0,tolon=0,toflo=0.000000,tostr=false",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)199):
      testname="Call all master methods for char"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        char x='A'
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){'B'}).tostr()+","
        result+="tobol="+x.tobol().tostr()+","
        result+="toshr="+x.toshr().tostr()+","
        result+="toint="+x.toint().tostr()+","
        result+="tolon="+x.tolon().tostr()+","
        result+="toflo="+x.toflo().tostr()+","
        result+="tostr="+x.tostr()+","
        result+="format="+x.format("%c")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=char,sizeof=1,tobytes=(65),frombytes=B,tobol=true,toshr=66,toint=66,tolon=66,toflo=66.000000,tostr=B,format=B",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)200):
      testname="Call all master methods for short"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        short x=321
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){66,1}).tostr()+","
        result+="tobol="+x.tobol().tostr()+","
        result+="tochr="+x.tochr().tostr()+","
        result+="toint="+x.toint().tostr()+","
        result+="tolon="+x.tolon().tostr()+","
        result+="toflo="+x.toflo().tostr()+","
        result+="tostr="+x.tostr()+","
        result+="format="+x.format("%05i")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=short,sizeof=2,tobytes=(65)(1),frombytes=322,tobol=true,tochr=B,toint=322,tolon=322,toflo=322.000000,tostr=322,format=00322",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)201):
      testname="Call all master methods for integer"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        int x=16843073
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){66,1,1,1}).tostr()+","
        result+="tobol="+x.tobol().tostr()+","
        result+="tochr="+x.tochr().tostr()+","
        result+="toshr="+x.toshr().tostr()+","
        result+="tolon="+x.tolon().tostr()+","
        result+="toflo="+x.toflo().tostr()+","
        result+="tostr="+x.tostr()+","
        result+="format="+x.format("%09li")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=int,sizeof=4,tobytes=(65)(1)(1)(1),frombytes=16843074,tobol=true,tochr=B,toshr=322,tolon=16843074,toflo=16843074.000000,tostr=16843074,format=016843074",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)202):
      testname="Call all master methods for long"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        long x=72340172838076737
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){66,1,1,1,1,1,1,1}).tostr()+","
        result+="tobol="+x.tobol().tostr()+","
        result+="tochr="+x.tochr().tostr()+","
        result+="toshr="+x.toshr().tostr()+","
        result+="toint="+x.toint().tostr()+","
        result+="toflo="+x.toflo().tostr()+","
        result+="tostr="+x.tostr()+","
        result+="format="+x.format("%018lli")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=long,sizeof=8,tobytes=(65)(1)(1)(1)(1)(1)(1)(1),frombytes=72340172838076738,tobol=true,tochr=B,toshr=322,toint=16843074,toflo=72340172838076736.000000,tostr=72340172838076738,format=072340172838076738",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)203):
      testname="Call all master methods for float"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        float x=123.456
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){119,-66,-97,26,47,-35,94,64}).tostr()+"," 
        result+="tobol="+x.tobol().tostr()+","
        result+="tochr="+x.tochr().tostr()+","
        result+="toshr="+x.toshr().tostr()+","
        result+="toint="+x.toint().tostr()+","
        result+="tolon="+x.tolon().tostr()+","
        result+="tostr="+x.tostr()+","
        result+="format="+x.format("%.3f")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=float,sizeof=8,tobytes=(119)(-66)(-97)(26)(47)(-35)(94)(64),frombytes=123.456000,tobol=true,tochr={,toshr=123,toint=123,tolon=123,tostr=123.456000,format=123.456",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)204):
      testname="Call all master methods for string"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        string x="Hello world!"
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){'H','e','l','l','o',' ','w','o','r','l','d','!'})+"," 
        result+="len="+x.len().tostr()+","
        result+="sub="+x.sub(6,5)+","
        result+="right="+x.right(6)+","
        result+="left="+x.left(5)+","
        result+="replace="+x.replace("world","man")+","
        result+="trim="+(" "+x+" ").trim()+","
        result+="upper="+x.upper()+","
        result+="lower="+x.lower()+","
        result+="ljust="+"("+x.ljust(20)+")"+","
        result+="rjust="+"("+x.rjust(20)+")"+","
        result+="replicate="+x.replicate(3)+","
        result+="split="+x.split(" ").join(":")+","
        result+="search="+x.search("world",3).tostr()+","
        result+="match="+x.match(".*").tostr()+","
        result+="like="+x.like("*world*").tostr()+","
        result+="startswith="+x.startswith("Hello").tostr()+","
        result+="endswith="+x.endswith("world!").tostr()+","
        result+="isbol="+"true".isbol().tostr()+","
        result+="ischr="+"123".ischr().tostr()+","
        result+="isshr="+"1234".isshr().tostr()+","
        result+="isint="+"100000".isint().tostr()+","
        result+="islon="+"9999999999999999".islon().tostr()+","
        result+="isflo="+"123.456".isflo().tostr()+","
        result+="tobol="+"true".tobol().tostr()+"," 
        result+="tochr="+"a".tochr().tostr()+"," 
        result+="toshr="+"1234".toshr().tostr()+"," 
        result+="toint="+"100000".toint().tostr()+"," 
        result+="tolon="+"9999999999999999".tolon().tostr()+"," 
        result+="toflo="+"123.456".toflo().tostr() 
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=string,sizeof=12,tobytes=(72)(101)(108)(108)(111)(32)(119)(111)(114)(108)(100)(33)(0),frombytes=Hello world!,len=12,sub=world,right=world!,left=Hello,replace=Hello man!,trim=Hello world!,upper=HELLO WORLD!,lower=hello world!,ljust=(Hello world!        ),rjust=(        Hello world!),replicate=Hello world!Hello world!Hello world!,split=Hello:world!,search=6,match=true,like=true,startswith=true,endswith=true,isbol=true,ischr=true,isshr=true,isint=true,islon=true,isflo=true,tobol=true,tochr=a,toshr=1234,toint=100000,tolon=9999999999999999,toflo=123.456000",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)205):
      testname="Call all master methods for enum"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        enum colors:
          red=1
          green=2
          blue=3
          yellow=4
          orange=5
          violet=6
        :enum
        colors x=colors.blue
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes((char[]){2,0,0,0}).tostr()+"," 
        result+="toint="+x.toint().tostr()+","
        result+="fieldcount="+x.fieldcount().tostr()+","
        result+="fieldnames="+x.fieldnames().join(":")+","
        result+="fieldtypes="+x.fieldtypes().join(":")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=colors,sizeof=4,tobytes=(3)(0)(0)(0),frombytes=2,toint=2,fieldcount=6,fieldnames=red:green:blue:yellow:orange:violet,fieldtypes=int:int:int:int:int:int",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)206):
      testname="Call all master methods for class"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      class myclass:
        bool b
        char c
        short s
        int i
        long l
        char[6] str
        string tostr()
      :class
      .implem
      fmem string myclass.tostr():
        return self.b.tostr()+","+self.c.tostr()+","+self.s.tostr()+","+self.i.tostr()+","+self.l.tostr()+","+self.str.join(":")
      :fmem
      main:
        myclass x=(myclass){true,'a',1,2,3,{'H','e','l','l','o','!'}}
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes(((myclass){false,'b',4,5,6,{'f','r','i','e','n','d'}}).tobytes()).tostr()+"," 
        result+="fieldcount="+x.fieldcount().tostr()+","
        result+="fieldnames="+x.fieldnames().join(":")+","
        result+="fieldtypes="+x.fieldtypes().join(":")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=myclass,tobytes=(1)(97)(1)(0)(2)(0)(0)(0)(3)(0)(0)(0)(0)(0)(0)(0)(72)(101)(108)(108)(111)(33),frombytes=false,b,4,5,6,f:r:i:e:n:d,fieldcount=6,fieldnames=b:c:s:i:l:str,fieldtypes=bool:char:short:int:long:char[6]",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)207):
      testname="Call all master methods for fixArray"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        char[5] x=(char[5]){'a','b','c','d','e'}
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes(((char[5]){'f','g','h','i','j'}).tobytes()).join(":")+"," 
        result+="dsize="+x.dsize(1).tostr()+","
        result+="len="+x.len().tostr()+","
        result+="join="+x.join(":")+","
        result+="join="+((string[5]){"A","B","C","D","E"}).join(":")
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=char[5],sizeof=5,tobytes=(97)(98)(99)(100)(101),frombytes=f:g:h:i:j,dsize=5,len=5,join=f:g:h:i:j,join=A:B:C:D:E",false)
      break
    
    //Test ----------------------------------------------------------------------------------------------------------
    when((int)208):
      testname="Call all master methods for dynArray"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .implem
      main:
        char[] x=(char[]){'a','b','c','d','e'}
        string result=""
        result+="name="+x.name()+","
        result+="dtype="+x.dtype()+","
        result+="sizeof="+x.sizeof().tostr()+","
        result+="tobytes="+array(x.tobytes() on n as "("+n.toint().tostr()+")").join("")+","
        result+="frombytes="+x.frombytes(((char[]){'f','g','h','i','j'}).tobytes()).join(":")+"," 
        result+="dsize="+x.dsize(1).tostr()+","
        result+="len="+x.len().tostr()+","
        result+="join="+x.join(":")+","
        result+="join="+((string[5]){"A","B","C","D","E"}).join(":")+","
        result+="rsize="+(x.rsize(4)->x.join(":"))+","
        result+="add="+(x.add('x')->x.join(":"))+","
        result+="ins="+(x.ins(0,'z')->x.join(":"))+","
        result+="ins="+(x.ins(3,'t')->x.join(":"))+","
        result+="ins="+(x.ins(x.len()-1,'y')->x.join(":"))+","
        result+="ins="+(x.ins(x.len(),'m')->x.join(":"))+","
        result+="del="+(x.del(0)->x.join(":"))+","
        result+="del="+(x.del(x.len()-1)->x.join(":"))+","
        result+="del="+(x.del(3)->x.join(":"))+","
        result+="reset=("+(x.reset()->x.join(":"))+")"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","name=x,dtype=char[],sizeof=5,tobytes=(97)(98)(99)(100)(101),frombytes=f:g:h:i:j,dsize=5,len=5,join=f:g:h:i:j,join=A:B:C:D:E,rsize=f:g:h:i,add=f:g:h:i:x,ins=z:f:g:h:i:x,ins=z:f:g:t:h:i:x,ins=z:f:g:t:h:i:y:x,ins=z:f:g:t:h:i:y:x:m,del=f:g:t:h:i:y:x:m,del=f:g:t:h:i:y:x,del=f:g:t:i:y:x,reset=()",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)209): 
      testname="Declare and call system functions"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .public
      sysfunc<"ADDi"> void addi(ref int r,int a,int b)
      .implem
      main:
        int r=0
        int a=1
        int b=2
        string result=""
        result+="addi="+(addi(r,a,b)->r.tostr())
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","addi=3",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)210): 
      testname="Test inner replication for global variables for classes with static members inside"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      inner inner1=(inner){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}
      inner inner2
      inner[3] innerf1=(inner[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
      inner[3] innerf2
      inner[] innerd1=(inner[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
      inner[] innerd2
      outer outer1=(outer){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
      outer outer2
      outer[3] outerf1=(outer[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
      outer[3] outerf2
      outer[] outerd1=(outer[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
      outer[] outerd2
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 2: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 3: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 4: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 5: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 6: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)211): 
      testname="Test inner replication for local variables for classes with static members inside"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner inner1=(inner){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}
        inner inner2
        inner[3] innerf1=(inner[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        inner[3] innerf2
        inner[] innerd1=(inner[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        inner[] innerd2
        outer outer1=(outer){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        outer outer2
        outer[3] outerf1=(outer[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
        outer[3] outerf2
        outer[] outerd1=(outer[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
        outer[] outerd2
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 2: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 3: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 4: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 5: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 6: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)212): 
      testname="Test inner replication for local static variables for classes with static members inside"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        static inner inner1=(inner){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}
        static inner inner2
        static inner[3] innerf1=(inner[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        static inner[3] innerf2
        static inner[] innerd1=(inner[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        static inner[] innerd2
        static outer outer1=(outer){1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}
        static outer outer2
        static outer[3] outerf1=(outer[3]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
        static outer[3] outerf2
        static outer[] outerd1=(outer[]){{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}},{1,2,"abc","def",{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r'},{"ABC","DEF","GHI"},{"JKL","MNO","PQR"},{"STU","VXY","Z12"},{"345","678","9AB"}}}}
        static outer[] outerd2
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 2: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 3: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))*** 4: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 5: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))*** 6: (i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB))),(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB),in1=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)),in2=(i1=1,i2=2,s1=abc,s2=def,c1=(103,104,105),c2=(106,107,108),d1=(109,110,111),d2=(112,113,114),a1=(ABC,DEF,GHI),a2=(JKL,MNO,PQR),b1=(STU,VXY,Z12),b2=(345,678,9AB)))",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)213): 
      testname="Declaration of global variables with asterisk initialization"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      bool gvar01*
      char gvar02*
      short gvar03*
      int gvar04*
      long gvar05*
      float gvar06*
      string gvar07*
      enutype gvar08*
      classtype gvar09*
      string[3] gvar10*
      string[] gvar11*
      string[3,3] gvar12*
      string[,] gvar13*
      string[3,3,3] gvar14*
      string[,,] gvar15*
      classtype[3] gvar16*
      classtype[] gvar17*
      classtype[3,3] gvar18*
      classtype[,] gvar19*
      classtype[3,3,3] gvar20*
      classtype[,,] gvar21*
      type01 tgvar01*
      type02 tgvar02*
      type03 tgvar03*
      type04 tgvar04*
      type05 tgvar05*
      type06 tgvar06*
      type07 tgvar07*
      type08 tgvar08*
      type09 tgvar09*
      type10 tgvar10*
      type11 tgvar11*
      type12 tgvar12*
      type13 tgvar13*
      type14 tgvar14*
      type15 tgvar15*
      type16 tgvar16*
      type17 tgvar17*
      type18 tgvar18*
      type19 tgvar19*
      type20 tgvar20*
      type21 tgvar21*
      .implem
      fmem string classtype.print():
        string result*
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        string result=""
        result+=gvar01.tostr()+",";
        result+=(string)gvar02+",";
        result+=gvar03.tostr()+",";
        result+=gvar04.tostr()+",";
        result+=gvar05.tostr()+",";
        result+=gvar06.tostr()+",";
        result+=gvar07+",";
        result+=((int)gvar08).tostr()+",";
        result+=gvar09.print()+",";
        result+="{"+gvar10.join(":")+"},";
        result+="{"+gvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<gvar12.dsize(1) do i++): for(int j=0 if j<gvar12.dsize(2) do j++): result+=gvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar13.dsize(1) do i++): for(int j=0 if j<gvar13.dsize(2) do j++): result+=gvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar14.dsize(1) do i++): for(int j=0 if j<gvar14.dsize(2) do j++): for(int k=0 if k<gvar14.dsize(3) do k++): result+=gvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar15.dsize(1) do i++): for(int j=0 if j<gvar15.dsize(2) do j++): for(int k=0 if k<gvar15.dsize(3) do k++): result+=gvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(gvar16 on e as e.print()).join(":")+",";
        result+=array(gvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<gvar18.dsize(1) do i++): for(int j=0 if j<gvar18.dsize(2) do j++): result+=gvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar19.dsize(1) do i++): for(int j=0 if j<gvar19.dsize(2) do j++): result+=gvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar20.dsize(1) do i++): for(int j=0 if j<gvar20.dsize(2) do j++): for(int k=0 if k<gvar20.dsize(3) do k++): result+=gvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar21.dsize(1) do i++): for(int j=0 if j<gvar21.dsize(2) do j++): for(int k=0 if k<gvar21.dsize(3) do k++): result+=gvar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tgvar01.tostr()+",";
        result+=(string)tgvar02+",";
        result+=tgvar03.tostr()+",";
        result+=tgvar04.tostr()+",";
        result+=tgvar05.tostr()+",";
        result+=tgvar06.tostr()+",";
        result+=tgvar07+",";
        result+=((int)tgvar08).tostr()+",";
        result+=tgvar09.print()+",";
        result+="{"+tgvar10.join(":")+"},";
        result+="{"+tgvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tgvar12.dsize(1) do i++): for(int j=0 if j<tgvar12.dsize(2) do j++): result+=tgvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar13.dsize(1) do i++): for(int j=0 if j<tgvar13.dsize(2) do j++): result+=tgvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar14.dsize(1) do i++): for(int j=0 if j<tgvar14.dsize(2) do j++): for(int k=0 if k<tgvar14.dsize(3) do k++): result+=tgvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar15.dsize(1) do i++): for(int j=0 if j<tgvar15.dsize(2) do j++): for(int k=0 if k<tgvar15.dsize(3) do k++): result+=tgvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tgvar16 on e as e.print()).join(":")+",";
        result+=array(tgvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tgvar18.dsize(1) do i++): for(int j=0 if j<tgvar18.dsize(2) do j++): result+=tgvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar19.dsize(1) do i++): for(int j=0 if j<tgvar19.dsize(2) do j++): result+=tgvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar20.dsize(1) do i++): for(int j=0 if j<tgvar20.dsize(2) do j++): for(int k=0 if k<tgvar20.dsize(3) do k++): result+=tgvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar21.dsize(1) do i++): for(int j=0 if j<tgvar21.dsize(2) do j++): for(int k=0 if k<tgvar21.dsize(3) do k++): result+=tgvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)214): 
      testname="Declaration of local variables with asterisk initialization"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      .implem
      fmem string classtype.print():
        string result*
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        bool lvar01*
        char lvar02*
        short lvar03*
        int lvar04*
        long lvar05*
        float lvar06*
        string lvar07*
        enutype lvar08*
        classtype lvar09*
        string[3] lvar10*
        string[] lvar11*
        string[3,3] lvar12*
        string[,] lvar13*
        string[3,3,3] lvar14*
        string[,,] lvar15*
        classtype[3] lvar16*
        classtype[] lvar17*
        classtype[3,3] lvar18*
        classtype[,] lvar19*
        classtype[3,3,3] lvar20*
        classtype[,,] lvar21*
        type01 tlvar01*
        type02 tlvar02*
        type03 tlvar03*
        type04 tlvar04*
        type05 tlvar05*
        type06 tlvar06*
        type07 tlvar07*
        type08 tlvar08*
        type09 tlvar09*
        type10 tlvar10*
        type11 tlvar11*
        type12 tlvar12*
        type13 tlvar13*
        type14 tlvar14*
        type15 tlvar15*
        type16 tlvar16*
        type17 tlvar17*
        type18 tlvar18*
        type19 tlvar19*
        type20 tlvar20*
        type21 tlvar21*
        string result=""
        result+=lvar01.tostr()+",";
        result+=(string)lvar02+",";
        result+=lvar03.tostr()+",";
        result+=lvar04.tostr()+",";
        result+=lvar05.tostr()+",";
        result+=lvar06.tostr()+",";
        result+=lvar07+",";
        result+=((int)lvar08).tostr()+",";
        result+=lvar09.print()+",";
        result+="{"+lvar10.join(":")+"},";
        result+="{"+lvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<lvar12.dsize(1) do i++): for(int j=0 if j<lvar12.dsize(2) do j++): result+=lvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar13.dsize(1) do i++): for(int j=0 if j<lvar13.dsize(2) do j++): result+=lvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar14.dsize(1) do i++): for(int j=0 if j<lvar14.dsize(2) do j++): for(int k=0 if k<lvar14.dsize(3) do k++): result+=lvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar15.dsize(1) do i++): for(int j=0 if j<lvar15.dsize(2) do j++): for(int k=0 if k<lvar15.dsize(3) do k++): result+=lvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(lvar16 on e as e.print()).join(":")+",";
        result+=array(lvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<lvar18.dsize(1) do i++): for(int j=0 if j<lvar18.dsize(2) do j++): result+=lvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar19.dsize(1) do i++): for(int j=0 if j<lvar19.dsize(2) do j++): result+=lvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar20.dsize(1) do i++): for(int j=0 if j<lvar20.dsize(2) do j++): for(int k=0 if k<lvar20.dsize(3) do k++): result+=lvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar21.dsize(1) do i++): for(int j=0 if j<lvar21.dsize(2) do j++): for(int k=0 if k<lvar21.dsize(3) do k++): result+=lvar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tlvar01.tostr()+",";
        result+=(string)tlvar02+",";
        result+=tlvar03.tostr()+",";
        result+=tlvar04.tostr()+",";
        result+=tlvar05.tostr()+",";
        result+=tlvar06.tostr()+",";
        result+=tlvar07+",";
        result+=((int)tlvar08).tostr()+",";
        result+=tlvar09.print()+",";
        result+="{"+tlvar10.join(":")+"},";
        result+="{"+tlvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tlvar12.dsize(1) do i++): for(int j=0 if j<tlvar12.dsize(2) do j++): result+=tlvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar13.dsize(1) do i++): for(int j=0 if j<tlvar13.dsize(2) do j++): result+=tlvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar14.dsize(1) do i++): for(int j=0 if j<tlvar14.dsize(2) do j++): for(int k=0 if k<tlvar14.dsize(3) do k++): result+=tlvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar15.dsize(1) do i++): for(int j=0 if j<tlvar15.dsize(2) do j++): for(int k=0 if k<tlvar15.dsize(3) do k++): result+=tlvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tlvar16 on e as e.print()).join(":")+",";
        result+=array(tlvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tlvar18.dsize(1) do i++): for(int j=0 if j<tlvar18.dsize(2) do j++): result+=tlvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar19.dsize(1) do i++): for(int j=0 if j<tlvar19.dsize(2) do j++): result+=tlvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar20.dsize(1) do i++): for(int j=0 if j<tlvar20.dsize(2) do j++): for(int k=0 if k<tlvar20.dsize(3) do k++): result+=tlvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar21.dsize(1) do i++): for(int j=0 if j<tlvar21.dsize(2) do j++): for(int k=0 if k<tlvar21.dsize(3) do k++): result+=tlvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)215): 
      testname="Declaration of static variables with asterisk initialization"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      .implem
      fmem string classtype.print():
        string result*
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        static bool svar01*
        static char svar02*
        static short svar03*
        static int svar04*
        static long svar05*
        static float svar06*
        static string svar07*
        static enutype svar08*
        static classtype svar09*
        static string[3] svar10*
        static string[] svar11*
        static string[3,3] svar12*
        static string[,] svar13*
        static string[3,3,3] svar14*
        static string[,,] svar15*
        static classtype[3] svar16*
        static classtype[] svar17*
        static classtype[3,3] svar18*
        static classtype[,] svar19*
        static classtype[3,3,3] svar20*
        static classtype[,,] svar21*
        static type01 tsvar01*
        static type02 tsvar02*
        static type03 tsvar03*
        static type04 tsvar04*
        static type05 tsvar05*
        static type06 tsvar06*
        static type07 tsvar07*
        static type08 tsvar08*
        static type09 tsvar09*
        static type10 tsvar10*
        static type11 tsvar11*
        static type12 tsvar12*
        static type13 tsvar13*
        static type14 tsvar14*
        static type15 tsvar15*
        static type16 tsvar16*
        static type17 tsvar17*
        static type18 tsvar18*
        static type19 tsvar19*
        static type20 tsvar20*
        static type21 tsvar21*
        string result=""
        result+=svar01.tostr()+",";
        result+=(string)svar02+",";
        result+=svar03.tostr()+",";
        result+=svar04.tostr()+",";
        result+=svar05.tostr()+",";
        result+=svar06.tostr()+",";
        result+=svar07+",";
        result+=((int)svar08).tostr()+",";
        result+=svar09.print()+",";
        result+="{"+svar10.join(":")+"},";
        result+="{"+svar11.join(":")+"},";
        result+="{"; for(int i=0 if i<svar12.dsize(1) do i++): for(int j=0 if j<svar12.dsize(2) do j++): result+=svar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar13.dsize(1) do i++): for(int j=0 if j<svar13.dsize(2) do j++): result+=svar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar14.dsize(1) do i++): for(int j=0 if j<svar14.dsize(2) do j++): for(int k=0 if k<svar14.dsize(3) do k++): result+=svar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<svar15.dsize(1) do i++): for(int j=0 if j<svar15.dsize(2) do j++): for(int k=0 if k<svar15.dsize(3) do k++): result+=svar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(svar16 on e as e.print()).join(":")+",";
        result+=array(svar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<svar18.dsize(1) do i++): for(int j=0 if j<svar18.dsize(2) do j++): result+=svar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar19.dsize(1) do i++): for(int j=0 if j<svar19.dsize(2) do j++): result+=svar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar20.dsize(1) do i++): for(int j=0 if j<svar20.dsize(2) do j++): for(int k=0 if k<svar20.dsize(3) do k++): result+=svar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<svar21.dsize(1) do i++): for(int j=0 if j<svar21.dsize(2) do j++): for(int k=0 if k<svar21.dsize(3) do k++): result+=svar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tsvar01.tostr()+",";
        result+=(string)tsvar02+",";
        result+=tsvar03.tostr()+",";
        result+=tsvar04.tostr()+",";
        result+=tsvar05.tostr()+",";
        result+=tsvar06.tostr()+",";
        result+=tsvar07+",";
        result+=((int)tsvar08).tostr()+",";
        result+=tsvar09.print()+",";
        result+="{"+tsvar10.join(":")+"},";
        result+="{"+tsvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tsvar12.dsize(1) do i++): for(int j=0 if j<tsvar12.dsize(2) do j++): result+=tsvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar13.dsize(1) do i++): for(int j=0 if j<tsvar13.dsize(2) do j++): result+=tsvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar14.dsize(1) do i++): for(int j=0 if j<tsvar14.dsize(2) do j++): for(int k=0 if k<tsvar14.dsize(3) do k++): result+=tsvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar15.dsize(1) do i++): for(int j=0 if j<tsvar15.dsize(2) do j++): for(int k=0 if k<tsvar15.dsize(3) do k++): result+=tsvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tsvar16 on e as e.print()).join(":")+",";
        result+=array(tsvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tsvar18.dsize(1) do i++): for(int j=0 if j<tsvar18.dsize(2) do j++): result+=tsvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar19.dsize(1) do i++): for(int j=0 if j<tsvar19.dsize(2) do j++): result+=tsvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar20.dsize(1) do i++): for(int j=0 if j<tsvar20.dsize(2) do j++): for(int k=0 if k<tsvar20.dsize(3) do k++): result+=tsvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar21.dsize(1) do i++): for(int j=0 if j<tsvar21.dsize(2) do j++): for(int k=0 if k<tsvar21.dsize(3) do k++): result+=tsvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)216): 
      testname="Declaration of expression variables with asterisk initialization"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type classtype[3] as type16
      type classtype[] as type17
      .implem
      fmem string classtype.print():
        string result*
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        string result=""
        result+=(bool svar01*->svar01.tostr()+",");
        result+=(char svar02*->(string)svar02+",");
        result+=(short svar03*->svar03.tostr()+",");
        result+=(int svar04*->svar04.tostr()+",");
        result+=(long svar05*->svar05.tostr()+",");
        result+=(float svar06*->svar06.tostr()+",");
        result+=(string svar07*->svar07+",");
        result+=(enutype svar08*->((int)svar08).tostr()+",");
        result+=(classtype svar09*->svar09.print()+",");
        result+=(string[3] svar10*->"{"+svar10.join(":")+"},");
        result+=(string[] svar11*->"{"+svar11.join(":")+"},");
        result+=(classtype[3] svar16*->array(svar16 on e as e.print()).join(":")+",");
        result+=(classtype[] svar17*->array(svar17 on e as e.print()).join(":")+",");
        result+=(type01 tsvar01*->tsvar01.tostr()+",");
        result+=(type02 tsvar02*->(string)tsvar02+",");
        result+=(type03 tsvar03*->tsvar03.tostr()+",");
        result+=(type04 tsvar04*->tsvar04.tostr()+",");
        result+=(type05 tsvar05*->tsvar05.tostr()+",");
        result+=(type06 tsvar06*->tsvar06.tostr()+",");
        result+=(type07 tsvar07*->tsvar07+",");
        result+=(type08 tsvar08*->((int)tsvar08).tostr()+",");
        result+=(type09 tsvar09*->tsvar09.print()+",");
        result+=(type10 tsvar10*->"{"+tsvar10.join(":")+"},");
        result+=(type11 tsvar11*->"{"+tsvar11.join(":")+"},");
        result+=(type16 tsvar16*->array(tsvar16 on e as e.print()).join(":")+",");
        result+=(type17 tsvar17*->array(tsvar17 on e as e.print()).join(":"));
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)217): 
      testname="Declaration of global variables with automatic initialization"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      bool gvar01
      char gvar02
      short gvar03
      int gvar04
      long gvar05
      float gvar06
      string gvar07
      enutype gvar08
      classtype gvar09
      string[3] gvar10
      string[] gvar11
      string[3,3] gvar12
      string[,] gvar13
      string[3,3,3] gvar14
      string[,,] gvar15
      classtype[3] gvar16
      classtype[] gvar17
      classtype[3,3] gvar18
      classtype[,] gvar19
      classtype[3,3,3] gvar20
      classtype[,,] gvar21
      type01 tgvar01
      type02 tgvar02
      type03 tgvar03
      type04 tgvar04
      type05 tgvar05
      type06 tgvar06
      type07 tgvar07
      type08 tgvar08
      type09 tgvar09
      type10 tgvar10
      type11 tgvar11
      type12 tgvar12
      type13 tgvar13
      type14 tgvar14
      type15 tgvar15
      type16 tgvar16
      type17 tgvar17
      type18 tgvar18
      type19 tgvar19
      type20 tgvar20
      type21 tgvar21
      .implem
      fmem string classtype.print():
        string result
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        string result=""
        result+=gvar01.tostr()+",";
        result+=(string)gvar02+",";
        result+=gvar03.tostr()+",";
        result+=gvar04.tostr()+",";
        result+=gvar05.tostr()+",";
        result+=gvar06.tostr()+",";
        result+=gvar07+",";
        result+=((int)gvar08).tostr()+",";
        result+=gvar09.print()+",";
        result+="{"+gvar10.join(":")+"},";
        result+="{"+gvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<gvar12.dsize(1) do i++): for(int j=0 if j<gvar12.dsize(2) do j++): result+=gvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar13.dsize(1) do i++): for(int j=0 if j<gvar13.dsize(2) do j++): result+=gvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar14.dsize(1) do i++): for(int j=0 if j<gvar14.dsize(2) do j++): for(int k=0 if k<gvar14.dsize(3) do k++): result+=gvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar15.dsize(1) do i++): for(int j=0 if j<gvar15.dsize(2) do j++): for(int k=0 if k<gvar15.dsize(3) do k++): result+=gvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(gvar16 on e as e.print()).join(":")+",";
        result+=array(gvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<gvar18.dsize(1) do i++): for(int j=0 if j<gvar18.dsize(2) do j++): result+=gvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar19.dsize(1) do i++): for(int j=0 if j<gvar19.dsize(2) do j++): result+=gvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar20.dsize(1) do i++): for(int j=0 if j<gvar20.dsize(2) do j++): for(int k=0 if k<gvar20.dsize(3) do k++): result+=gvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<gvar21.dsize(1) do i++): for(int j=0 if j<gvar21.dsize(2) do j++): for(int k=0 if k<gvar21.dsize(3) do k++): result+=gvar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tgvar01.tostr()+",";
        result+=(string)tgvar02+",";
        result+=tgvar03.tostr()+",";
        result+=tgvar04.tostr()+",";
        result+=tgvar05.tostr()+",";
        result+=tgvar06.tostr()+",";
        result+=tgvar07+",";
        result+=((int)tgvar08).tostr()+",";
        result+=tgvar09.print()+",";
        result+="{"+tgvar10.join(":")+"},";
        result+="{"+tgvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tgvar12.dsize(1) do i++): for(int j=0 if j<tgvar12.dsize(2) do j++): result+=tgvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar13.dsize(1) do i++): for(int j=0 if j<tgvar13.dsize(2) do j++): result+=tgvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar14.dsize(1) do i++): for(int j=0 if j<tgvar14.dsize(2) do j++): for(int k=0 if k<tgvar14.dsize(3) do k++): result+=tgvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar15.dsize(1) do i++): for(int j=0 if j<tgvar15.dsize(2) do j++): for(int k=0 if k<tgvar15.dsize(3) do k++): result+=tgvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tgvar16 on e as e.print()).join(":")+",";
        result+=array(tgvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tgvar18.dsize(1) do i++): for(int j=0 if j<tgvar18.dsize(2) do j++): result+=tgvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar19.dsize(1) do i++): for(int j=0 if j<tgvar19.dsize(2) do j++): result+=tgvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar20.dsize(1) do i++): for(int j=0 if j<tgvar20.dsize(2) do j++): for(int k=0 if k<tgvar20.dsize(3) do k++): result+=tgvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tgvar21.dsize(1) do i++): for(int j=0 if j<tgvar21.dsize(2) do j++): for(int k=0 if k<tgvar21.dsize(3) do k++): result+=tgvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)218): 
      testname="Declaration of local variables with automatic initialization"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      .implem
      fmem string classtype.print():
        string result
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        bool lvar01
        char lvar02
        short lvar03
        int lvar04
        long lvar05
        float lvar06
        string lvar07
        enutype lvar08
        classtype lvar09
        string[3] lvar10
        string[] lvar11
        string[3,3] lvar12
        string[,] lvar13
        string[3,3,3] lvar14
        string[,,] lvar15
        classtype[3] lvar16
        classtype[] lvar17
        classtype[3,3] lvar18
        classtype[,] lvar19
        classtype[3,3,3] lvar20
        classtype[,,] lvar21
        type01 tlvar01
        type02 tlvar02
        type03 tlvar03
        type04 tlvar04
        type05 tlvar05
        type06 tlvar06
        type07 tlvar07
        type08 tlvar08
        type09 tlvar09
        type10 tlvar10
        type11 tlvar11
        type12 tlvar12
        type13 tlvar13
        type14 tlvar14
        type15 tlvar15
        type16 tlvar16
        type17 tlvar17
        type18 tlvar18
        type19 tlvar19
        type20 tlvar20
        type21 tlvar21
        string result=""
        result+=lvar01.tostr()+",";
        result+=(string)lvar02+",";
        result+=lvar03.tostr()+",";
        result+=lvar04.tostr()+",";
        result+=lvar05.tostr()+",";
        result+=lvar06.tostr()+",";
        result+=lvar07+",";
        result+=((int)lvar08).tostr()+",";
        result+=lvar09.print()+",";
        result+="{"+lvar10.join(":")+"},";
        result+="{"+lvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<lvar12.dsize(1) do i++): for(int j=0 if j<lvar12.dsize(2) do j++): result+=lvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar13.dsize(1) do i++): for(int j=0 if j<lvar13.dsize(2) do j++): result+=lvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar14.dsize(1) do i++): for(int j=0 if j<lvar14.dsize(2) do j++): for(int k=0 if k<lvar14.dsize(3) do k++): result+=lvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar15.dsize(1) do i++): for(int j=0 if j<lvar15.dsize(2) do j++): for(int k=0 if k<lvar15.dsize(3) do k++): result+=lvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(lvar16 on e as e.print()).join(":")+",";
        result+=array(lvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<lvar18.dsize(1) do i++): for(int j=0 if j<lvar18.dsize(2) do j++): result+=lvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar19.dsize(1) do i++): for(int j=0 if j<lvar19.dsize(2) do j++): result+=lvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar20.dsize(1) do i++): for(int j=0 if j<lvar20.dsize(2) do j++): for(int k=0 if k<lvar20.dsize(3) do k++): result+=lvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<lvar21.dsize(1) do i++): for(int j=0 if j<lvar21.dsize(2) do j++): for(int k=0 if k<lvar21.dsize(3) do k++): result+=lvar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tlvar01.tostr()+",";
        result+=(string)tlvar02+",";
        result+=tlvar03.tostr()+",";
        result+=tlvar04.tostr()+",";
        result+=tlvar05.tostr()+",";
        result+=tlvar06.tostr()+",";
        result+=tlvar07+",";
        result+=((int)tlvar08).tostr()+",";
        result+=tlvar09.print()+",";
        result+="{"+tlvar10.join(":")+"},";
        result+="{"+tlvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tlvar12.dsize(1) do i++): for(int j=0 if j<tlvar12.dsize(2) do j++): result+=tlvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar13.dsize(1) do i++): for(int j=0 if j<tlvar13.dsize(2) do j++): result+=tlvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar14.dsize(1) do i++): for(int j=0 if j<tlvar14.dsize(2) do j++): for(int k=0 if k<tlvar14.dsize(3) do k++): result+=tlvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar15.dsize(1) do i++): for(int j=0 if j<tlvar15.dsize(2) do j++): for(int k=0 if k<tlvar15.dsize(3) do k++): result+=tlvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tlvar16 on e as e.print()).join(":")+",";
        result+=array(tlvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tlvar18.dsize(1) do i++): for(int j=0 if j<tlvar18.dsize(2) do j++): result+=tlvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar19.dsize(1) do i++): for(int j=0 if j<tlvar19.dsize(2) do j++): result+=tlvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar20.dsize(1) do i++): for(int j=0 if j<tlvar20.dsize(2) do j++): for(int k=0 if k<tlvar20.dsize(3) do k++): result+=tlvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tlvar21.dsize(1) do i++): for(int j=0 if j<tlvar21.dsize(2) do j++): for(int k=0 if k<tlvar21.dsize(3) do k++): result+=tlvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)219): 
      testname="Declaration of static variables with automatic initialization"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type string[3,3] as type12
      type string[,] as type13
      type string[3,3,3] as type14
      type string[,,] as type15
      type classtype[3] as type16
      type classtype[] as type17
      type classtype[3,3] as type18
      type classtype[,] as type19
      type classtype[3,3,3] as type20
      type classtype[,,] as type21
      .implem
      fmem string classtype.print():
        string result
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        static bool svar01
        static char svar02
        static short svar03
        static int svar04
        static long svar05
        static float svar06
        static string svar07
        static enutype svar08
        static classtype svar09
        static string[3] svar10
        static string[] svar11
        static string[3,3] svar12
        static string[,] svar13
        static string[3,3,3] svar14
        static string[,,] svar15
        static classtype[3] svar16
        static classtype[] svar17
        static classtype[3,3] svar18
        static classtype[,] svar19
        static classtype[3,3,3] svar20
        static classtype[,,] svar21
        static type01 tsvar01
        static type02 tsvar02
        static type03 tsvar03
        static type04 tsvar04
        static type05 tsvar05
        static type06 tsvar06
        static type07 tsvar07
        static type08 tsvar08
        static type09 tsvar09
        static type10 tsvar10
        static type11 tsvar11
        static type12 tsvar12
        static type13 tsvar13
        static type14 tsvar14
        static type15 tsvar15
        static type16 tsvar16
        static type17 tsvar17
        static type18 tsvar18
        static type19 tsvar19
        static type20 tsvar20
        static type21 tsvar21
        string result=""
        result+=svar01.tostr()+",";
        result+=(string)svar02+",";
        result+=svar03.tostr()+",";
        result+=svar04.tostr()+",";
        result+=svar05.tostr()+",";
        result+=svar06.tostr()+",";
        result+=svar07+",";
        result+=((int)svar08).tostr()+",";
        result+=svar09.print()+",";
        result+="{"+svar10.join(":")+"},";
        result+="{"+svar11.join(":")+"},";
        result+="{"; for(int i=0 if i<svar12.dsize(1) do i++): for(int j=0 if j<svar12.dsize(2) do j++): result+=svar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar13.dsize(1) do i++): for(int j=0 if j<svar13.dsize(2) do j++): result+=svar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar14.dsize(1) do i++): for(int j=0 if j<svar14.dsize(2) do j++): for(int k=0 if k<svar14.dsize(3) do k++): result+=svar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<svar15.dsize(1) do i++): for(int j=0 if j<svar15.dsize(2) do j++): for(int k=0 if k<svar15.dsize(3) do k++): result+=svar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(svar16 on e as e.print()).join(":")+",";
        result+=array(svar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<svar18.dsize(1) do i++): for(int j=0 if j<svar18.dsize(2) do j++): result+=svar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar19.dsize(1) do i++): for(int j=0 if j<svar19.dsize(2) do j++): result+=svar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<svar20.dsize(1) do i++): for(int j=0 if j<svar20.dsize(2) do j++): for(int k=0 if k<svar20.dsize(3) do k++): result+=svar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<svar21.dsize(1) do i++): for(int j=0 if j<svar21.dsize(2) do j++): for(int k=0 if k<svar21.dsize(3) do k++): result+=svar21[i,j,k].print()+":"; :for :for :for result+="},";
        result+=" *** ";
        result+=tsvar01.tostr()+",";
        result+=(string)tsvar02+",";
        result+=tsvar03.tostr()+",";
        result+=tsvar04.tostr()+",";
        result+=tsvar05.tostr()+",";
        result+=tsvar06.tostr()+",";
        result+=tsvar07+",";
        result+=((int)tsvar08).tostr()+",";
        result+=tsvar09.print()+",";
        result+="{"+tsvar10.join(":")+"},";
        result+="{"+tsvar11.join(":")+"},";
        result+="{"; for(int i=0 if i<tsvar12.dsize(1) do i++): for(int j=0 if j<tsvar12.dsize(2) do j++): result+=tsvar12[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar13.dsize(1) do i++): for(int j=0 if j<tsvar13.dsize(2) do j++): result+=tsvar13[i,j]+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar14.dsize(1) do i++): for(int j=0 if j<tsvar14.dsize(2) do j++): for(int k=0 if k<tsvar14.dsize(3) do k++): result+=tsvar14[i,j,k]+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar15.dsize(1) do i++): for(int j=0 if j<tsvar15.dsize(2) do j++): for(int k=0 if k<tsvar15.dsize(3) do k++): result+=tsvar15[i,j,k]+":"; :for :for :for result+="},";
        result+=array(tsvar16 on e as e.print()).join(":")+",";
        result+=array(tsvar17 on e as e.print()).join(":")+",";
        result+="{"; for(int i=0 if i<tsvar18.dsize(1) do i++): for(int j=0 if j<tsvar18.dsize(2) do j++): result+=tsvar18[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar19.dsize(1) do i++): for(int j=0 if j<tsvar19.dsize(2) do j++): result+=tsvar19[i,j].print()+":"; :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar20.dsize(1) do i++): for(int j=0 if j<tsvar20.dsize(2) do j++): for(int k=0 if k<tsvar20.dsize(3) do k++): result+=tsvar20[i,j,k].print()+":"; :for :for :for result+="},";
        result+="{"; for(int i=0 if i<tsvar21.dsize(1) do i++): for(int j=0 if j<tsvar21.dsize(2) do j++): for(int k=0 if k<tsvar21.dsize(3) do k++): result+=tsvar21[i,j,k].print()+":"; :for :for :for result+="}";
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}, *** false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},{:::::::::},{},{:::::::::::::::::::::::::::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{},{(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):},{}",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)220): 
      testname="Declaration of expression variables with automatic initialization"
      create_script(testnr,"main", r"[
      set init_vars=true
       .libs
      import console as con
      import system as sys
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        char var2
        string var3
        string[] var4
        string[3] var5
        string[,] var6
        string[3,3] var7
        string[,,] var8
        string[3,3,3] var9
        string print()
      :class  
      type bool as type01
      type char as type02
      type short as type03
      type int as type04
      type long as type05
      type float as type06
      type string as type07
      type enutype as type08
      type classtype as type09
      type string[3] as type10
      type string[] as type11
      type classtype[3] as type16
      type classtype[] as type17
      .implem
      fmem string classtype.print():
        string result
        result+="("+self.var1.tostr()
        result+=","+self.var2.toint().tostr()
        result+=","+self.var3
        result+=",{"+self.var4.join(":")+"}"
        result+=",{"+self.var5.join(":")+"}"
        result+=",{"; for(int i=0 if i<self.var6.dsize(1) do i++): for(int j=0 if j<self.var6.dsize(2) do j++): result+=self.var6[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var7.dsize(1) do i++): for(int j=0 if j<self.var7.dsize(2) do j++): result+=self.var7[i,j]+":"; :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var8.dsize(1) do i++): for(int j=0 if j<self.var8.dsize(2) do j++): for(int k=0 if k<self.var8.dsize(3) do k++): result+=self.var8[i,j,k]+":"; :for :for :for result+="}"
        result+=",{"; for(int i=0 if i<self.var9.dsize(1) do i++): for(int j=0 if j<self.var9.dsize(2) do j++): for(int k=0 if k<self.var9.dsize(3) do k++): result+=self.var9[i,j,k]+":"; :for :for :for result+="}"
        result+=")"
        return result
      :fmem
      main:
        string result=""
        result+=(bool svar01->svar01.tostr()+",");
        result+=(char svar02->(string)svar02+",");
        result+=(short svar03->svar03.tostr()+",");
        result+=(int svar04->svar04.tostr()+",");
        result+=(long svar05->svar05.tostr()+",");
        result+=(float svar06->svar06.tostr()+",");
        result+=(string svar07->svar07+",");
        result+=(enutype svar08->((int)svar08).tostr()+",");
        result+=(classtype svar09->svar09.print()+",");
        result+=(string[3] svar10->"{"+svar10.join(":")+"},");
        result+=(string[] svar11->"{"+svar11.join(":")+"},");
        result+=(classtype[3] svar16->array(svar16 on e as e.print()).join(":")+",");
        result+=(classtype[] svar17->array(svar17 on e as e.print()).join(":")+",");
        result+=(type01 tsvar01->tsvar01.tostr()+",");
        result+=(type02 tsvar02->(string)tsvar02+",");
        result+=(type03 tsvar03->tsvar03.tostr()+",");
        result+=(type04 tsvar04->tsvar04.tostr()+",");
        result+=(type05 tsvar05->tsvar05.tostr()+",");
        result+=(type06 tsvar06->tsvar06.tostr()+",");
        result+=(type07 tsvar07->tsvar07+",");
        result+=(type08 tsvar08->((int)tsvar08).tostr()+",");
        result+=(type09 tsvar09->tsvar09.print()+",");
        result+=(type10 tsvar10->"{"+tsvar10.join(":")+"},");
        result+=(type11 tsvar11->"{"+tsvar11.join(":")+"},");
        result+=(type16 tsvar16->array(tsvar16 on e as e.print()).join(":")+",");
        result+=(type17 tsvar17->array(tsvar17 on e as e.print()).join(":"));
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),,false,,0,0,0,0.000000,,0,(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),{::},{},(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}):(0,0,,{},{::},{},{:::::::::},{},{:::::::::::::::::::::::::::}),",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)221): 
      testname="Test asterisk initialization of global variables (classes with static members)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      inner inner1*
      inner inner2*
      inner[3] innerf1*
      inner[3] innerf2*
      inner[] innerd1*
      inner[] innerd2*
      outer outer1*
      outer outer2*
      outer[3] outerf1*
      outer[3] outerf2*
      outer[] outerd1*
      outer[] outerd2*
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)222): 
      testname="Test asterisk initialization of local variables (classes with static members)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner inner1*
        inner inner2*
        inner[3] innerf1*
        inner[3] innerf2*
        inner[] innerd1*
        inner[] innerd2*
        outer outer1*
        outer outer2*
        outer[3] outerf1*
        outer[3] outerf2*
        outer[] outerd1*
        outer[] outerd2*
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)223): 
      testname="Test asterisk initialization of static variables (classes with static members)"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        static inner inner1*
        static inner inner2*
        static inner[3] innerf1*
        static inner[3] innerf2*
        static inner[] innerd1*
        static inner[] innerd2*
        static outer outer1*
        static outer outer2*
        static outer[3] outerf1*
        static outer[3] outerf2*
        static outer[] outerd1*
        static outer[] outerd2*
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)224): 
      testname="Test automatic initialization of global variables (classes with static members)"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      inner inner1
      inner inner2
      inner[3] innerf1
      inner[3] innerf2
      inner[] innerd1
      inner[] innerd2
      outer outer1
      outer outer2
      outer[3] outerf1
      outer[3] outerf2
      outer[] outerd1
      outer[] outerd2
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)225): 
      testname="Test automatic initialization of local variables (classes with static members)"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        inner inner1
        inner inner2
        inner[3] innerf1
        inner[3] innerf2
        inner[] innerd1
        inner[] innerd2
        outer outer1
        outer outer2
        outer[3] outerf1
        outer[3] outerf2
        outer[] outerd1
        outer[] outerd2
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)226): 
      testname="Test automatic initialization of static variables (classes with static members)"
      create_script(testnr,"main", r"[
      set init_vars=true
      .libs
      import console as con
      .private
      class inner:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        string tostr()
      :class
      class outer:
        int i1
        static int i2
        string s1
        static string s2
        char[3] c1
        static char[3] c2
        char[] d1
        static char[] d2
        string[3] a1
        static string[3] a2
        string[] b1
        static string[] b2
        inner in1
        static inner in2
        string tostr()       
      :class
      .implem
      fmem string inner.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"))"
        return result
      :fmem
      fmem string outer.tostr():
        string result=""
        result+="("
        result+="i1="+self.i1.tostr()+","
        result+="i2="+self.i2.tostr()+","
        result+="s1="+self.s1+","
        result+="s2="+self.s2+","
        result+="c1="+"("+array(self.c1 on c as c.toint().tostr()).join(",")+"),"
        result+="c2="+"("+array(self.c2 on c as c.toint().tostr()).join(",")+"),"
        result+="d1="+"("+array(self.d1 on c as c.toint().tostr()).join(",")+"),"
        result+="d2="+"("+array(self.d2 on c as c.toint().tostr()).join(",")+"),"
        result+="a1="+"("+self.a1.join(",")+"),"
        result+="a2="+"("+self.a2.join(",")+"),"
        result+="b1="+"("+self.b1.join(",")+"),"
        result+="b2="+"("+self.b2.join(",")+"),"
        result+="in1="+self.in1.tostr()+","
        result+="in2="+self.in2.tostr()+")"
        return result
      :fmem
      main:
        static inner inner1
        static inner inner2
        static inner[3] innerf1
        static inner[3] innerf2
        static inner[] innerd1
        static inner[] innerd2
        static outer outer1
        static outer outer2
        static outer[3] outerf1
        static outer[3] outerf2
        static outer[] outerd1
        static outer[] outerd2
        inner2=inner1
        innerf2=innerf1
        innerd2=innerd1
        outer2=outer1
        outerf2=outerf1
        outerd2=outerd1
        con.print("*** 1: "+inner2.tostr())
        con.print("*** 2: "+array(innerf2 on elem as elem.tostr()).join(","))
        con.print("*** 3: "+array(innerd2 on elem as elem.tostr()).join(","))
        con.print("*** 4: "+outer2.tostr())
        con.print("*** 5: "+array(outerf2 on elem as elem.tostr()).join(","))
        con.print("*** 6: "+array(outerd2 on elem as elem.tostr()).join(","))
      :main
      ]")
      execute_test(testnr,testname,"main","","*** 1: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 2: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())*** 3: *** 4: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 5: (i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=())),(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=(),in1=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()),in2=(i1=0,i2=0,s1=,s2=,c1=(0,0,0),c2=(0,0,0),d1=(),d2=(),a1=(,,),a2=(,,),b1=(),b2=()))*** 6: ",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)227): 
      testname="Test declaration of variables with asterisk initialization plus assign gives error"
      create_script(testnr,"main", r"[
      .private
      class myclass:
        static int fld*=0
      :class
      .implem
      main:
        int i*=0
      :main
      ]")
      execute_test(testnr,testname,"main","","E545*E544*",true)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)228): 
      testname="Test init sentence modifier on function members"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      class myclass:
        int field1
        init void setvalue(int value)
        int getfield()
      :class
      .implem
      fmem void myclass.setvalue(int value):
        self.field1=value
      :fmem
      fmem int myclass.getfield():
        return self.field1
      :fmem
      main:
        myclass obj1
        obj1.setvalue(5)
        con.print(obj1.getfield().tostr())
      :main
      ]")
      execute_test(testnr,testname,"main","","5",false)
      break

    //Test ----------------------------------------------------------------------------------------------------------
    when((int)229): 
      testname="Test master methods with meta method and initializer flags"
      create_script(testnr,"main", r"[
      .libs
      import console as con
      .private
      enum enutype:
        enu1
        enu2
        enu3
      :enum
      class classtype:
        int var1
        int var2
        int var3
        string tostr()
      :class  
      bool var01
      char var02
      short var03
      int var04
      long var05
      float var06
      string var07
      enutype var08
      classtype var09
      char[3] var10
      char[] var11
      .implem
      fmem string classtype.tostr():
        return "("+self.var1.tostr()+":"+self.var2.tostr()+":"+self.var3.tostr()+")"
      :fmem
      main:
        string result=""
        result+="var01.name()="+var01.name()+","+"var01.dtype()="+var01.dtype()+","+"var01.sizeof()="+var01.sizeof().tostr()+";"
        result+="var02.name()="+var02.name()+","+"var02.dtype()="+var02.dtype()+","+"var02.sizeof()="+var02.sizeof().tostr()+";"
        result+="var03.name()="+var03.name()+","+"var03.dtype()="+var03.dtype()+","+"var03.sizeof()="+var03.sizeof().tostr()+";"
        result+="var04.name()="+var04.name()+","+"var04.dtype()="+var04.dtype()+","+"var04.sizeof()="+var04.sizeof().tostr()+";"
        result+="var05.name()="+var05.name()+","+"var05.dtype()="+var05.dtype()+","+"var05.sizeof()="+var05.sizeof().tostr()+";"
        result+="var06.name()="+var06.name()+","+"var06.dtype()="+var06.dtype()+","+"var06.sizeof()="+var06.sizeof().tostr()+";"
        result+="var07.name()="+var07.name()+","+"var07.dtype()="+var07.dtype()+";"
        result+="var08.name()="+var08.name()+","+"var08.dtype()="+var08.dtype()+","+"var08.sizeof()="+var08.sizeof().tostr()+"var08.fieldcount()="+var08.fieldcount().tostr()+",var08.fieldnames()="+var08.fieldnames().join(":")+",var08.fieldtypes()="+var08.fieldtypes().join(":")+";"
        result+="var09.name()="+var09.name()+","+"var09.dtype()="+var09.dtype()+","+"var09.fieldcount()="+var09.fieldcount().tostr()+",var09.fieldnames()="+var09.fieldnames().join(":")+",var09.fieldtypes()="+var09.fieldtypes().join(":")+";"
        result+="var10.name()="+var10.name()+","+"var10.dtype()="+var10.dtype()+","+"var10.sizeof()="+var10.sizeof().tostr()+";"
        result+="var11.name()="+var11.name()+","+"var11.dtype()="+var11.dtype()+";"
        result+="frombytes="+var01.frombytes((char[]){0}).tostr()+";"
        result+="frombytes="+var02.frombytes((char[]){'B'}).tostr()+";"
        result+="frombytes="+var03.frombytes((char[]){66,1}).tostr()+";"
        result+="frombytes="+var04.frombytes((char[]){66,1,1,1}).tostr()+";"
        result+="frombytes="+var05.frombytes((char[]){66,1,1,1,1,1,1,1}).tostr()+";"
        result+="frombytes="+var06.frombytes((char[]){119,-66,-97,26,47,-35,94,64}).tostr()+";"
        result+="frombytes="+var07.frombytes((char[]){'H','e','l','l','o',' ','w','o','r','l','d','!'})+";"
        result+="frombytes="+var08.frombytes((char[]){2,0,0,0}).tostr()+";"
        result+="frombytes="+var09.frombytes(((classtype){1,2,3}).tobytes()).tostr()+";"
        result+="frombytes="+var10.frombytes(((char[3]){'f','g','h'}).tobytes()).join(":")+";"
        result+="frombytes="+var11.frombytes(((char[]){'f','g','h','i','j'}).tobytes()).join(":")+";"
        con.print(result)
      :main
      ]")
      execute_test(testnr,testname,"main","","var01.name()=var01,var01.dtype()=bool,var01.sizeof()=1;var02.name()=var02,var02.dtype()=char,var02.sizeof()=1;var03.name()=var03,var03.dtype()=short,var03.sizeof()=2;var04.name()=var04,var04.dtype()=int,var04.sizeof()=4;var05.name()=var05,var05.dtype()=long,var05.sizeof()=8;var06.name()=var06,var06.dtype()=float,var06.sizeof()=8;var07.name()=var07,var07.dtype()=string;var08.name()=var08,var08.dtype()=enutype,var08.sizeof()=4var08.fieldcount()=3,var08.fieldnames()=enu1:enu2:enu3,var08.fieldtypes()=int:int:int;var09.name()=var09,var09.dtype()=classtype,var09.fieldcount()=3,var09.fieldnames()=var1:var2:var3,var09.fieldtypes()=int:int:int;var10.name()=var10,var10.dtype()=char[3],var10.sizeof()=3;var11.name()=var11,var11.dtype()=char[];frombytes=false;frombytes=B;frombytes=322;frombytes=16843074;frombytes=72340172838076738;frombytes=123.456000;frombytes=Hello world!;frombytes=2;frombytes=(1:2:3);frombytes=f:g:h;frombytes=f:g:h:i:j;",false)
      break

  :switch

:func

//Main
main:

  //Variables
  int testnr

  //Command line options woth default values
  exec_mode mode=exec_mode.full
  int single_test=0
  int range_min=0
  int range_max=0

  //Get arguments
  if(!get_command_line_options(mode,single_test,range_min,range_max,_maxfailures,_list_mode)):
    sys.exit()
  :if    

  //Single test
  if(mode==exec_mode.single):
    system_test(single_test)

  //Test range
  elif(mode==exec_mode.range):
    if(!_list_mode): con.println("Executing tests from "+range_min.tostr()+" to "+range_max.tostr()+"..."); :if
    for(testnr=range_min if testnr<=range_max do testnr++):
      system_test(testnr)
    :for

  //Full system test
  else:
    if(!_list_mode): con.println("Full system test..."); :if
    for(testnr=1 if testnr<=_definedtests do testnr++):
      system_test(testnr)
    :for
  :if

  //Statistics
  if(!_list_mode):
    con.print("                                                      \r")
    if(_failed+_notimp!=0):
      con.println("*** System checks failed! ***")
    else:
      con.println("*** System checks passed ***")
    :if
    con.println("Executed.......: "+(_passed+_failed+_notimp).tostr().rjust(_testnrwidth))
    con.println("Passed.........: "+_passed.tostr().rjust(_testnrwidth))
    con.println("Failed.........: "+_failed.tostr().rjust(_testnrwidth))
    con.println("Not implemented: "+_notimp.tostr().rjust(_testnrwidth))
    if((_failed+_notimp)>=_maxfailures):
      con.println("(Maximun number of "+_maxfailures.tostr()+" failures reached)")
    :if
  :if

:main